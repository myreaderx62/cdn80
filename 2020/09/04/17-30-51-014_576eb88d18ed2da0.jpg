<!doctype html>
<html>
  <head>
    <title>Planet Clojure</title>
    <meta charset="utf-8" />
    <meta name="generator" content="http://intertwingly.net/code/venus/" />
    <link href="#" rel="apple-touch-icon" />
    <link rel="stylesheet" href="static/css/screen.css" media="screen, projection" />

<!--[if IE]>
<link rel="stylesheet" type="text/css" href="static/css/ie.css" media="screen, projection" />
<script type="text/javascript" src="static/js/html5.js"></script>
<![endif]-->



    <link rel="apple-touch-icon" sizes="180x180" href="/static/i/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/static/i/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/static/i/favicon-16x16.png">
    <link rel="manifest" href="/static/i/site.webmanifest">
    <link rel="shortcut icon" href="/static/i/favicon.ico">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="msapplication-config" content="/static/i/browserconfig.xml">
    <meta name="theme-color" content="#ffffff">
    <link rel="alternate" href="http://planet.clojure.in/atom.xml" type="application/rss+xml" title="Planet Clojure RSS Feed" />
<!--    <link rel="alternate" href="http://feeds.feedburner.com/clojure" type="application/rss+xml" title="Planet Clojure RSS Feed" />-->
  </head>
  <body>
    <div id="planet">
      <div id="main">
        <div id="main-content">

          <header id="header">
            <h1><a href="" id="title"><span>Planet Clojure</span></a></h1>
          </header>

          <section class="entry">
            <aside class="aside">
              <!-- <img src="static/i/favicon.gif" alt="Name of the Site" /> -->
              <h2><a href="https://tech.redplanetlabs.com" title="Tech blog">Red Planet Labs</a></h2>
              <p>
September 02, 2020 08:14 PM                <br />
                <a href="https://tech.redplanetlabs.com">Feed URL</a>
              </p>
            </aside>
            <article class="article">
              <h2><a href="https://tech.redplanetlabs.com/2020/09/02/clojure-faster/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=clojure-faster">Clojure, Faster</a></h2>
              <p>
<p>Dynamic, functional programming languages like Clojure are sometimes considered “slower” than their statically-typed and/or OO counterparts, due to facilities like dynamic function dispatch and immutable-orientation, etc. But this comparison is too general. </p>



<p>Clojure is <em>readily</em> optimizable in cases where utmost performance is key. Clojure embraces the “Get it working, then make it fast” approach to building up a software system—even large-scale systems with high performance demands<a href="https://tech.redplanetlabs.com/feed/#footnotes">¹</a>.</p>



<p>This post is about micro-optimizing Clojure code: how can we improve our Clojure code performance on the JVM when we need it the most, when hot code paths and tight loops prevail—for example, in large-scale data processing systems.</p>



<p>General JVM performance, benchmarking, and tuning is a broad and deep skillset and there are many more considerations beyond Clojure. The focus here is Clojure-specific.</p>



<ul><li><a href="https://tech.redplanetlabs.com/feed/#clojure-performance-tools">Clojure Performance Tools</a></li><li><a href="https://tech.redplanetlabs.com/feed/#avoiding-laziness">Avoiding Laziness</a></li><li><a href="https://tech.redplanetlabs.com/feed/#first-and-last">first and last</a></li><li><a href="https://tech.redplanetlabs.com/feed/#equiv-equals">equiv and equals</a></li><li><a href="https://tech.redplanetlabs.com/feed/#dynamic-vars">Dynamic Vars vs. ThreadLocal</a></li><li><a href="https://tech.redplanetlabs.com/feed/#clojure-transients">Clojure Transients</a></li><li><a href="https://tech.redplanetlabs.com/feed/#dramatic-gains-with-type-hinting">Dramatic Gains with Type Hinting</a></li><li><a href="https://tech.redplanetlabs.com/feed/#destructuring">The Cost of Destructuring</a></li><li><a href="https://tech.redplanetlabs.com/feed/#benchmarking-with-jmh">Benchmarking with JMH</a></li><li><a href="https://tech.redplanetlabs.com/feed/#final-notes">Final Notes</a></li></ul>



<h2 class="has-large-font-size" id="clojure-performance-tools">Clojure Performance Tools</h2>



<p>Before we get to our specific list of Clojure optimizations, we should emphasize that running your own benchmark and profiling experiments is essential to producing specific top-level performance outcomes for your own code and domain.</p>



<p>You could follow all of the advice in this post, shower your code with type hints, remove laziness and sequences, etc, etc, and⁠ without a <em>specific</em> performance model for where your costs are coming from and how to measure improvement, it is possible or even likely to see no dip in your processing latencies or reduction in your cloud bill<a href="https://tech.redplanetlabs.com/feed/#footnotes">²</a>.</p>



<p>We recommend the following tools for performing your own analyses; these were all used in developing this post:</p>



<ul><li><a href="https://github.com/hugoduncan/criterium">criterium</a> A benchmarking tool that is a Clojure industry-standard at this point; most of the relative benchmarks in this post are generated from the REPL using criterium.</li><li><a href="https://github.com/clojure-goes-fast/clj-async-profiler">clj-async-profiler</a> For minimal quick and dirty Clojure profiling. REPL-enabled.</li><li><a href="https://github.com/gtrak/no.disassemble">no.disassemble</a> For inspecting Clojure-compiled byte code from the REPL. (If you’re familiar with <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javap.html">javap</a>, the output is what you would see from decompiling classes using javap -c on the command-line, except you can see what a compiled Clojure function looks like.)</li><li><a href="http://openjdk.java.net/projects/code-tools/jmh/">jmh</a> (Java Microbenchmark Harness) A feature-rich benchmarking toolkit for the JVM. Its usage is heavily Java/annotation-based (so not REPL-friendly) but it has an expressive feature set, making it possible to run more specialized<a href="http://hg.openjdk.java.net/code-tools/jmh/file/4a420afe8a9e/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_30_Interrupts.java"> </a>benchmarks such as <a href="http://hg.openjdk.java.net/code-tools/jmh/file/4a420afe8a9e/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_30_Interrupts.java">ones</a> that could deadlock (and many others; see <a href="http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/">here</a>.) We find it essential in carrying out a comprehensive benchmarking analyses and we’ll demonstrate out how to use it with Clojure a bit later on.</li></ul>



<h2 class="has-large-font-size" id="avoiding-laziness">Avoiding Laziness</h2>



<p>Clojure’s sequence abstraction and laziness are powerful programming facilities but we must shy away from these tools when memory and compute are in high demand. </p>



<p>Why? Lazy implementations require generating <em>per-element </em>state and this can be substantial overhead when compared to non-lazy alternatives like arrays and vectors whose elements each contribute just their own value’s size to memory.</p>



<p>Accordingly there is computation overhead in laziness due to this per element construction; compare lazy implementations of map and filter to transform values in a vector with a non-lazy (<a href="https://clojure.org/reference/transducers">transducer</a>-based) alternative:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span><span style="color: #b1b100;">let</span> <span style="color: #66cc66;">[</span>data <span style="color: #66cc66;">(</span><span style="color: #b1b100;">vec</span> <span style="color: #66cc66;">(</span><span style="color: #b1b100;">range</span> <span style="color: #cc66cc;">100</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">]</span><br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
        <span style="color: #66cc66;">(</span><span style="color: #b1b100;">into</span> <span style="color: #66cc66;">[</span><span style="color: #66cc66;">]</span> <span style="color: #66cc66;">(</span><span style="color: #b1b100;">map</span> <span style="color: #b1b100;">inc</span> <span style="color: #66cc66;">(</span><span style="color: #b1b100;">filter</span> even? data<span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 3.916001 µs</span><br />
<br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
        <span style="color: #66cc66;">(</span><span style="color: #b1b100;">into</span> <span style="color: #66cc66;">[</span><span style="color: #66cc66;">]</span> <span style="color: #66cc66;">(</span>comp <span style="color: #66cc66;">(</span><span style="color: #b1b100;">filter</span> even?<span style="color: #66cc66;">)</span> <span style="color: #66cc66;">(</span><span style="color: #b1b100;">map</span> <span style="color: #b1b100;">inc</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> data<span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 1.738479 µs</span></div></td></tr></tbody></table></div>




<p>into has first-class transducer support; the same over-<em>2x</em> gains follow when using transducers + transduce in favor of laziness + reduce.</p>



<p>Avoid laziness where scale matters.</p>



<h2 id="first-and-last">first and last</h2>



<p>This one is particularly frustrating. We might expect <a href="https://clojuredocs.org/clojure.core/first">first</a> and <a href="https://clojuredocs.org/clojure.core/last">last</a> to have special consideration of their provided type. But this is not the case; they are implemented over Clojure’s lazy sequence API without respect of type. Even with a vector, last will obtain the result using a full linear pass over the data. Both first and last <a href="https://clojuredocs.org/clojure.core/seq">seq</a> the input unnecessarily which is additional computation cost.</p>



<p>Of course we have a way out⁠—but the moral of the story is to stay well away from first and last when optimal performance is required. Here’s a full sequence of benchmarks; notice the dramatic relative cost of first and last on vectors. Pick the latencies you like the best:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px; height: 300px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span><span style="color: #b1b100;">let</span> <span style="color: #66cc66;">[</span>v <span style="color: #66cc66;">(</span><span style="color: #b1b100;">into</span> <span style="color: #66cc66;">[</span><span style="color: #66cc66;">]</span> <span style="color: #66cc66;">(</span><span style="color: #b1b100;">range</span> <span style="color: #cc66cc;">1000</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">]</span><br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
        <span style="color: #66cc66;">(</span><span style="color: #b1b100;">first</span> v<span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> <br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 53.459498 ns</span><br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
        <span style="color: #66cc66;">(</span>nth v <span style="color: #cc66cc;">0</span><span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> <br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 8.477276 ns</span><br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
        <span style="color: #66cc66;">(</span><span style="color: #66cc66;">.</span>nth <span style="color: #66cc66;">^</span>Indexed v <span style="color: #cc66cc;">0</span><span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> <br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 7.898334 ns</span><br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
        <span style="color: #66cc66;">(</span>last v<span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> <br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 13.215272 µs  (!!!)</span><br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
        <span style="color: #66cc66;">(</span>nth v <span style="color: #66cc66;">(</span><span style="color: #66cc66;">-&gt;</span> v <span style="color: #b1b100;">count</span> <span style="color: #b1b100;">dec</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> <br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 93.989401 ns</span><br />
    <span style="color: #808080; font-style: italic;">;; The cost of the previous expression is primarily in the count; so we can improve it:</span><br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
        <span style="color: #66cc66;">(</span>nth v <span style="color: #66cc66;">(</span><span style="color: #66cc66;">-&gt;</span> <span style="color: #66cc66;">^</span>IPersistentVector v <span style="color: #66cc66;">.</span>length <span style="color: #b1b100;">dec</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
    <span style="color: #66cc66;">)</span><br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 7.155083 ns</span></div></td></tr></tbody></table></div>




<p>Edit: Clojure’s <a href="https://clojuredocs.org/clojure.core/peek">peek</a> will answer the last item of a vector optimally. The benchmark for peek matches precisely the mean execution time of nth + .length in the last benchmark above. [<a href="https://twitter.com/puredanger/status/1301269975819341826">Credit</a>]</p>



<h2 class="has-large-font-size" id="equiv-equals">equiv and equals</h2>



<p>An occasional need in high-performing applications is a read-heavy, in-memory cache or value registry, commonly with some kind of composite/tuple for its map keys. It turns out that the choice of datatype (for both map and key) are… erm… key here.</p>



<p>Consider the following benchmarks for a simple map lookup using different combinations of map type (Clojure’s PersistentHashMap vs. Java’s HashMap) and composite key type.</p>



<figure class="wp-block-table is-style-stripes"><table><tbody><tr><td>PersistentHashMap</td><td>[“a” “b”]</td><td>167 ns</td></tr><tr><td>“</td><td>(ArrayList. [“a” “b”])</td><td>95 ns</td></tr><tr><td>“</td><td>“a:b”</td><td>78 ns</td></tr><tr><td>“</td><td>(→CacheKey “a” “b”)</td><td>116 ns</td></tr><tr><td>HashMap</td><td>[“a” “b”]</td><td>36 ns</td></tr><tr><td>“</td><td>(ArrayList. [“a” “b”])</td><td>53 ns</td></tr><tr><td>“</td><td>“a:b”</td><td>33 ns</td></tr><tr><td>“</td><td>(→CacheKey “a” “b”)</td><td>152 ns</td></tr></tbody></table>Benchmarks for (get map key) for different map and key types. CacheKey is a basic defrecord type; “a:b” is a simple String with the composite values concatenated, etc.</figure>



<p>This is quite a lot of variation in performance: JDK’s HashMap performs significantly better (except when using a record key—we’ll look at that one later). What accounts for this? </p>



<p>Clojure defines <a href="https://clojure.org/guides/equality">equality</a> (i.e., clojure.core/=) more generically than Java’s .equals and this definition is used by Clojure’s data structures for equality comparison, PersistentHashMap in this case:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span><span style="color: #b1b100;">let</span> <span style="color: #66cc66;">[</span>v <span style="color: #66cc66;">[</span><span style="color: #ff0000;">"a"</span> <span style="color: #ff0000;">"b"</span><span style="color: #66cc66;">]</span> v2 <span style="color: #66cc66;">[</span><span style="color: #ff0000;">"a"</span> <span style="color: #ff0000;">"b"</span><span style="color: #66cc66;">]</span><span style="color: #66cc66;">]</span><br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
        <span style="color: #66cc66;">(</span><span style="color: #66cc66;">=</span> v v2<span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> <br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 91.347726 ns</span><br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
        <span style="color: #66cc66;">(</span><span style="color: #66cc66;">.</span>equals v v2<span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> <br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 10.741904 ns</span></div></td></tr></tbody></table></div>




<p>Significant performance difference for these composite (vector) keys.</p>



<p>Of course, Clojure’s = is more general than Java .equals, which is a stricter comparison in several cases; here is just one example:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span><span style="color: #66cc66;">.</span>equals <span style="color: #66cc66;">[</span><span style="color: #cc66cc;">1</span> <span style="color: #cc66cc;">2</span><span style="color: #66cc66;">]</span> <span style="color: #66cc66;">[</span><span style="color: #66cc66;">(</span>int <span style="color: #cc66cc;">1</span><span style="color: #66cc66;">)</span> <span style="color: #cc66cc;">2</span><span style="color: #66cc66;">]</span><span style="color: #66cc66;">)</span><br />
⇒ false<br />
<span style="color: #66cc66;">(</span><span style="color: #66cc66;">=</span> <span style="color: #66cc66;">[</span><span style="color: #cc66cc;">1</span> <span style="color: #cc66cc;">2</span><span style="color: #66cc66;">]</span> <span style="color: #66cc66;">[</span><span style="color: #66cc66;">(</span>int <span style="color: #cc66cc;">1</span><span style="color: #66cc66;">)</span> <span style="color: #cc66cc;">2</span><span style="color: #66cc66;">]</span><span style="color: #66cc66;">)</span><br />
⇒ true</div></td></tr></tbody></table></div>




<p>So we need to be sure that the keys we use in our map are carefully constructed to always compare correctly with the stronger .equals semantics.</p>



<p>Lastly, using a defrecord (CacheKey) appears to offer the worst performance. Let’s use some lightweight profiling to understand what is going on here, by comparing records vs vectors as keys:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span><span style="color: #b1b100;">let</span> <span style="color: #66cc66;">[</span>k <span style="color: #66cc66;">(</span>→CacheKey <span style="color: #ff0000;">"a"</span> <span style="color: #ff0000;">"b"</span><span style="color: #66cc66;">)</span><br />
      m <span style="color: #66cc66;">(</span>HashMap<span style="color: #66cc66;">.</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">(</span>→CacheKey <span style="color: #ff0000;">"a"</span> <span style="color: #ff0000;">"b"</span><span style="color: #66cc66;">)</span> ::<span style="color: #555;">val</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">]</span><br />
    <span style="color: #66cc66;">(</span>prof<span style="color: #66cc66;">/</span>profile<br />
      <span style="color: #66cc66;">(</span><span style="color: #b1b100;">dotimes</span> <span style="color: #66cc66;">[</span>i <span style="color: #cc66cc;">100000000</span><span style="color: #66cc66;">]</span> <span style="color: #66cc66;">(</span>get m k<span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> <span style="color: #808080; font-style: italic;">;; Figure 1</span><br />
  <span style="color: #66cc66;">(</span><span style="color: #b1b100;">let</span> <span style="color: #66cc66;">[</span>k <span style="color: #66cc66;">[</span><span style="color: #ff0000;">"a"</span> <span style="color: #ff0000;">"b"</span><span style="color: #66cc66;">]</span><br />
        m <span style="color: #66cc66;">(</span>HashMap<span style="color: #66cc66;">.</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">[</span><span style="color: #ff0000;">"a"</span> <span style="color: #ff0000;">"b"</span><span style="color: #66cc66;">]</span> ::<span style="color: #555;">val</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">]</span><br />
    <span style="color: #66cc66;">(</span>prof<span style="color: #66cc66;">/</span>profile<br />
      <span style="color: #66cc66;">(</span><span style="color: #b1b100;">dotimes</span> <span style="color: #66cc66;">[</span>i <span style="color: #cc66cc;">100000000</span><span style="color: #66cc66;">]</span> <span style="color: #66cc66;">(</span>get m k<span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> <span style="color: #808080; font-style: italic;">;; Figure 2</span></div></td></tr></tbody></table></div>




<figure class="wp-block-image size-large"><img alt="" class="wp-image-275" height="155" src="https://i0.wp.com/tech.redplanetlabs.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-15-at-8.52.07-AM.png?resize=656%2C155&amp;ssl=1" width="656" />Figure 1. Map lookup using a defrecord as the key. This flamegraph shows relative time spent in execution of each function in the call stack — generated from the REPL by <a href="https://github.com/clojure-goes-fast/clj-async-profiler">clj-async-profiler</a>.</figure>



<figure class="wp-block-image size-large"><img alt="" class="wp-image-276" height="58" src="https://i2.wp.com/tech.redplanetlabs.com/wp-content/uploads/2020/07/Screen-Shot-2020-07-15-at-8.52.28-AM.png?resize=656%2C58&amp;ssl=1" width="656" />Figure 2. Map lookup using a vector tuple as the key.</figure>



<p>From our profiling, the map equality used by the CacheKey record looks suspicious. We can confirm its performance is much worse than vector equals:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br /></div></td><td><div class="clojure codecolorer">  <span style="color: #66cc66;">(</span><span style="color: #b1b100;">let</span> <span style="color: #66cc66;">[</span>ka <span style="color: #66cc66;">(</span>→CacheKey <span style="color: #ff0000;">"a"</span> <span style="color: #ff0000;">"b"</span><span style="color: #66cc66;">)</span> kb <span style="color: #66cc66;">(</span>→CacheKey <span style="color: #ff0000;">"a"</span> <span style="color: #ff0000;">"b"</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">]</span><br />
    <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
      <span style="color: #66cc66;">(</span><span style="color: #66cc66;">.</span>equals ka kb<span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> <br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 2.015044 µs</span><br />
  <span style="color: #66cc66;">(</span><span style="color: #b1b100;">let</span> <span style="color: #66cc66;">[</span>ka <span style="color: #66cc66;">[</span><span style="color: #ff0000;">"a"</span> <span style="color: #ff0000;">"b"</span><span style="color: #66cc66;">]</span> kb <span style="color: #66cc66;">[</span><span style="color: #ff0000;">"a"</span> <span style="color: #ff0000;">"b"</span><span style="color: #66cc66;">]</span><span style="color: #66cc66;">]</span><br />
    <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
      <span style="color: #66cc66;">(</span><span style="color: #66cc66;">.</span>equals ka kb<span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> <br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 11.376671 ns</span></div></td></tr></tbody></table></div>




<p>The performance overhead we’ve discussed here is minimal for map lookups of singular values like keywords; we are generally okay to stick to Clojure datatypes for data entities where these key types are idiomatic. Still, using records (defrecord) for data entities can have a significant twofactor impact on key lookups:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br /></div></td><td><div class="clojure codecolorer">  <span style="color: #66cc66;">(</span><span style="color: #b1b100;">let</span> <span style="color: #66cc66;">[</span>k <span style="color: #66cc66;">(</span>→CacheKey <span style="color: #ff0000;">"a"</span> <span style="color: #ff0000;">"b"</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">]</span><br />
    <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
      <span style="color: #66cc66;">(</span>:<span style="color: #555;">a</span> k<span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
<span style="color: #808080; font-style: italic;">;; Execution time mean :  5.638519 ns</span><br />
  <span style="color: #66cc66;">(</span><span style="color: #b1b100;">let</span> <span style="color: #66cc66;">[</span>k <span style="color: #66cc66;">{</span>:<span style="color: #555;">a</span> <span style="color: #ff0000;">"a"</span> :<span style="color: #555;">b</span> <span style="color: #ff0000;">"b"</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">]</span><br />
    <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
      <span style="color: #66cc66;">(</span>:<span style="color: #555;">a</span> k<span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 10.495481 ns</span></div></td></tr></tbody></table></div>




<p>To make a broader generalization to wrap up this section, the JDK ecosystem at large has battled-hardened collection and data structure offerings for high performance use cases and Clojure’s Java interop (with type hints!) gives us access to any of these that make sense for our code hot spots.</p>



<h2 class="has-large-font-size" id="dynamic-vars">Dynamic Vars vs. ThreadLocal</h2>



<p>Another occasional need is for a per-thread state mechanism. Clojure has dynamic vars and binding, but the Clojure implementation of reading a dynamic var is far less optimal than using a ThreadLocal directly:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span><span style="color: #b1b100;">def</span> <span style="color: #66cc66;">^</span>:<span style="color: #555;">dynamic</span> <span style="color: #66cc66;">*</span>dyna<span style="color: #66cc66;">-</span>state<span style="color: #66cc66;">*</span> nil<span style="color: #66cc66;">)</span><br />
<span style="color: #66cc66;">(</span><span style="color: #b1b100;">def</span> <span style="color: #66cc66;">^</span>ThreadLocal thr<span style="color: #66cc66;">-</span>local<span style="color: #66cc66;">-</span>state <span style="color: #66cc66;">(</span>ThreadLocal<span style="color: #66cc66;">.</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
<br />
<span style="color: #66cc66;">(</span><span style="color: #b1b100;">binding</span> <span style="color: #66cc66;">[</span><span style="color: #66cc66;">*</span>dyna<span style="color: #66cc66;">-</span>state<span style="color: #66cc66;">*</span> <span style="color: #cc66cc;">100</span><span style="color: #66cc66;">]</span><br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
        <span style="color: #66cc66;">(</span><span style="color: #66cc66;">.</span>get thr<span style="color: #66cc66;">-</span>local<span style="color: #66cc66;">-</span>state<span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 6.269224 ns</span><br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
        <span style="color: #66cc66;">*</span>dyna<span style="color: #66cc66;">-</span>state<span style="color: #66cc66;">*</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 42.911467 ns</span><br />
    <span style="color: #66cc66;">)</span></div></td></tr></tbody></table></div>




<p>Even the resolution of var values can be optimized by use of ^:const metadata, which makes the var value inlined at compile-time:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span><span style="color: #b1b100;">def</span> <span style="color: #66cc66;">^</span>:<span style="color: #555;">const</span> <span style="color: #66cc66;">^</span>Long const<span style="color: #66cc66;">-</span>val <span style="color: #cc66cc;">99</span><span style="color: #66cc66;">)</span><br />
<span style="color: #66cc66;">(</span><span style="color: #b1b100;">def</span> <span style="color: #66cc66;">^</span>Long var<span style="color: #66cc66;">-</span>val <span style="color: #cc66cc;">99</span><span style="color: #66cc66;">)</span><br />
<br />
<span style="color: #66cc66;">(</span><span style="color: #b1b100;">do</span><br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
        <span style="color: #66cc66;">(</span>unchecked<span style="color: #66cc66;">-</span>multiply <span style="color: #cc66cc;">1</span> const<span style="color: #66cc66;">-</span>val<span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 2.712172 ns</span><br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
        <span style="color: #66cc66;">(</span>unchecked<span style="color: #66cc66;">-</span>multiply <span style="color: #cc66cc;">1</span> var<span style="color: #66cc66;">-</span>val<span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 4.876835 ns</span><br />
    <span style="color: #66cc66;">)</span></div></td></tr></tbody></table></div>




<p>Of course this means any redef of const-val here will go unnoticed by any previously compiled references to it.</p>



<h2 class="has-large-font-size" id="clojure-transients">Clojure Transients</h2>



<p>For initializing immutable data types with many values, Clojure’s <a href="https://clojure.org/reference/transients">transients</a> are fast:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark <br />
   <span style="color: #66cc66;">(</span>persistent<span style="color: #66cc66;">!</span> <span style="color: #66cc66;">(</span><span style="color: #b1b100;">reduce</span> <span style="color: #b1b100;">conj</span><span style="color: #66cc66;">!</span> <span style="color: #66cc66;">(</span>transient <span style="color: #66cc66;">[</span><span style="color: #66cc66;">]</span><span style="color: #66cc66;">)</span> <span style="color: #66cc66;">(</span><span style="color: #b1b100;">range</span> <span style="color: #cc66cc;">100000</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
<span style="color: #808080; font-style: italic;">;; Execution time mean: 1.189867 ms</span><br />
<br />
   <span style="color: #66cc66;">(</span><span style="color: #b1b100;">reduce</span> <span style="color: #b1b100;">conj</span> <span style="color: #66cc66;">[</span><span style="color: #66cc66;">]</span> <span style="color: #66cc66;">(</span><span style="color: #b1b100;">range</span> <span style="color: #cc66cc;">100000</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> <br />
<span style="color: #808080; font-style: italic;">;; Execution time mean: 2.709462 ms</span></div></td></tr></tbody></table></div>




<p>This benchmark is roughly the implementation of clojure.core/into, by the way, which uses transients for performance—so certainly use into when you can. Transients are well-covered by the documentation but I mention them here for coverage. </p>



<h2 class="has-large-font-size" id="dramatic-gains-with-type-hinting">Dramatic Gains with Type Hinting</h2>



<p>As a Clojure programmer, you will inevitably encounter <a href="https://clojure.org/reference/java_interop#typehints">type hinting</a> but what may come as a surprise is how dramatically it can improve performance.</p>



<p>Clojure is adamantly dynamic, which means Clojure code can compile without needing to know (or even having access to) the types of values that will flow at runtime. In the following function, x and y could take on the value of an array, map, String, or many other types that might show up dynamically:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span><span style="color: #b1b100;">defn</span> same<span style="color: #66cc66;">-</span><span style="color: #b1b100;">count</span>? <span style="color: #66cc66;">[</span>x y<span style="color: #66cc66;">]</span> <br />
   <span style="color: #66cc66;">(</span><span style="color: #66cc66;">=</span> <span style="color: #66cc66;">(</span><span style="color: #b1b100;">count</span> x<span style="color: #66cc66;">)</span> <span style="color: #66cc66;">(</span><span style="color: #b1b100;">count</span> y<span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span></div></td></tr></tbody></table></div>




<p>Using criterium, we can baseline this code without having compile-time type information for x and y:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark <br />
   <span style="color: #66cc66;">(</span>same<span style="color: #66cc66;">-</span><span style="color: #b1b100;">count</span>? <span style="color: #ff0000;">"f"</span> <span style="color: #ff0000;">"g"</span><span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 71.037835 ns</span></div></td></tr></tbody></table></div>




<p>Reading the source for clojure.core/count we find lots of “instance of” logic to pick and invoke the relevant behavior at runtime. This is all expensive and we can circumvent it entirely by committing to types at compile-time using type hints:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span><span style="color: #b1b100;">defn</span> same<span style="color: #66cc66;">-</span><span style="color: #b1b100;">count</span>? <span style="color: #66cc66;">[</span><span style="color: #66cc66;">^</span>String x <span style="color: #66cc66;">^</span>String y<span style="color: #66cc66;">]</span><br />
   <span style="color: #66cc66;">(</span><span style="color: #66cc66;">=</span> <span style="color: #66cc66;">(</span><span style="color: #66cc66;">.</span>length x<span style="color: #66cc66;">)</span> <span style="color: #66cc66;">(</span><span style="color: #66cc66;">.</span>length y<span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 3ns</span></div></td></tr></tbody></table></div>




<p>Note the whopping <em>20x improvement</em> in mean execution time. </p>



<p>It should also be noted that if we omitted the ^String type hints from this last implementation of same-count? we would have created the worst of both worlds and our average execution time observed by criterium would be <em>40x worse</em> than baseline (that is, <em>20x</em> worse than the initial implementation based on count.)</p>



<h4>Arrays</h4>



<p>Type hinting Java .instanceMember accesses like above is common. But type hints are essential for performant invocation of Clojure’s array functions, as well.</p>



<p>For example, this:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span>alength my<span style="color: #66cc66;">-</span>arr<span style="color: #66cc66;">)</span></div></td></tr></tbody></table></div>




<p>is <em>1000 times</em> more expensive when compiled without type information. The following clocks in at 5.491867 µs mean execution time:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span><span style="color: #b1b100;">let</span> <span style="color: #66cc66;">[</span>my<span style="color: #66cc66;">-</span>arr <span style="color: #66cc66;">(</span>identity <span style="color: #66cc66;">(</span>long<span style="color: #66cc66;">-</span>array <span style="color: #cc66cc;">5</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">]</span><br />
   <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark <span style="color: #66cc66;">(</span>alength my<span style="color: #66cc66;">-</span>arr<span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span></div></td></tr></tbody></table></div>




<p>By removing the (identity) wrapper there (so that Clojure can infer the array type), or by type hinting like so:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span>alength <span style="color: #66cc66;">^</span>longs my<span style="color: #66cc66;">-</span>arr<span style="color: #66cc66;">)</span></div></td></tr></tbody></table></div>




<p>…the invocation will reduce to 4.12 ns. Huge.</p>



<p>As a final note, clean benchmarking requires us to be aware that no subtle implicit optimizations are happening where we don’t expect them. Just above we wrapped our array construction with identity to “hide” the type of the array from Clojure’s compiler.</p>



<p>no.disassemble can come in handy here and let us see if reflection is kicking in:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span>require '<span style="color: #66cc66;">[</span>no<span style="color: #66cc66;">.</span>disassemble :<span style="color: #555;">as</span> nd<span style="color: #66cc66;">]</span><span style="color: #66cc66;">)</span><br />
<span style="color: #66cc66;">(</span>nd<span style="color: #66cc66;">/</span>disassemble <span style="color: #66cc66;">(</span><span style="color: #b1b100;">fn</span> <span style="color: #66cc66;">[</span><span style="color: #66cc66;">]</span> <span style="color: #66cc66;">(</span><span style="color: #b1b100;">let</span> <span style="color: #66cc66;">[</span>my<span style="color: #66cc66;">-</span>arr <span style="color: #66cc66;">(</span>identity <span style="color: #66cc66;">(</span>long<span style="color: #66cc66;">-</span>array <span style="color: #cc66cc;">5</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">]</span> <span style="color: #66cc66;">(</span>alength my<span style="color: #66cc66;">-</span>arr<span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
⇒<br />
<span style="color: #66cc66;">...</span><br />
<span style="color: #cc66cc;">38</span>  invokestatic clojure<span style="color: #66cc66;">.</span>lang<span style="color: #66cc66;">.</span>Reflector<span style="color: #66cc66;">.</span>invokeStaticMethod<span style="color: #66cc66;">(</span>java<span style="color: #66cc66;">.</span>lang<span style="color: #66cc66;">.</span>Class, java<span style="color: #66cc66;">.</span>lang<span style="color: #66cc66;">.</span>String, java<span style="color: #66cc66;">.</span>lang<span style="color: #66cc66;">.</span>Object<span style="color: #66cc66;">[</span><span style="color: #66cc66;">]</span><span style="color: #66cc66;">)</span> : <span style="color: #555;">java</span><span style="color: #66cc66;">.</span>lang<span style="color: #66cc66;">.</span>Object <span style="color: #66cc66;">[</span><span style="color: #cc66cc;">53</span><span style="color: #66cc66;">]</span><br />
<span style="color: #66cc66;">...</span></div></td></tr></tbody></table></div>




<p>Compare this to the disassembled bytecode when type-hinting or inference is used:</p>




<div class="codecolorer-container text default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br /></div></td><td><div class="text codecolorer">(nd/disassemble (fn [] (let [my-arr (long-array 5)] (alength my-arr))))<br />
⇒<br />
...<br />
15  invokestatic clojure.lang.RT.alength(long[]) : int [29]<br />
...</div></td></tr></tbody></table></div>




<p>We can see clearly that Clojure RT/alength is directly invoked with the proper array type; avoiding reflection for the enormous performance gain. </p>



<h2 id="destructuring">The Cost of Destructuring</h2>



<p>Clojure’s <a href="https://clojure.org/guides/destructuring">destructuring</a> is elegant and generally performant, but we can get significant performance wins by avoiding it when it matters. </p>



<p><a href="https://clojuredocs.org/clojure.core/destructure">clojure.core/destructure</a> gives us a peek at its mechanics:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span>destructure '<span style="color: #66cc66;">[</span><span style="color: #66cc66;">[</span>a b c<span style="color: #66cc66;">]</span> <span style="color: #66cc66;">[</span><span style="color: #cc66cc;">1</span> <span style="color: #cc66cc;">2</span> <span style="color: #cc66cc;">3</span><span style="color: #66cc66;">]</span><span style="color: #66cc66;">]</span><span style="color: #66cc66;">)</span><br />
⇒<br />
<span style="color: #66cc66;">[</span>vec__3071 <span style="color: #66cc66;">[</span><span style="color: #cc66cc;">1</span> <span style="color: #cc66cc;">2</span> <span style="color: #cc66cc;">3</span><span style="color: #66cc66;">]</span><br />
 a <span style="color: #66cc66;">(</span>clojure<span style="color: #66cc66;">.</span>core<span style="color: #66cc66;">/</span>nth vec__3071 <span style="color: #cc66cc;">0</span> nil<span style="color: #66cc66;">)</span><br />
 b <span style="color: #66cc66;">(</span>clojure<span style="color: #66cc66;">.</span>core<span style="color: #66cc66;">/</span>nth vec__3071 <span style="color: #cc66cc;">1</span> nil<span style="color: #66cc66;">)</span><br />
 c <span style="color: #66cc66;">(</span>clojure<span style="color: #66cc66;">.</span>core<span style="color: #66cc66;">/</span>nth vec__3071 <span style="color: #cc66cc;">2</span> nil<span style="color: #66cc66;">)</span><span style="color: #66cc66;">]</span></div></td></tr></tbody></table></div>




<p>destructuring sequential collections, as we can see, leverages <a href="https://clojuredocs.org/clojure.core/nth">nth</a> which evaluates a series of “reflective” conditionals (much like count, as we saw above) to determine the type of its arg in order to dispatch the correct behavior.</p>



<p>How does nth’s performance compare with other facilities?</p>



<h4>Arrays</h4>



<p>Compare nth on an array vs using aget directly:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span><span style="color: #b1b100;">let</span> <span style="color: #66cc66;">[</span>v <span style="color: #66cc66;">(</span>long<span style="color: #66cc66;">-</span>array <span style="color: #66cc66;">[</span><span style="color: #cc66cc;">1</span> <span style="color: #cc66cc;">2</span> <span style="color: #cc66cc;">3</span> <span style="color: #cc66cc;">4</span> <span style="color: #cc66cc;">5</span><span style="color: #66cc66;">]</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">]</span><br />
  <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
    <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
      <span style="color: #66cc66;">(</span>nth v <span style="color: #cc66cc;">4</span><span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
  <span style="color: #808080; font-style: italic;">;; Execution time mean :  114.954441 ns</span><br />
<br />
  <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
    <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
      <span style="color: #66cc66;">(</span><span style="color: #b1b100;">aget</span> v <span style="color: #cc66cc;">4</span><span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
  <span style="color: #808080; font-style: italic;">;; Execution time mean : 5.319098 ns</span></div></td></tr></tbody></table></div>




<p>The aget is a <em>30x</em> gain over the nth (and destructured) variants. (Again note that the argument to aget should be type-inferred/hinted or else we’ll find it to perform the worst of any variant.)</p>



<h4>Vectors</h4>



<p>Can destructuring Clojure’s first-class vector types be improved upon?</p>



<p>Consider:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br /></div></td><td><div class="clojure codecolorer"> <span style="color: #66cc66;">(</span><span style="color: #b1b100;">let</span> <span style="color: #66cc66;">[</span>v <span style="color: #66cc66;">[</span><span style="color: #cc66cc;">1</span> <span style="color: #cc66cc;">2</span> <span style="color: #cc66cc;">3</span> <span style="color: #cc66cc;">4</span> <span style="color: #cc66cc;">5</span><span style="color: #66cc66;">]</span><span style="color: #66cc66;">]</span><br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
        <span style="color: #66cc66;">(</span>nth v <span style="color: #cc66cc;">2</span><span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span> <br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 5.9 ns</span><br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
       <span style="color: #66cc66;">(</span><span style="color: #66cc66;">.</span>nth <span style="color: #66cc66;">^</span>IPersistentVector v <span style="color: #cc66cc;">2</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 3.8 ns</span></div></td></tr></tbody></table></div>




<p>A modest, yet noticeable, <em>1.5x</em> improvement. </p>



<p>Narrow results like this one are a perfect time to apply suspicion. Let’s attempt to cross-check our benchmark using another tool, JMH—if at least to demonstrate how to use JMH to benchmark Clojure behavior:</p>



<h2 id="benchmarking-with-jmh">Benchmarking Clojure with JMH </h2>



<p>JMH requires you to write your benchmarks as Java methods annotated with @Benchmark. To invoke Clojure we will need to rely on <a href="https://clojure.org/reference/java_interop#_calling_clojure_from_java">Java-to-Clojure interop</a>.</p>



<p>In order to analyze our .nth vs nth performance from JMH, we can compile (eval) Clojure function defs from Java:</p>




<div class="codecolorer-container java default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br /></div></td><td><div class="java codecolorer">    <span style="color: #000000; font-weight: bold;">static</span> IFn eval_ <span style="color: #339933;">=</span> Clojure.<span style="color: #006633;">var</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"clojure.core"</span>, <span style="color: #0000ff;">"eval"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span><br />
    <span style="color: #000000; font-weight: bold;">static</span> IFn dot_nth_fn <span style="color: #339933;">=</span> <br />
      <span style="color: #009900;">(</span>IFn<span style="color: #009900;">)</span> eval_.<span style="color: #006633;">invoke</span><span style="color: #009900;">(</span>Clojure.<span style="color: #006633;">read</span><span style="color: #009900;">(</span><br />
         <span style="color: #0000ff;">"(fn [^clojure.lang.Indexed x i] (.nth x i :not-found))"</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span><br />
    <span style="color: #000000; font-weight: bold;">static</span> IFn nth_fn <span style="color: #339933;">=</span> <br />
      <span style="color: #009900;">(</span>IFn<span style="color: #009900;">)</span> eval_.<span style="color: #006633;">invoke</span><span style="color: #009900;">(</span>Clojure.<span style="color: #006633;">read</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"(fn [x i] (nth x i :not-found))"</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></div></td></tr></tbody></table></div>




<p>We will also need some data to invoke our function; we’ll use a static value in this case (though for more sophisticated benchmarks we could leverage declarative <a href="https://hg.openjdk.java.net/code-tools/jmh/file/7d785826a95e/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_27_Params.java">JMH <em>params</em></a> to analyze how performance changes with input):</p>




<div class="codecolorer-container java default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br /></div></td><td><div class="java codecolorer"><span style="color: #000000; font-weight: bold;">static</span> IPersistentVector cljVector <span style="color: #339933;">=</span><br />
    <span style="color: #009900;">(</span>IPersistentVector<span style="color: #009900;">)</span> eval_.<span style="color: #006633;">invoke</span><span style="color: #009900;">(</span>Clojure.<span style="color: #006633;">read</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"(vec (range 25))"</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></div></td></tr></tbody></table></div>




<p>And now we can declare our benchmark methods:</p>




<div class="codecolorer-container java default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br /></div></td><td><div class="java codecolorer">    @Benchmark<br />
    @BenchmarkMode<span style="color: #009900;">(</span>Mode.<span style="color: #006633;">AverageTime</span><span style="color: #009900;">)</span><br />
    @OutputTimeUnit<span style="color: #009900;">(</span>TimeUnit.<span style="color: #006633;">NANOSECONDS</span><span style="color: #009900;">)</span><br />
    <span style="color: #000000; font-weight: bold;">public</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+object"><span style="color: #003399;">Object</span></a> dot_nth_vector<span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />
        <span style="color: #000000; font-weight: bold;">return</span> dot_nth_fn.<span style="color: #006633;">invoke</span><span style="color: #009900;">(</span>cljVector, <span style="color: #cc66cc;">2</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span><br />
    <span style="color: #009900;">}</span><br />
<br />
    @Benchmark<br />
    @BenchmarkMode<span style="color: #009900;">(</span>Mode.<span style="color: #006633;">AverageTime</span><span style="color: #009900;">)</span><br />
    @OutputTimeUnit<span style="color: #009900;">(</span>TimeUnit.<span style="color: #006633;">NANOSECONDS</span><span style="color: #009900;">)</span><br />
    <span style="color: #000000; font-weight: bold;">public</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+object"><span style="color: #003399;">Object</span></a> nth_vector<span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span><br />
        <span style="color: #000000; font-weight: bold;">return</span> nth_fn.<span style="color: #006633;">invoke</span><span style="color: #009900;">(</span>cljVector, <span style="color: #cc66cc;">2</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span><br />
    <span style="color: #009900;">}</span></div></td></tr></tbody></table></div>




<p>(Note: some of the boilerplate jmh setup has been omitted in these code snippets, the omitted boilerplate is well-documented <a href="https://openjdk.java.net/projects/code-tools/jmh/">here</a>.)</p>



<p>Here are our results using Java HotSpot version 1.8.0_241:</p>




<div class="codecolorer-container text default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br /></div></td><td><div class="text codecolorer">Benchmark                           Mode  Cnt  Score   Error  Units<br />
ClojureNthBenchmark.dot_nth_vector  avgt   10  4.380 ± 0.407  ns/op<br />
ClojureNthBenchmark.nth_vector      avgt   10  6.034 ± 0.156  ns/op</div></td></tr></tbody></table></div>




<p>It seems we’ve confirmed our 1.5x gain with JMH, almost to a tee. Still, skepticism should be the rule in benchmark-land. One advantage of JMH is that our benchmarks end up declaratively codified and can be readily recompiled and re-run with various configurations.</p>



<p>Not changing any code, we can recompile using Java 14, and see the above disparity presumably optimized away:</p>




<div class="codecolorer-container text default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br /></div></td><td><div class="text codecolorer">ClojureNthBenchmark.dot_nth_vector  avgt   10  3.506 ± 0.281  ns/op<br />
ClojureNthBenchmark.nth_vector      avgt   10  3.301 ± 0.376  ns/op</div></td></tr></tbody></table></div>




<p>Instead of spending the rest of this section running through permutations of JMH configuration, machine type, and JDK versions, we will leave this to the curious reader. The primary goal here is to stoke suspicion, especially when benchmarking results are narrow.</p>



<p>As a last note on being effective with JMH, we can tidy up our experience a little bit by not having to eval-compile functions defined in Java Strings from within Java code, as we did above. We can define namespaces of benchmark-able functions and load/compile them from our JMH Java class:</p>




<div class="codecolorer-container java default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br /></div></td><td><div class="java codecolorer"><span style="color: #000000; font-weight: bold;">static</span> <span style="color: #000000; font-weight: bold;">final</span> IFn require <span style="color: #339933;">=</span> Clojure.<span style="color: #006633;">var</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"clojure.core"</span>, <span style="color: #0000ff;">"require"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span><br />
<span style="color: #000000; font-weight: bold;">static</span> <span style="color: #009900;">{</span><br />
   require.<span style="color: #006633;">invoke</span><span style="color: #009900;">(</span>Clojure.<span style="color: #006633;">read</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"com.acme.my-benchmarking-suite"</span><span style="color: #009900;">)</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span><br />
<span style="color: #009900;">}</span><br />
IFn dot_nth_fn <span style="color: #339933;">=</span> <br />
    <span style="color: #009900;">(</span>IFn<span style="color: #009900;">)</span> Clojure.<span style="color: #006633;">var</span><span style="color: #009900;">(</span><span style="color: #0000ff;">"com.acme.my-benchmarking-suite"</span>, <span style="color: #0000ff;">"dot-nth"</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></div></td></tr></tbody></table></div>




<h2>Short-Circuiting</h2>



<p>Like several of Clojure’s dynamic functions, in the source code of the nth function, we see a series of logical branches to select target behavior based on the provided argument type. The first of these checks in nth is Clojure’s Indexed type; by making this the first dynamic type check in its conditional reflection logic, nth short-circuits in the most common case of a Clojure collection datatype.</p>



<p>We should apply the same trick to our own code. When short-cutting on conditional logic in our code (say, for one example, when using cond), we benefit by placing the most-commonly true conditions first. Here is a contrived example:</p>




<div class="codecolorer-container clojure default" style="overflow: auto; white-space: nowrap; width: 435px;"><table cellpadding="0" cellspacing="0"><tbody><tr><td><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br /></div></td><td><div class="clojure codecolorer"><span style="color: #66cc66;">(</span><span style="color: #b1b100;">let</span> <span style="color: #66cc66;">[</span>x <span style="color: #ff0000;">"2020"</span><span style="color: #66cc66;">]</span><br />
    <span style="color: #66cc66;">(</span>report<span style="color: #66cc66;">-</span>result<br />
      <span style="color: #66cc66;">(</span>quick<span style="color: #66cc66;">-</span>benchmark<br />
        <span style="color: #66cc66;">(</span><span style="color: #b1b100;">cond</span><br />
          <span style="color: #66cc66;">(</span>instance? Long x<span style="color: #66cc66;">)</span> :<span style="color: #555;">long</span><br />
          <span style="color: #66cc66;">(</span>instance? Integer x<span style="color: #66cc66;">)</span> :<span style="color: #555;">int</span><br />
          <span style="color: #66cc66;">(</span>instance? Short x<span style="color: #66cc66;">)</span> :<span style="color: #555;">short</span><br />
          <span style="color: #66cc66;">(</span>instance? Date x<span style="color: #66cc66;">)</span> :<span style="color: #555;">date</span><br />
          <span style="color: #66cc66;">(</span>instance? String x<span style="color: #66cc66;">)</span> :<span style="color: #555;">string</span><span style="color: #66cc66;">)</span> <span style="color: #66cc66;">{</span><span style="color: #66cc66;">}</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><span style="color: #66cc66;">)</span><br />
<span style="color: #808080; font-style: italic;">;; Execution time mean : 6.4 ns</span></div></td></tr></tbody></table></div>




<p>If String is the most commonly flowing type, we pay a big price⁠—by moving the String instance check to the top we reduce to 2.4 ns, a 2.5x improvement.</p>



<h2 class="has-large-font-size" id="final-notes">Final Notes</h2>



<p>Keep in mind the famous Kent Beck-attributed aphorism “Make it work, then it make it fast,” or the Donald Knuth-attributed “Premature optimization is the root of all evil.” Generally Clojure makes for high developer productivity <em>and</em> solid performance out of the box; but for areas where optimal performance is a must, getting there from within Clojure is well within reach.</p>



<hr class="wp-block-separator" />



<h4 id="footnotes">Footnotes</h4>



<p>¹ In the end, and rarely necessary, one can always hand-roll Java code and invoke it from Clojure. There is always a way to full optimization if tuning the Clojure itself is not obvious; Clojure’s Java interop is solid and Lein and Maven are both capable of simple polyglot build configurations.</p>



<p>² Some of the fodder for this post came from performance tuning my open-source project <a href="https://github.com/atdixon/thurber">thurber</a>; one overall outcome of that effort was a 2x reduction in auto-scaling costs for the <a href="https://beam.apache.org/get-started/mobile-gaming-example/">game engine Beam pipelines</a> (used as integration tests for that project) when run on the GCP Cloud Dataflow platform. But careful focus on optimizing the specific hot code paths was key to that top-level outcome.</p>



<div class="wp-block-group"><div class="wp-block-group__inner-container">
<div class="wp-block-group"><div class="wp-block-group__inner-container"></div></div>
</div></div>              </p>
              <p class="meta"><a href="https://tech.redplanetlabs.com/2020/09/02/clojure-faster/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=clojure-faster">Permalink</a></p>
            </article>
          </section>
          <section class="entry">
            <aside class="aside">
              <!-- <img src="static/i/favicon.gif" alt="Name of the Site" /> -->
              <h2><a href="https://jobs.braveclojure.com" title="Brave Clojure Jobs">Brave Clojure Jobs</a></h2>
              <p>
September 02, 2020 01:49 PM                <br />
                <a href="https://jobs.braveclojure.com">Feed URL</a>
              </p>
            </aside>
            <article class="article">
              <h2><a href="https://jobs.braveclojure.com/jobs/17592186047251/fullstack-engineer-multis">Fullstack Engineer</a></h2>
              <p>
<div><h1>Fullstack Engineer</h1><div class="company-name">Multis | Remote</div><div>remote</div><div><em>Crypto-first business banking</em></div><div>$50000 - $70000</div><div><a href="https://multis.co/">https://multis.co/</a></div><br /><div><h2>About</h2><p><a href="http://multis.co">Multis</a> builds banking accounts for companies holding both crypto and traditional currencies to run business. We're crafting a unique hybrid bank that companies can use to pay abroad instantly with no fees, and access high-interest financial services based on both crypto and traditional currencies.</p><p>We're backed by world-class investors including Y Combinator (Stripe, Airbnb, Dropbox...), eFounders (Front, Spendesk, Aircall), and Coinbase Ventures.</p><h3>What's so special about engineering at Multis?</h3><p>Most people would call Multis "just an interface" but you'd probably call it a server-less, backend-less, password-less, real-time full-stack ClojureScript static decentralized web application. It's not about ticking boxes though --- we chose these technologies and architecture to cater to our very specific domain: the blockchain. As for our engineering principles, we only have one: simplicity.</p><h3>Mission</h3><p>We're looking for a full-stack engineer to work hand-in-hand with the CTO and the engineering and product teams to build and maintain our next-gen business banking stack and features --- leveraging blockchains and their protocols as well as server-less infrastructure and functional programming. As a core member, we also expect you to have a major impact on shaping our culture and brand, and help us attract top talents!</p><h3>Responsibilities</h3>
<ul>
  <li>Lead features development --- from specs to tested production code --- along with the Product team</li>
  <li>Contribute to Multis technical thought leadership through articles on our engineering blog</li>
  <li>Maintain product and handle company-wide support with the core team</li>
  <li>Help build a world-class engineering team</li>
  <li>For our lead: build a team and ensure smooth and structured execution to deliver on company's objectives and roadmap</li>
</ul><h2>Preferred experience</h2><h3>Requirements</h3>
<ul>
  <li><strong>2+ years</strong> of experience as a full-stack engineer</li>
  <li>Acquainted with <strong>ClojureScript</strong> (or strong willingness to learn --- our coding test is in ClojureScript)</li>
  <li>Experience with complex single-page applications</li>
  <li>Ability to lead projects and execute with pragmatism and velocity</li>
  <li>Cultivate humility and curiosity about all things programming and tech</li>
  <li>Know how to relax 🏝️</li>
</ul><h3>Nice to have</h3>
<ul>
  <li>Startup experience --- ideally B2B or fintech</li>
  <li>Passionate about all things blockchain and crypto</li>
  <li>Experience leading a team (or strong appetite to do so)</li>
  <li>Previous remote experience</li>
  <li>Hawaïan outfit and prior one-pot experience 🍲</li>
</ul><h2>Recruitment process</h2>
<ul>
  <li>Phone call with CEO</li>
  <li>Technical case</li>
  <li>Feedback and call with Lead Dev</li>
  <li>In-depth interview with CEO and CTO</li>
  <li>Reference calls</li>
</ul></div></div>              </p>
              <p class="meta"><a href="https://jobs.braveclojure.com/jobs/17592186047251/fullstack-engineer-multis">Permalink</a></p>
            </article>
          </section>
          <section class="entry">
            <aside class="aside">
              <!-- <img src="static/i/favicon.gif" alt="Name of the Site" /> -->
              <h2><a href="https://otavio.dev" title="O. Valadares' Blog">Otavio Valadares</a></h2>
              <p>
September 01, 2020 10:56 PM                <br />
                <a href="https://otavio.dev">Feed URL</a>
              </p>
            </aside>
            <article class="article">
              <h2><a href="https://otavio.dev/2020/09/01/newsletter-09-2020/">Newsletter 6 – 09/2020</a></h2>
              <p>
<h2>Featured</h2>



<p><a href="https://aws.amazon.com/braket/?nc1=h_ls" rel="noreferrer noopener" target="_blank">Amazon Braket, Explore and experiment with quantum computing</a> – Quantum computing is coming and Amazon releases it quantum computing service, now is just try yourself.</p>



<p><a href="https://robertovitillo.com/what-every-developer-should-know-about-database-consistency/" rel="noreferrer noopener" target="_blank">What every developer should know about database consistency</a> – A simple and illustrated tutorial about database consistency, if you want to learn more abut databases and consistency models, you can start there.</p>



<p><a href="https://blog.logrocket.com/using-the-rust-compiler-as-your-integration-testing-framework/" rel="noreferrer noopener" target="_blank">How to use the Rust compiler as your integration testing framework</a> – This post brings a nice point of view, with rust’s strong type system and some tricks you can avoid integration tests and let rust compiler is your integration framework, just write unit test and ship! This point of view can create a nice discussion, what’s your opinion?</p>



<p><a href="https://stackoverflow.blog/2020/08/03/getting-started-with-contributing-to-open-source/" rel="noreferrer noopener" target="_blank">Getting started with contributing to open source</a> – A great post with nice tips to start contributing to open source project, if you want to get started it can help you a lot.</p>



<p><a href="https://bartoszmilewski.com/2020/08/05/categories-for-the-working-c-programmer/" rel="noreferrer noopener" target="_blank">Categories for the Working C++ Programmer</a> – A nice post explaining the basics of category theory to programmers. It has examples in c++ too, and for surer it’s worth reading it.</p>



<p><a href="https://stu2b50.dev/posts/things-you-wante9665" rel="noreferrer noopener" target="_blank">Things You Want to Do in Git and How to Do Them</a> – It’s always good to review the basics, and make it fresh again in your head, this post can looks too basic, but it reviews simple concepts about git, about how to do a <code>revert</code> or a <code>rebase</code> correctly.</p>



<p><a href="https://blog.peterzhu.ca/notes-on-ruby-gc/" rel="noreferrer noopener" target="_blank">Peter’s Adventures in Ruby: Garbage Collection in Ruby</a> – Nice post talking about how Ruby garbage collector and memory allocation works. <a href="https://blog.peterzhu.ca/adventures-in-ruby/" rel="noreferrer noopener" target="_blank">Peter is writing a nice series about ruby internals too, check it out.</a></p>



<h3>Misc</h3>



<p><a href="https://opensource.googleblog.com/2020/08/new-case-studies-about-googles-use-of-go.html" rel="noreferrer noopener" target="_blank">New Case Studies About Google’s Use of Go</a> – A short and simple post by Rob Pike talking about Go use cases inside Google.</p>



<p><a href="https://blog.carlmjohnson.net/post/2020/avoid-dependencies/" rel="noreferrer noopener" target="_blank">Rachel by the Bay · Tripping over the potholes in too many libraries</a> – When should use a library and when should just code it? This is a interesting question, some people defend the idea that always install library and some people are more purist and defend the idea of always code simple logic. This is a short opinionated post, but bring’s the question to us.</p>



<p><a href="https://github.com/ko1/ruby/blob/ractor_parallel/doc/ractor.md" rel="noreferrer noopener" target="_blank">Ractor – Ruby’s Actor-like concurrent abstraction</a> – Ruby’s Ractor is close to be released (With Ruby 3 in December), and a nice preview (and tutorial) is given in this document.</p>



<p><a href="https://www.theverge.com/2020/8/6/21355674/human-genes-rename-microsoft-excel-misreading-dates" rel="noreferrer noopener" target="_blank">Scientists rename human genes to stop Microsoft Excel from misreading them as dates</a> – I don’t have much to say about that news, it’s surprising!</p>



<p><a href="http://codefol.io/posts/when-should-you-not-use-rails/" rel="noreferrer noopener" target="_blank">When Should You NOT Use Rails?</a> – When use x or y framework is a common discussion among teams and developers. This opinionated post brings a nice point of view about when you should or not use Rails framework.</p>



<p><a href="https://pdabrowski.com/articles/how-sidekiq-really-works" rel="noreferrer noopener" target="_blank">How Sidekiq really works</a> – Sidekiq is a popular library to do background processing in Ruby. Is very common to find an application using the traditional sidekiq + rails. This post explains in a easy way how it works under the hood. (I love posts explaining things under the hood).</p>



<p><a href="http://stratus3d.com/blog/2020/08/11/effective-debugging-of-memory-leaks-in-ruby/" rel="noreferrer noopener" target="_blank">Effective Debugging of Memory Leaks in Ruby</a> – Sometimes find a memory leaks is not a rocket science, sometimes. This post is short and it tells you how to find memory leaks in ruby applications with simplicity. </p>



<p><a href="https://github.blog/2020-08-25-upgrading-github-to-ruby-2-7/" rel="noreferrer noopener" target="_blank">Upgrading GitHub to Ruby 2.7</a> – Keep your applications up to date is important in every language, this post talks a little about how GitHub they did update their Ruby version.</p>



<p><a href="https://dmv.myhatchpad.com/insight/mocking-techniques-for-go/" rel="noreferrer noopener" target="_blank">Mocking Techniques for Go</a> – Every time that I needed to made a mock in Go I had difficulties, this post is very clearly about how to do great mocks, with different techniques. Its a kind of post that I save to consult later.</p>



<p><a href="https://justinmeiners.github.io/lc3-vm/">Write your Own Virtual Machine</a> – Tutorial to write your own virtual machine to run assembly language in only 250 lines of C code? That’s great and interesting! </p>



<p><a href="https://blog.kalbhor.xyz/post/implementing-traceroute-in-go/" rel="noreferrer noopener" target="_blank">Implementing traceroute in Go</a> – <code>traceroute</code> is a very common tool when debuggind network things, this post explain how <code>traceroute</code> works under the hood and help you make your own implementation using Go.</p>



<p><a href="https://dockyard.com/blog/2020/07/27/5-elixir-tips-learned-in-code-review" rel="noreferrer noopener" target="_blank">5 Elixir Tips Learned in Code Review</a> – Five simple tips to Elixir programming, this post is not a rocket science, but its useful.</p>



<div class="wp-block-group"><div class="wp-block-group__inner-container">
<p>Check my last posts:</p>


<ul class="wp-block-latest-posts wp-block-latest-posts__list"><li><a href="https://otavio.dev/2020/09/01/newsletter-09-2020/">Newsletter 6 – 09/2020</a><div class="wp-block-latest-posts__post-excerpt">A curated lists of the best things that I’ve read last month. Issue September 2020.</div></li>
<li><a href="https://otavio.dev/2020/08/31/clojure-journey-iii-leiningen-and-the-famous-repl/">Clojure Journey IV – Leiningen and the famous REPL</a><div class="wp-block-latest-posts__post-excerpt">My fourth steps on my journey through learn Clojure. Now we need to talk about leiningen, and the most important thing to every Clojure wizard, the REPL!</div></li>
</ul></div></div>



<div class="wp-block-group"><div class="wp-block-group__inner-container">
<p>Follow my blog to get notified every new post:</p>



<div class="wp-block-jetpack-subscriptions"><div class="jetpack_subscription_widget">			<form accept-charset="utf-8" action="https://subscribe.wordpress.com" id="" method="post">
														<p id="subscribe-email">
						<input id="" name="email" style="width: 95%; padding: 1px 10px;" type="text" value="" />					</p>
				
				<p id="subscribe-submit">
                    <input name="action" type="hidden" value="subscribe" />
                    <input name="blog_id" type="hidden" value="173288916" />
                    <input name="source" type="hidden" value="https://otavio.dev/feed/" />
                    <input name="sub-type" type="hidden" value="widget" />
                    <input name="redirect_fragment" type="hidden" value="517" />
					<input id="_wpnonce" name="_wpnonce" type="hidden" value="e27665809f" />                    <button class="wp-block-button__link has-text-color has-background has-foreground-dark-background-button-color" style="background: #020202; margin-left: 0px;" type="submit">
	                    Assinar                    </button>
                </p>
            </form>
			
</div></div>
</div></div>              </p>
              <p class="meta"><a href="https://otavio.dev/2020/09/01/newsletter-09-2020/">Permalink</a></p>
            </article>
          </section>
          <section class="entry">
            <aside class="aside">
              <!-- <img src="static/i/favicon.gif" alt="Name of the Site" /> -->
              <h2><a href="https://medium.com/@kari.marttila?source=rss-817417aca5da------2" title="Stories by Kari Marttila on Medium">Kari Marttila</a></h2>
              <p>
September 01, 2020 05:23 PM                <br />
                <a href="https://medium.com/@kari.marttila?source=rss-817417aca5da------2">Feed URL</a>
              </p>
            </aside>
            <article class="article">
              <h2><a href="https://medium.com/@kari.marttila/using-clojure-in-command-line-with-babashka-f0ad80f74760?source=rss-817417aca5da------2">Using Clojure in Command Line with Babashka</a></h2>
              <p>
<figure><img alt="" src="https://cdn-images-1.medium.com/max/781/1*LasW5tL3pfh_e5njBoimqA.png" /><em>Ordinary Clojure code — can be run in REPL or in command line with Babashka (the whole file can be found </em><a href="https://github.com/karimarttila/clojure/blob/master/webstore-demo/integrant-simple-server/postgres/bb_postgres.clj"><em>here</em></a><em> )</em></figure><h3>Introduction</h3><p>I never bothered to learn <a href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)">Bash</a> so that I could be really fluent with it. If I needed anything beyond basic Bash stuff I immediately used <a href="https://www.python.org/">Python</a> in command-line scripting.</p><p>I’m currently implementing my Clojure simple server again, this time using the <a href="https://github.com/weavejester/integrant">Integrant</a> library. In this new version, I implemented three data stores: CSV, AWS DynamoDB, and Postgres. I had already implemented importing development data into DynamoDB (using Python), this time I used <a href="https://github.com/borkdude/Babashka">Babashka</a> to import development data into Postgres — mainly just to have an excuse to try if I could replace Python with Clojure when scripting something with Bash.</p><p>The scripts can be found in my <a href="https://github.com/karimarttila/clojure">Clojure git</a> repo in directory <a href="https://github.com/karimarttila/clojure/tree/master/webstore-demo/integrant-simple-server/postgres">postgres</a>.</p><h3>Developing with Babashka</h3><p>The really neat thing with Babashka is that you can develop your Babashka scripts as part of your Clojure project, or independently but using your favorite Clojure IDE. The picture above shows Clojure code in my favorite Clojure IDE, <a href="https://cursive-ide.com/">Cursive</a>. I have the Clojure code that imports data into the Postgres database in directory <a href="https://github.com/karimarttila/clojure/tree/master/webstore-demo/integrant-simple-server/postgres">postgres</a>, so I have the following extra path in my <a href="https://github.com/karimarttila/clojure/blob/master/webstore-demo/integrant-simple-server/deps.edn">deps.edn</a>:</p><pre>:postgres {:extra-paths ["postgres"]}</pre><p>Then the nice thing is that I can develop the Clojure code as part of project’s other Clojure code. Let’s first create a short bash script that tells Babashka to run your Clojure code with a flag so that we know in the Clojure code when we are running the code using Babashka or using Clojure IDE REPL (file <a href="https://github.com/karimarttila/clojure/blob/master/webstore-demo/integrant-simple-server/postgres/run-bb-load-data.sh">run-bb-load-data.sh</a>):</p><pre><em>#/bin/bash</em></pre><pre>export POSTGRES_PASSWORD<strong>=</strong>simpleserver<br />export RUNNING_BB<strong>=</strong>TRUE<br />bb bb_postgres.clj</pre><p>The flag is the RUNNING_BB export above.</p><p>Then in the Clojure code we have a top level form (run-me) in the namespace (file <a href="https://github.com/karimarttila/clojure/blob/master/webstore-demo/integrant-simple-server/postgres/bb_postgres.clj">bb_postgres.clj</a>):</p><pre>(<strong>defn</strong> run-me []<br />  "Loads data only if running from Babashka script which sets the environment variable.<br />  We don't want the repl to load the data when reloading the namespace.<br />  In repl experimentation use the rich comment below."<br />  (<strong>let</strong> [running-bb? (<strong>System/getenv</strong> "RUNNING_BB")]<br />    (<strong>if</strong> (= running-bb? "TRUE")<br />      (<strong>import-data</strong>))))</pre><pre>(<strong>run-me</strong>)</pre><p>I.e. when reloading the namespace REPL runs the code but if the flag is not set it doesn’t actually do anything — it imports the code only if we are running the code using Babashka. The reason for this is that when I reload the namespace as part of my Clojure workflow I don’t want the data import to happen. For development purposes to test importing data, or any other function, I have a rich comment at the end of the file:</p><pre>(comment<br />  (<strong>def</strong> data-dir "dev-resources/data")<br />  (<strong>get-raw-products</strong> data-dir 2)<br />  (<strong>get-product-groups</strong> data-dir)<br />  (<strong>do</strong><br />    (<strong>delete-products!</strong>)<br />    (<strong>delete-product-groups!</strong>))<br />  (vals (<strong>get-users</strong> data-dir))<br />  (<strong>load-users</strong> (vals (<strong>get-users</strong> data-dir)))<br />  (<strong>import-data</strong>)<br />  (<strong>db-get-all-product-groups</strong>)<br />  (<strong>db-get-all-products</strong>)<br />  )</pre><p>The comment block is here so that REPL does not run this code when reloading, of course. The function calls you see inside the comment block are just experiments added in no particular order. I can send any of these forms individually to be evaluated in the REPL - a typical Clojure trick when developing with REPL.</p><h3>Babashka Use Cases</h3><p>I really like the idea that I can now use Clojure in shell scripting. Of course I could use Clojure in shell scripting also without Babashka but JVM boot takes quite a long time which makes testing of the script in command line a bit painful. Not so with Babashka — Babashka boots lightning fast:</p><pre>λ&gt; time bb '(println "Hello world!")'<br />Hello world!</pre><pre>real	0m0.006s<br />user	0m0.003s<br />sys	0m0.003s</pre><p>The use cases using Babashka in my personal scripting probably is a bit like I used Babashka to import data into the Postgres database in this exercise:</p><pre>(<strong>defn</strong> run-sql [command]<br />  (<strong>sh/sh</strong> "psql" "--host" "localhost" "--port" "5532" "--username=simpleserver" "--dbname=simpleserver" "-c" command))</pre><pre>(<strong>defn</strong> insert-product-group! [product-group]<br />  (println "Inserting product-group: " product-group)<br />  (<strong>let</strong> [[id name] product-group<br />        command (str "INSERT INTO product_group VALUES ('" id "', '" name "');")]<br />    (<strong>run-sql</strong> command)))</pre><pre>(<strong>defn</strong> load-product-groups [product-groups]<br />  (doseq [pg product-groups]<br />    (<strong>insert-product-group!</strong> pg)))</pre><pre>(<strong>defn</strong> get-product-groups [data-dir]<br />  (<strong>let</strong> [raw (with-open [reader (<strong>io/reader</strong> (str data-dir "/product-groups.csv"))]<br />              (doall<br />                (<strong>csv/read-csv</strong> reader)))<br />        product-groups (into {}<br />                             (map<br />                               (<strong>fn</strong> [[item]]<br />                                 (<strong>str/split</strong> item <strong>#</strong>"\t"))<br />                               raw))]<br />    product-groups))</pre><pre>(<strong>defn</strong> import-data []<br />  (<strong>let</strong> [data-dir "dev-resources/data"<br />        product-groups (<strong>get-product-groups</strong> data-dir)]<br /><em>;...</em><br />    (<strong>load-product-groups</strong> product-groups)<br /><em>;...</em></pre><p>I.e. parsing CSV, transforming data, and then call some program with the transformed data, possibly read what was returned and do other stuff. You could possibly do all this using plain old Bash but I never bothered to learn Bash in that level that I can do more than test some flags and call other programs using Bash.</p><h3>How Do I Use the Babashka Script in This Exercise?</h3><p>I used Babashka to load development data into the Postgres data store. During development I built a custom Postgres image and provided a <a href="https://github.com/casey/just">Just</a> recipe to start the data store (file <a href="https://github.com/karimarttila/clojure/blob/master/webstore-demo/integrant-simple-server/Justfile">Justfile</a>):</p><pre><em># Start local postgres</em><br />@postgres:<br />    cd postgres <strong>&amp;&amp;</strong> ./run-docker-compose.sh</pre><p>The <a href="https://github.com/karimarttila/clojure/blob/master/webstore-demo/integrant-simple-server/postgres/run-docker-compose.sh">run-docker-compose.sh</a> starts the Postgres docker container, creates the schema and finally calls <a href="https://github.com/karimarttila/clojure/blob/master/webstore-demo/integrant-simple-server/postgres/run-bb-load-data.sh">./run-bb-load-data.sh</a> which loads the data into the development Postgres data store:</p><pre><em>#!/usr/bin/env bash</em></pre><pre>echo "NOTE: Remember to destroy the container if running again!"<br />echo "Starting docker compose..."<br />docker-compose -p ss-postgres -f docker-compose-setup-local-postgres.yml up -d<br />sleep 5<br />echo "Creating Simple Server schemas..."<br />./create-schema.sh<br />sleep 1<br />echo "Loading data..."<br />./run-bb-load-data.sh<br />sleep 1<br />docker logs -f ss-postgres_postgres_1</pre><h3>Clojure (Babashka) vs Python in Shell Scripting</h3><p>Let’s finally compare Python and Clojure (Babashka) when doing some Linux shell scripting.</p><p><strong>Easiness</strong>. Both languages are pretty easy and fast to work if you have used them. Developing Python scripts is pretty fast — you just run the script in command line. Working with Clojure has one additional plus: you can use the Clojure REPL.</p><p><strong>Library support</strong>: Python wins. When you are scripting in Python and you realize that it would be nice to use some AWS library — just use it (e.g. <a href="https://github.com/karimarttila/clojure/blob/master/webstore-demo/integrant-simple-server/dynamodb/pysrc/table_importer.py">table_importer.py</a> — the AWS <a href="https://boto3.amazonaws.com/v1/documentation/api/latest/index.html">boto3</a> library). The library support for Babashka is not as extensive, of course — but Babashka supports quite many namespaces outside clojure.core and also some additional libraries: <a href="https://github.com/borkdude/babashka#built-in-namespaces">Babashka built-in namespaces</a> - keep eye on that page, maybe Babashka library support is growing in the future!</p><p>So, the library support might not be as good as with Python. But I really do love Clojure and if I’m implementing apps using Clojure it is really nice to do some ad hoc scripting using Babashka.</p><h3>Conclusions</h3><p>It’s nice to have another scripting tool in my toolbox: <a href="https://github.com/borkdude/babashka">Babashka</a>. Time will tell if I start using Clojure instead of Python as my preferred scripting language, thanks to Babashka. At least in this exercise Babashka did really well.</p><p><em>The writer is working at Metosin using Clojure in cloud projects. If you are interested to start a Clojure project in Finland or you are interested to get Clojure training in Finland you can contact me by sending email to my Metosin email address or contact me via LinkedIn.</em></p><p>Kari Marttila</p><ul><li>Kari Marttila’s Home Page in LinkedIn: <a href="https://www.linkedin.com/in/karimarttila/">https://www.linkedin.com/in/karimarttila/</a></li></ul><p><em>The article was first published in </em><a href="https://www.karimarttila.fi/"><em>https://www.karimarttila.fi/</em></a></p><img height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f0ad80f74760" width="1" />              </p>
              <p class="meta"><a href="https://medium.com/@kari.marttila/using-clojure-in-command-line-with-babashka-f0ad80f74760?source=rss-817417aca5da------2">Permalink</a></p>
            </article>
          </section>
          <section class="entry">
            <aside class="aside">
              <!-- <img src="static/i/favicon.gif" alt="Name of the Site" /> -->
              <h2><a href="https://medium.com/appsflyer?source=rss----2736d8c2498d---4" title="AppsFlyer - Medium">AppsFlyer</a></h2>
              <p>
September 01, 2020 05:37 AM                <br />
                <a href="https://medium.com/appsflyer?source=rss----2736d8c2498d---4">Feed URL</a>
              </p>
            </aside>
            <article class="article">
              <h2><a href="https://medium.com/appsflyer/railway-oriented-programming-clojure-and-exception-handling-why-and-how-89d75cc94c58?source=rss----2736d8c2498d---4">Railway oriented programming, clojure and exception handling: why and how?</a></h2>
              <p>
<div class="medium-feed-item"><p class="medium-feed-image"><a href="https://medium.com/appsflyer/railway-oriented-programming-clojure-and-exception-handling-why-and-how-89d75cc94c58?source=rss----2736d8c2498d---4"><img src="https://cdn-images-1.medium.com/max/2600/1*YQ5Ppic6AEUhvGi_Wd_KWQ.png" width="10418" /></a></p><p class="medium-feed-snippet">Learn how to handle exceptions and control the flow in the most functional way with Clojure, rails and AppsFlyer!</p><p class="medium-feed-link"><a href="https://medium.com/appsflyer/railway-oriented-programming-clojure-and-exception-handling-why-and-how-89d75cc94c58?source=rss----2736d8c2498d---4">Continue reading on AppsFlyer »</a></p></div>              </p>
              <p class="meta"><a href="https://medium.com/appsflyer/railway-oriented-programming-clojure-and-exception-handling-why-and-how-89d75cc94c58?source=rss----2736d8c2498d---4">Permalink</a></p>
            </article>
          </section>
          <section class="entry">
            <aside class="aside">
              <!-- <img src="static/i/favicon.gif" alt="Name of the Site" /> -->
              <h2><a href="https://otavio.dev" title="O. Valadares' Blog">Otavio Valadares</a></h2>
              <p>
August 31, 2020 11:04 PM                <br />
                <a href="https://otavio.dev">Feed URL</a>
              </p>
            </aside>
            <article class="article">
              <h2><a href="https://otavio.dev/2020/08/31/clojure-journey-iii-leiningen-and-the-famous-repl/">Clojure Journey IV – Leiningen and the famous REPL</a></h2>
              <p>
<p><a href="https://otavio.dev/category/functional/clojure/">In the previous chapters we set up our development environment</a>, now it’s time to to get our hands dirty. </p>



<p>First of all we need to have Java installed, Clojure is a hosted language, and it compiles to JVM  bytecode, so, we need Java installed.</p>



<p>After it <a href="https://github.com/technomancy/leiningen">install Leiningen fallowing the install instructions</a>, it is the most popular build/dependency management tool for Clojure, and we’ll use it a lot while learning Clojure. </p>



<p>After install, just call <code>lein</code> at your terminal, and it should prompt help instructions.</p>



<h2>REPL</h2>



<p>Its is one of the most important thing in your Clojure development flow (and should be in every language, if its available), it will give you a interactive programming experience. </p>



<p>REPL stands for “Read–eval–print loop” its basically a interactive interpreter for one programming language, it was originally invented by LISP (the Clojure grandfather), and sice it a lot of programming languages has adopted it own (Clojure, Ruby, Python, JavaScript and much more).</p>



<p>This can sound like a bullshit for everyone that’s already used to programming in one language that already have one, but from the folks coming from environments that doesn’t have it, will be beginning of a new era, an era with REPL! </p>



<p>Just open your terminal and type <code>lein repl</code> and it will start a new REPL for you:</p>



<p class="has-small-font-size"><em>If you don’t want to use <code>lein</code> to start our REPL, just type <code>clj</code> and it will start too.</em></p>


<pre class="brush: bash; gutter: false; title: ; notranslate">$ &gt; lein repl
nREPL server started on port 46213 on host 127.0.0.1 - 
nrepl://127.0.0.1:46213
REPL-y 0.4.4, nREPL 0.7.0
Clojure 1.10.1
OpenJDK 64-Bit Server VM 1.8.0_252-b09
    Docs: (doc function-name-here)
          (find-doc "part-of-name-here")
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e

user=&gt; 
</pre>


<p>Now every expression that you type will be evaluated:</p>


<pre class="brush: clojure; gutter: false; title: ; notranslate">user=&gt; (+ 41 1)
42
</pre>


<p>In one future post, we’ll learn how to integrate it with our text editor and have a full interactive programming experience! </p>



<p>REPL is not only evaluate expressions, in the future we’ll learn how to use it for debuggind, run test and much more, but for now, we’ll use it only for evaluating expressions while learning the beginners things!</p>



<h2>Leiningen</h2>



<p><a href="https://otavio.dev/2020/08/31/clojure-journey-iii-leiningen-and-the-famous-repl/?preview=true&amp;_thumbnail_id=753">Visualizar(abrir em uma nova aba)</a></p>



<p>One of the most fantastic thing about leiningen is to create a new project, is just one command you have a full project skeleton:</p>


<pre class="brush: bash; gutter: false; title: ; notranslate">$&gt; lein new app hello-clojure
Generating a project called hello-clojure based on 
the 'app' template.
</pre>


<p>Now just open it inside your editor and start exploring our project! One of the things that you need to note is the file <code>project.clj</code>, it is used by leiningen and it have important information to it build your project, like dependencies and the main function (the first function to run in our project). I think that if you already program other languages you know what this file is. For now you just need to think a lot about this file, in the future we’ll go deep.</p>



<p>Just to test our project, open the file <code>src/hello_clojure/core.clj</code> and change the <code>println</code> expression to any message:</p>


<pre class="brush: clojure; gutter: false; title: ; notranslate">(defn -main
  "Hello Clojure, I love U!"
  [&amp; args]
  (println "Hello, World! I'm lovin Clojure"))
</pre>


<p>Now just go to your terminal and run your project with <code>lein run</code>:</p>


<pre class="brush: bash; gutter: false; title: ; notranslate">$ &gt; lein run
Hello, World! I'm lovin Clojure
</pre>


<p>That’s wonderful, right? With lein we can run our tests too, just type <code>lein test</code>, and you will run all tests of your project (leiningen app template comes with one test that’s easy to fix, it’s your mission try it).</p>



<p>We created our first project <code>hello-clojure</code>, tested with <code>lein run</code>, it’s time to build it! To build is very simple, just type <code>lein uberjar</code> and wait it finish.</p>



<p>After it, you should have a <code>jar</code> file inside <code>target/uberjar</code> directory in your project, just navigate to ir, and run it as a jar:</p>


<pre class="brush: clojure; gutter: false; title: ; notranslate">$ &gt; java -jar hello-clojure-0.1.0-SNAPSHOT-standalone.jar 
Hello, World! I'm lovin Clojure
</pre>


<h4>Leiningen templates</h4>



<p>Leiningen has a lot of templates to use with the command <code>leiningen new</code>, it has a template for almost everything, <a href="https://clj-templates.com/">and you can check for templates here</a>. If you already waste some time in the internet looking for examples of skeletons of projects in X languages, this is for you! if you need a skeleton for CLI, just look at it, if you need something to webapps, just look at it! Its useful a lot.</p>



<p>We used the <code>app</code> template because its the most basic template, and it represents a common structure for Clojure apps, it can be very useful on the next steps of our journey. </p>



<h2>Conclusions</h2>



<p>We learned a lot about Leiningen in this post, now we know how to create projects, run, test and build it… But we learned something more important, something that we’ll use a lot through our journey, we learned how to use REPL! </p>



<p>REPL is one of the most powerful tool that we’ll use, and it will help a lot while studying to quick evaluate expressions, get used to it, and you’ll be a great Clojure wizard.</p>



<h2>Final thought</h2>



<p>If you have any questions that I can help you with, please ask! Send an email (otaviopvaladares at gmail.com), pm me on my <a href="https://twitter.com/valadaresotavio">Twitter</a> or comment on this post!</p>



<div class="wp-block-group"><div class="wp-block-group__inner-container">
<p>Follow my blog to get notified every new post:</p>



<div class="wp-block-jetpack-subscriptions"><div class="jetpack_subscription_widget">			<form accept-charset="utf-8" action="https://subscribe.wordpress.com" id="" method="post">
														<p id="subscribe-email">
						<input id="" name="email" style="width: 95%; padding: 1px 10px;" type="text" value="" />					</p>
				
				<p id="subscribe-submit">
                    <input name="action" type="hidden" value="subscribe" />
                    <input name="blog_id" type="hidden" value="173288916" />
                    <input name="source" type="hidden" value="https://otavio.dev/feed/" />
                    <input name="sub-type" type="hidden" value="widget" />
                    <input name="redirect_fragment" type="hidden" value="477" />
					<input id="_wpnonce" name="_wpnonce" type="hidden" value="e27665809f" />                    <button class="wp-block-button__link has-text-color has-background has-foreground-dark-background-button-color" style="background: #020202; margin-left: 0px;" type="submit">
	                    Assinar                    </button>
                </p>
            </form>
			
</div></div>
</div></div>



<div class="wp-block-group"><div class="wp-block-group__inner-container">
<p>Check my last posts:</p>


<ul class="wp-block-latest-posts wp-block-latest-posts__list"><li><a href="https://otavio.dev/2020/09/01/newsletter-09-2020/">Newsletter 6 – 09/2020</a><div class="wp-block-latest-posts__post-excerpt">A curated lists of the best things that I’ve read last month. Issue September 2020.</div></li>
<li><a href="https://otavio.dev/2020/08/31/clojure-journey-iii-leiningen-and-the-famous-repl/">Clojure Journey IV – Leiningen and the famous REPL</a><div class="wp-block-latest-posts__post-excerpt">My fourth steps on my journey through learn Clojure. Now we need to talk about leiningen, and the most important thing to every Clojure wizard, the REPL!</div></li>
</ul></div></div>              </p>
              <p class="meta"><a href="https://otavio.dev/2020/08/31/clojure-journey-iii-leiningen-and-the-famous-repl/">Permalink</a></p>
            </article>
          </section>
          <section class="entry">
            <aside class="aside">
              <!-- <img src="static/i/favicon.gif" alt="Name of the Site" /> -->
              <h2><a href="https://grishaev.me/" title="Ivan Grishaev's blog">Ivan Grishaev</a></h2>
              <p>
August 30, 2020 12:00 AM                <br />
                <a href="https://grishaev.me/">Feed URL</a>
              </p>
            </aside>
            <article class="article">
              <h2><a href="https://grishaev.me/clj-zippers-7/">Зипперы в Clojure (часть 7). Обход в ширину. Улучшенный обмен валют</a></h2>
              <p>
<h2 id="Оглавление">Оглавление</h2>

<ul>
  <li><a href="https://grishaev.me/clj-zippers-1/">Зипперы в Clojure (часть 1). Азы навигации</a></li>
  <li><a href="https://grishaev.me/clj-zippers-2/">Зипперы в Clojure (часть 2). Автонавигация</a></li>
  <li><a href="https://grishaev.me/clj-zippers-3/">Зипперы в Clojure (часть 3). XML-зипперы</a></li>
  <li><a href="https://grishaev.me/clj-zippers-4/">Зипперы в Clojure (часть 4). Поиск в XML</a></li>
  <li><a href="https://grishaev.me/clj-zippers-5/">Зипперы в Clojure (часть 5). Редактирование</a></li>
  <li><a href="https://grishaev.me/clj-zippers-6/">Зипперы в Clojure (часть 6). Вирутальные деревья. Обмен валют</a></li>
  <li><a href="https://grishaev.me/clj-zippers-7/">Зипперы в Clojure (часть 7). Обход в ширину. Улучшенный обмен валют</a></li>
</ul>

<p>В прошлый раз мы работали с деревом валют, чтобы найти цепочку обмена. Мы нашли
решение задачи, но упомянули, что в особых случаях дерево может получиться
бесконечным. Объясним, как это возможно. Для этого вспомним, как <code class="highlighter-rouge">zip/next</code>
обходит дерево.</p>

<p>Алгоритм называется <code class="highlighter-rouge">depth first</code> или обход в глубину. При таком обходе код
стремится в первую очередь вниз, а уже потом — в сторону (в нашем случае
вправо). В этом легко убедиться, если разложить данные на части с помощью
зиппера:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nf">-&gt;&gt;</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="w"> </span><span class="p">[</span><span class="mi">2</span><span class="w"> </span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="w"> </span><span class="mi">4</span><span class="p">]</span><span class="w"> </span><span class="mi">5</span><span class="p">]</span><span class="w">
     </span><span class="n">zip/vector-zip</span><span class="w">
     </span><span class="n">iter-zip</span><span class="w">
     </span><span class="p">(</span><span class="nb">map</span><span class="w"> </span><span class="n">zip/node</span><span class="p">)</span><span class="w">
     </span><span class="p">(</span><span class="nb">map</span><span class="w"> </span><span class="nb">println</span><span class="p">))</span><span class="w">

</span><span class="c1">;; 1</span><span class="w">
</span><span class="c1">;; [2 [3] 4]</span><span class="w">
</span><span class="c1">;; 2</span><span class="w">
</span><span class="c1">;; [3]</span><span class="w">
</span><span class="c1">;; 3</span><span class="w">
</span><span class="c1">;; 4</span><span class="w">
</span><span class="c1">;; 5</span><span class="w">
</span></code></pre></div></div>



<p>Значение <code class="highlighter-rouge">3</code> перед <code class="highlighter-rouge">4</code> говорят о том, что зиппер идет прежде всего вглубь данных
(внутрь вектора <code class="highlighter-rouge">[3]</code>), и только потом право. Еще более интересен случай с
наивным виртуальным деревом, где у каждого узла потомки <code class="highlighter-rouge">[1 2 3]</code>. При обходе
такого дерева зиппер будет стремиться вниз, каждый раз спускаясь в очередной
вектор <code class="highlighter-rouge">[1 2 3]</code> и становясь на единицу. Покажем это на схеме:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">def</span><span class="w"> </span><span class="n">zip-123</span><span class="w">
  </span><span class="p">(</span><span class="nf">zip/zipper</span><span class="w"> </span><span class="n">any?</span><span class="w">
              </span><span class="p">(</span><span class="nb">constantly</span><span class="w"> </span><span class="p">(</span><span class="nb">seq</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="p">]))</span><span class="w">
              </span><span class="n">nil</span><span class="w">
              </span><span class="mi">1</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<div class="asciichart highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                       ┌───────┐
                       │[1 2 3]│
                       └───────┘
                           │
               ┌───────┐   │
               │[1 2 3]│◀──┘
               └───────┘
                   │
        ┌───────┐  │
        │[1 2 3]│◀─┘
        └───────┘
            │
            │
    ...   ◀─┘

</code></pre></div></div>

<p>Поскольку в нашем зиппере нет условия, по которому мы могли бы перестать
производить потомков, их вложенность бесконечна. Функция <code class="highlighter-rouge">iter-zip</code> вернет
бесконечную цепочку локаций, каждая из которых несет единицу. Даже если
ограничить итерацию с помощью <code class="highlighter-rouge">(take n)</code>, это ничего не даст — просто получим N
единиц:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nf">-&gt;&gt;</span><span class="w"> </span><span class="n">zip-123</span><span class="w">
     </span><span class="n">iter-zip</span><span class="w">
     </span><span class="p">(</span><span class="nb">take</span><span class="w"> </span><span class="mi">10</span><span class="p">)</span><span class="w">
     </span><span class="p">(</span><span class="nb">map</span><span class="w"> </span><span class="n">zip/node</span><span class="p">))</span><span class="w">

</span><span class="c1">;; (1 1 1 1 1 1 1 1 1 1)</span><span class="w">
</span></code></pre></div></div>

<p>Теперь вернемся к обмену валют. Предположим, банк меняет рубли на доллары,
доллары на евро и евро на рубли. Выразим это в коде:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">def</span><span class="w"> </span><span class="n">rules</span><span class="w">
  </span><span class="p">[[</span><span class="no">:rub</span><span class="w"> </span><span class="no">:usd</span><span class="p">]</span><span class="w">
   </span><span class="p">[</span><span class="no">:usd</span><span class="w"> </span><span class="no">:eur</span><span class="p">]</span><span class="w">
   </span><span class="p">[</span><span class="no">:eur</span><span class="w"> </span><span class="no">:rub</span><span class="p">]])</span><span class="w">
</span></code></pre></div></div>

<p>Читатель заметит, что получился замкнутый круг:</p>

<div class="asciichart highlighter-rouge"><div class="highlight"><pre class="highlight"><code>             ┌───────┐
        ┌───▶│  rub  │────┐
        │    └───────┘    │
        │                 ▼
    ┌───────┐         ┌───────┐
    │  eur  │◀────────│  usd  │
    └───────┘         └───────┘
</code></pre></div></div>

<p>Проблема прошлого решения в том, что оно не учитывает цикличность
правил. Предположим, клиент хочет обменять рубли на лиры. Начнем строить дерево
от рубля. Начало цепочки:</p>

<div class="asciichart highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                       ┌───────┐
                       │  rub  │
                       └───────┘
                           │
               ┌───────┐   │
               │  usd  │◀──┘
               └───────┘
                   │
        ┌───────┐  │
        │  eur  │◀─┘
        └───────┘
            │
 ┌───────┐  │
 │  rub  │◀─┘
 └───────┘
</code></pre></div></div>

<p>Так мы снова пришли к рублю. Для него мы снова получим доллар, для доллара евро,
затем рубль. Если продолжить итерацию, мы будем бесконечно погружаться в эту
цепочку.</p>

<p>Логика подсказывает, что нужно пресечь обход вглубь, если очередная валюта равна
исходной. Проще говоря, у элемента <code class="highlighter-rouge">:rub</code>, который стоит не на вершине, не может
быть потомков. Но проблема в том, что в функциях <code class="highlighter-rouge">branch?</code> и <code class="highlighter-rouge">make-children</code> мы
не знаем, какое место в дереве занимает элемент. В них приходят чистые значения,
а не локации. Это можно исправить с помощью состояния, например атома, который
хранил бы список валют, которые мы обошли. Но сейчас мы ставим задачу обойтись
без состояния и изменяемых объектов.</p>

<p>Если еще раз исследовать дерево, то станет ясно: проблема в порядке
обхода. Поскольку мы стремимся вглубь, велика вероятность попасть в кротовую
нору, из которой нельзя выбраться. Нам может и повезти, когда мы удачно шагнули
в ветку с решением, а бесконечная ветка оказалась дальше:</p>

<div class="asciichart highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                 ┌───────┐
                 │  rub  │
                 └───────┘
                     │
         ┌───────┐   │   ┌───────┐
         │  yen  │◀──┴──▶│  usd  │
         └───────┘       └───────┘
             │               │
 ┏━━━━━━━┓   │               │   ┌───────┐
 ┃  lir  ┃◀──┘               └──▶│  eur  │
 ┗━━━━━━━┛                       └───────┘
                                     │
                                     │   ┌───────┐
                                     └──▶│  rub  │
                                         └───────┘
                                             │
                                             │
                                             └──▶  ...

</code></pre></div></div>

<p>Однако это везение, и на него нельзя полагаться в решении задач.</p>

<p>Предположим теперь, что зиппер обходит локации не вглубь, а вширь и вправо. С
таким порядком нам не страшны бесконечные ветки. Если таковая закралась в
дерево, она не оттянет на себя обход. Вместо этого мы спускаемся по этажам
дерева и получим все элементы этого уровня. Даже если один из них пришел из
бесконечной ветви, это не помешает исследовать остальные. Рисунок ниже
показывает, что горизонтальный обход поможет добраться до решения. Вертикальный
обход ушел бы вы бесконечность.</p>

<div class="asciichart highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                 ┌───────┐
             ┌───│  rub  │
             │   └───────┘
             ▼
         ┌───────┐       ┌───────┐
         │  yen  │──────▶│  usd  │
         └───────┘       └───────┘
                             │
     ┌───────────────────────┘
     ▼
 ┏━━━━━━━┓                       ┌───────┐
 ┃  lir  ┃──────────────────────▶│  eur  │
 ┗━━━━━━━┛                       └───────┘
                                     │
                                     │   ┌───────┐
                                     └──▶│  rub  │
                                         └───────┘
                                             │
                                             │
                                             └──▶  ...

</code></pre></div></div>

<p>Проблема в том, что модуль <code class="highlighter-rouge">clojure.zip</code> предлагает только один способ обхода —
в глубину с помощью <code class="highlighter-rouge">zip/next</code>. Другого алгоритма не предусмотрено. Мы напишем
свою функцию, чтобы обойти зиппер “послойно”. Говоря иначе, для дерева</p>

<div class="asciichart highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                            ┌───────┐
  1                         │   1   │
                            └───────┘
                                │
              ┌───────┐         │         ┌───────┐
  2           │   2   │◀────────┴────────▶│   3   │
              └───────┘                   └───────┘
                  │                           │
      ┌───────┐   │   ┌───────┐   ┌───────┐   │   ┌───────┐
  3   │   4   │◀──┴──▶│   5   │   │   6   │◀──┴──▶│   7   │
      └───────┘       └───────┘   └───────┘       └───────┘
</code></pre></div></div>

<p>мы получим слои:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w">
</span><span class="p">[</span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="w">
</span><span class="p">[</span><span class="mi">4</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="mi">6</span><span class="w"> </span><span class="mi">7</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p>, при этом каждый элемент слоя будет не примитивом, а локацией. Это значит,
элемент помнит свое положение в дереве, от него можно переходить к другим
элементам, получит его путь и так далее.</p>

<p>Для начала нужна функция, которая вернет дочерние локации исходной. Ее логика
проста: если от локации можно сдвинуться вниз, то двигаемся вправо до тех пор,
пока не упремся в пустоту.</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">loc-children</span><span class="w"> </span><span class="p">[</span><span class="n">loc</span><span class="p">]</span><span class="w">
  </span><span class="p">(</span><span class="nb">when-let</span><span class="w"> </span><span class="p">[</span><span class="n">loc-child</span><span class="w"> </span><span class="p">(</span><span class="nf">zip/down</span><span class="w"> </span><span class="n">loc</span><span class="p">)]</span><span class="w">
    </span><span class="p">(</span><span class="nf">-&gt;&gt;</span><span class="w"> </span><span class="n">loc-child</span><span class="w">
         </span><span class="p">(</span><span class="nb">iterate</span><span class="w"> </span><span class="n">zip/right</span><span class="p">)</span><span class="w">
         </span><span class="p">(</span><span class="nb">take-while</span><span class="w"> </span><span class="n">some?</span><span class="p">))))</span><span class="w">
</span></code></pre></div></div>

<p>Обратите внимание, что это не то же самое, что <code class="highlighter-rouge">zip/children</code>. Последняя вернет
дочерние элементы, а не локации, а нам нужны именно локации. Сравните выражения:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">-&gt;</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="w">
    </span><span class="n">zip/vector-zip</span><span class="w">
    </span><span class="n">zip/children</span><span class="p">)</span><span class="w">

</span><span class="p">(</span><span class="nf">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>и</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">-&gt;</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="w">
    </span><span class="n">zip/vector-zip</span><span class="w">
    </span><span class="n">loc-children</span><span class="p">)</span><span class="w">

</span><span class="p">([</span><span class="mi">1</span><span class="w"> </span><span class="p">{</span><span class="no">:l</span><span class="w"> </span><span class="p">[]</span><span class="w"> </span><span class="no">:pnodes</span><span class="w"> </span><span class="p">[[</span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="p">]]</span><span class="w"> </span><span class="no">:ppath</span><span class="w"> </span><span class="n">nil</span><span class="w"> </span><span class="no">:r</span><span class="w"> </span><span class="p">(</span><span class="nf">2</span><span class="w"> </span><span class="mi">3</span><span class="p">)}]</span><span class="w">
 </span><span class="p">[</span><span class="mi">2</span><span class="w"> </span><span class="p">{</span><span class="no">:l</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="no">:pnodes</span><span class="w"> </span><span class="p">[[</span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="p">]]</span><span class="w"> </span><span class="no">:ppath</span><span class="w"> </span><span class="n">nil</span><span class="w"> </span><span class="no">:r</span><span class="w"> </span><span class="p">(</span><span class="nf">3</span><span class="p">)}]</span><span class="w">
 </span><span class="p">[</span><span class="mi">3</span><span class="w"> </span><span class="p">{</span><span class="no">:l</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="p">]</span><span class="w"> </span><span class="no">:pnodes</span><span class="w"> </span><span class="p">[[</span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="p">]]</span><span class="w"> </span><span class="no">:ppath</span><span class="w"> </span><span class="n">nil</span><span class="w"> </span><span class="no">:r</span><span class="w"> </span><span class="n">nil</span><span class="p">}])</span><span class="w">
</span></code></pre></div></div>

<p>Во втором случае получили локации, в то время как <code class="highlighter-rouge">zip/children</code> просто
 обращается к функции для нахождения потомков, которую передали в зиппер.</p>

<p>Предположим, что для некоторой локации <code class="highlighter-rouge">loc-children</code> вернула список
потомков. Чтобы спуститься на уровень ниже, нужно найти потомков каждого из них
и объединить результат. Проще всего это это сделать выражением:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">mapcat</span><span class="w"> </span><span class="n">loc-children</span><span class="w"> </span><span class="n">locs</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>, где <code class="highlighter-rouge">locs</code> — список локаций очередного уровня. Если передать в <code class="highlighter-rouge">locs</code> новый
уровень, продвинемся еще дальше, и так до тех пор, пока не получим пустую
последовательность. Все вместе дает нам функцию <code class="highlighter-rouge">loc-layers</code>:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">loc-layers</span><span class="w"> </span><span class="p">[</span><span class="n">loc</span><span class="p">]</span><span class="w">
  </span><span class="p">(</span><span class="nf">-&gt;&gt;</span><span class="w"> </span><span class="p">[</span><span class="n">loc</span><span class="p">]</span><span class="w">
       </span><span class="p">(</span><span class="nb">iterate</span><span class="w"> </span><span class="p">(</span><span class="k">fn</span><span class="w"> </span><span class="p">[</span><span class="n">locs</span><span class="p">]</span><span class="w">
                  </span><span class="p">(</span><span class="nb">mapcat</span><span class="w"> </span><span class="n">loc-children</span><span class="w"> </span><span class="n">locs</span><span class="p">)))</span><span class="w">
       </span><span class="p">(</span><span class="nb">take-while</span><span class="w"> </span><span class="nb">seq</span><span class="p">)))</span><span class="w">
</span></code></pre></div></div>

<p>Она принимает корневую локацию, от которой начинается итерация по слоям. В
первом слое вектор из одной локации, затем его потомки, затем потомки потомков и
так далее. Быстрая проверка:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="p">[</span><span class="n">layers</span><span class="w"> </span><span class="p">(</span><span class="nb">-&gt;</span><span class="w"> </span><span class="p">[[[[</span><span class="mi">1</span><span class="p">]]]</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="p">[[[</span><span class="mi">3</span><span class="p">]]]</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="w">
                 </span><span class="n">zip/vector-zip</span><span class="w">
                 </span><span class="n">loc-layers</span><span class="p">)]</span><span class="w">
  </span><span class="p">(</span><span class="k">for</span><span class="w"> </span><span class="p">[</span><span class="n">layer</span><span class="w"> </span><span class="n">layers</span><span class="p">]</span><span class="w">
    </span><span class="p">(</span><span class="nf">-&gt;&gt;</span><span class="w"> </span><span class="n">layer</span><span class="w">
         </span><span class="p">(</span><span class="nb">map</span><span class="w"> </span><span class="n">zip/node</span><span class="p">)</span><span class="w">
         </span><span class="nb">println</span><span class="p">)))</span><span class="w">


</span><span class="c1">;; ([[[[1]]] 2 [[[3]]] 3])</span><span class="w">
</span><span class="c1">;; ([[[1]]] 2 [[[3]]] 3)</span><span class="w">
</span><span class="c1">;; ([[1]] [[3]])</span><span class="w">
</span><span class="c1">;; ([1] [3])</span><span class="w">
</span><span class="c1">;; (1 3)</span><span class="w">
</span></code></pre></div></div>

<p>Чтобы получить цепочку, где элементы идут вширь и вправо, сцепим слои с помощью
<code class="highlighter-rouge">concat</code>. Эта функция не понадобится в решении задачи, но может оказаться
полезной:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">loc-seq-layers</span><span class="w"> </span><span class="p">[</span><span class="n">loc</span><span class="p">]</span><span class="w">
  </span><span class="p">(</span><span class="nb">apply</span><span class="w"> </span><span class="nb">concat</span><span class="w"> </span><span class="p">(</span><span class="nf">loc-layers</span><span class="w"> </span><span class="n">loc</span><span class="p">)))</span><span class="w">
</span></code></pre></div></div>

<p>Вернемся к обмену валют. Подберем правила обмена так, чтобы в них были
циклические зависимости. Зиппер останется прежним: он точно так же строит дерево
обмена при помощи локальной функции <code class="highlighter-rouge">get-children</code>, которая замкнута на
правилах.</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">def</span><span class="w"> </span><span class="n">rules2</span><span class="w">
  </span><span class="p">[[</span><span class="no">:rub</span><span class="w"> </span><span class="no">:usd</span><span class="p">]</span><span class="w">
   </span><span class="p">[</span><span class="no">:usd</span><span class="w"> </span><span class="no">:eur</span><span class="p">]</span><span class="w">
   </span><span class="p">[</span><span class="no">:eur</span><span class="w"> </span><span class="no">:rub</span><span class="p">]</span><span class="w">

   </span><span class="p">[</span><span class="no">:rub</span><span class="w"> </span><span class="no">:lir</span><span class="p">]</span><span class="w">
   </span><span class="p">[</span><span class="no">:lir</span><span class="w"> </span><span class="no">:eur</span><span class="p">]</span><span class="w">
   </span><span class="p">[</span><span class="no">:eur</span><span class="w"> </span><span class="no">:din</span><span class="p">]</span><span class="w">
   </span><span class="p">[</span><span class="no">:din</span><span class="w"> </span><span class="no">:tug</span><span class="p">]])</span><span class="w">
</span></code></pre></div></div>

<p>Изменится стиль работы с этим зиппером. Теперь мы итерируем его с помощью не
<code class="highlighter-rouge">zip/next</code>, а нашей <code class="highlighter-rouge">loc-layers</code>. На каждом шаге мы получим слои обмена. Наша
задача — найти в очередном слое локации, чей узел равен конечной валюте. Как
только мы нашли хотя бы одну, задача решена. Останется только вычислить до них
путь.</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">exchange2</span><span class="w"> </span><span class="p">[</span><span class="n">rules</span><span class="w"> </span><span class="n">from</span><span class="w"> </span><span class="n">to</span><span class="p">]</span><span class="w">

  </span><span class="p">(</span><span class="nf">letfn</span><span class="w"> </span><span class="p">[(</span><span class="nf">get-children</span><span class="w"> </span><span class="p">[</span><span class="n">value</span><span class="p">]</span><span class="w">
            </span><span class="p">(</span><span class="nb">seq</span><span class="w"> </span><span class="p">(</span><span class="k">for</span><span class="w"> </span><span class="p">[[</span><span class="n">v1</span><span class="w"> </span><span class="n">v2</span><span class="p">]</span><span class="w"> </span><span class="n">rules</span><span class="w">
                       </span><span class="no">:when</span><span class="w"> </span><span class="p">(</span><span class="nb">=</span><span class="w"> </span><span class="n">v1</span><span class="w"> </span><span class="n">value</span><span class="p">)]</span><span class="w">
                   </span><span class="n">v2</span><span class="p">)))</span><span class="w">

          </span><span class="p">(</span><span class="nf">loc-to?</span><span class="w"> </span><span class="p">[</span><span class="n">loc</span><span class="p">]</span><span class="w">
            </span><span class="p">(</span><span class="nb">-&gt;</span><span class="w"> </span><span class="n">loc</span><span class="w"> </span><span class="n">zip/node</span><span class="w"> </span><span class="p">(</span><span class="nb">=</span><span class="w"> </span><span class="n">to</span><span class="p">)))</span><span class="w">

          </span><span class="p">(</span><span class="nf">find-locs-to</span><span class="w"> </span><span class="p">[</span><span class="n">layer</span><span class="p">]</span><span class="w">
            </span><span class="p">(</span><span class="nb">seq</span><span class="w"> </span><span class="p">(</span><span class="nb">filter</span><span class="w"> </span><span class="n">loc-to?</span><span class="w"> </span><span class="n">layer</span><span class="p">)))</span><span class="w">

          </span><span class="p">(</span><span class="nf">-&gt;exchange</span><span class="w"> </span><span class="p">[</span><span class="n">loc</span><span class="p">]</span><span class="w">
            </span><span class="p">(</span><span class="nb">conj</span><span class="w"> </span><span class="p">(</span><span class="nf">zip/path</span><span class="w"> </span><span class="n">loc</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="nf">zip/node</span><span class="w"> </span><span class="n">loc</span><span class="p">)))]</span><span class="w">

    </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="p">[</span><span class="n">zipper</span><span class="w"> </span><span class="p">(</span><span class="nf">zip/zipper</span><span class="w"> </span><span class="nb">keyword?</span><span class="w">
                             </span><span class="n">get-children</span><span class="w">
                             </span><span class="n">nil</span><span class="w">
                             </span><span class="n">from</span><span class="p">)]</span><span class="w">

      </span><span class="p">(</span><span class="nf">-&gt;&gt;</span><span class="w"> </span><span class="n">zipper</span><span class="w">
           </span><span class="n">loc-layers</span><span class="w">
           </span><span class="p">(</span><span class="nb">some</span><span class="w"> </span><span class="n">find-locs-to</span><span class="p">)</span><span class="w">
           </span><span class="p">(</span><span class="nb">map</span><span class="w"> </span><span class="n">-&gt;exchange</span><span class="p">)))))</span><span class="w">
</span></code></pre></div></div>

<p>Заметим, что теперь не нужно сравнивать длины цепочек: если локации из одного
уровня, число шагов до них одинаково. По условию задачи мы заинтересованы в
самых коротких вариантах обмена. Это значит, что если на третьем уровне нашлась
одна цепочка, а на четвертом их пять, последние нам не интересны — мы завершаем
обход на третьем слое.</p>

<p>Примеры обмена:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nf">exchange2</span><span class="w"> </span><span class="n">rules2</span><span class="w"> </span><span class="no">:rub</span><span class="w"> </span><span class="no">:eur</span><span class="p">)</span><span class="w">
</span><span class="p">([</span><span class="no">:rub</span><span class="w"> </span><span class="no">:usd</span><span class="w"> </span><span class="no">:eur</span><span class="p">]</span><span class="w"> </span><span class="p">[</span><span class="no">:rub</span><span class="w"> </span><span class="no">:lir</span><span class="w"> </span><span class="no">:eur</span><span class="p">])</span><span class="w">

</span><span class="p">(</span><span class="nf">exchange2</span><span class="w"> </span><span class="n">rules2</span><span class="w"> </span><span class="no">:rub</span><span class="w"> </span><span class="no">:tug</span><span class="p">)</span><span class="w">
</span><span class="p">([</span><span class="no">:rub</span><span class="w"> </span><span class="no">:usd</span><span class="w"> </span><span class="no">:eur</span><span class="w"> </span><span class="no">:din</span><span class="w"> </span><span class="no">:tug</span><span class="p">]</span><span class="w"> </span><span class="p">[</span><span class="no">:rub</span><span class="w"> </span><span class="no">:lir</span><span class="w"> </span><span class="no">:eur</span><span class="w"> </span><span class="no">:din</span><span class="w"> </span><span class="no">:tug</span><span class="p">])</span><span class="w">

</span><span class="p">(</span><span class="nf">exchange2</span><span class="w"> </span><span class="n">rules2</span><span class="w"> </span><span class="no">:lir</span><span class="w"> </span><span class="no">:din</span><span class="p">)</span><span class="w">
</span><span class="p">([</span><span class="no">:lir</span><span class="w"> </span><span class="no">:eur</span><span class="w"> </span><span class="no">:din</span><span class="p">])</span><span class="w">
</span></code></pre></div></div>

<p>Решение все еще не идеально. Если указать пару валют, для которых нет цепочки,
получим бесконечный цикл. Чтобы пресечь его, ограничьте число слоев каким-то
разумным числом, например пятью. С точки зрения финансов, обмен валюты с таким
числом промежуточных операций скорей всего будет невыгодным, а потому лишен
смысла. Технически это значит добавить форму <code class="highlighter-rouge">(take N)</code> сразу после
<code class="highlighter-rouge">loc-layers</code>:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nf">-&gt;&gt;</span><span class="w"> </span><span class="n">zipper</span><span class="w">
     </span><span class="n">loc-layers</span><span class="w">
     </span><span class="p">(</span><span class="nb">take</span><span class="w"> </span><span class="mi">5</span><span class="p">)</span><span class="w">
     </span><span class="p">(</span><span class="nb">some</span><span class="w"> </span><span class="n">find-locs-to</span><span class="p">)</span><span class="w">
     </span><span class="p">(</span><span class="nb">map</span><span class="w"> </span><span class="n">-&gt;exchange</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>Теперь для неверной пары получим пустой результат:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nf">exchange2</span><span class="w"> </span><span class="n">rules2</span><span class="w"> </span><span class="no">:tug</span><span class="w"> </span><span class="no">:yen</span><span class="p">)</span><span class="w">
</span><span class="p">()</span><span class="w">
</span></code></pre></div></div>

<p>Задачу можно развить еще дальше. Например, для каждой цепочки считать издержки и
комиссию за операцию. Для этого в вектор <code class="highlighter-rouge">[:from :to]</code> добавим обменный курс и
вознаграждение. В зависимости от того, на чьей мы стороне — клиента или банка —
будем предлагать самые затратные или оптимальные обмены. Предлагаем читателю
придумать свои вариации к этой задаче. На этом мы закончим с валютами и двинемся
дальше.</p>

<p>В этом главе мы рассмотрели, как порядок обхода влияет на решение задачи. В
разных случаях применяют методы в глубину и в ширину. Это важно для бесконечных
деревьев, когда алгоритм может зациклиться при обходе. В поставке <code class="highlighter-rouge">clojure.zip</code>
нет обхода вширь, но легко написать функцию для нарезки зиппера
слоями. Возможно, <code class="highlighter-rouge">loc-layers</code> пригодится вам в других случаях, связанных с
графами и вершинами.</p>

<p>(Продолжение следует)</p>

<h2 id="Оглавление-1">Оглавление</h2>

<ul>
  <li><a href="https://grishaev.me/clj-zippers-1/">Зипперы в Clojure (часть 1). Азы навигации</a></li>
  <li><a href="https://grishaev.me/clj-zippers-2/">Зипперы в Clojure (часть 2). Автонавигация</a></li>
  <li><a href="https://grishaev.me/clj-zippers-3/">Зипперы в Clojure (часть 3). XML-зипперы</a></li>
  <li><a href="https://grishaev.me/clj-zippers-4/">Зипперы в Clojure (часть 4). Поиск в XML</a></li>
  <li><a href="https://grishaev.me/clj-zippers-5/">Зипперы в Clojure (часть 5). Редактирование</a></li>
  <li><a href="https://grishaev.me/clj-zippers-6/">Зипперы в Clojure (часть 6). Вирутальные деревья. Обмен валют</a></li>
  <li><a href="https://grishaev.me/clj-zippers-7/">Зипперы в Clojure (часть 7). Обход в ширину. Улучшенный обмен валют</a></li>
</ul>              </p>
              <p class="meta"><a href="https://grishaev.me/clj-zippers-7/">Permalink</a></p>
            </article>
          </section>
          <section class="entry">
            <aside class="aside">
              <!-- <img src="static/i/favicon.gif" alt="Name of the Site" /> -->
              <h2><a href="https://medium.com/@kari.marttila?source=rss-817417aca5da------2" title="Stories by Kari Marttila on Medium">Kari Marttila</a></h2>
              <p>
August 29, 2020 07:01 PM                <br />
                <a href="https://medium.com/@kari.marttila?source=rss-817417aca5da------2">Feed URL</a>
              </p>
            </aside>
            <article class="article">
              <h2><a href="https://medium.com/@kari.marttila/use-clojure-with-docker-and-kubernetes-8be1de8506de?source=rss-817417aca5da------2">Use Clojure with Docker and Kubernetes!</a></h2>
              <p>
<figure><img alt="" src="https://cdn-images-1.medium.com/max/925/1*GB05NpdtUNu1zC8B7KR6Kg.png" />Cursive REPL output window. Just listing the buckets using my repl scratch file.</figure><h3>Introduction</h3><p>At my new company <a href="http://www.metosin.fi/">Metosin</a> I have been implementing <a href="https://aws.amazon.com/">AWS</a> infrastructure using <a href="https://www.pulumi.com/">Pulumi</a> and implementing applications using <a href="https://clojure.org/">Clojure</a>. We are deploying applications into a <a href="https://kubernetes.io/">Kubernetes</a> cluster and to verify that our applications run with the infrastructure in a dockerized environment as they should we are running tests locally using Drone pipeline (see my previous blog post about it: <a href="http://localhost:4000/devops/2020/08/26/using-drone-ci.html">Using Drone CI</a> ) which spins the required infrastructure using docker containers (<a href="https://www.postgresql.org/">Postgres</a> and <a href="https://hub.docker.com/r/minio/minio/">Minio</a>) and the actual application as another <a href="https://www.docker.com/resources/what-container">docker container</a>. This week I was wondering that one application behaved a bit differently running tests in my local workstation hitting containers using localhost and running tests inside a docker container. I was discussing this with one Metosin colleague and he told me how to add an <a href="https://github.com/nrepl/nrepl">nrepl server</a> inside the application so that I can connect to the application running in a docker container and experiment with the running application there using my <a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a> / <a href="https://cursive-ide.com/userguide/repl.html">Cursive REPL</a>. Because this trick was pretty neat I thought that I write a short blog post about it. (By the way, I haven’t regretted a second joining Metosin — one of the best places to be if you want to learn Clojure with the best clojurians on the planet, see more: <a href="http://localhost:4000/metosin/2020/03/23/my-first-weeks-at-metosin.html">My First Weeks at Metosin!</a>)</p><h3>Setting Up Nrepl Server Inside a Clojure Application</h3><p>Our Clojure applications use <a href="https://github.com/weavejester/integrant">Integrant</a> as a state management library and we have our configuration in an <a href="https://github.com/juxt/aero">Aero</a> configuration file. Setting up an nrepl server inside the application is pretty straightforward using these libraries. First the configuration file:</p><pre>…<br /> :backend/nrepl {:bind #profile {:prod nil<br /> :local “localhost”<br /> :docker “0.0.0.0”<br /> }<br /> :port 3177}<br />…</pre><p>So, in prod don’t use nrepl, in local profile when running application locally use localhost and when running application inside a docker container use 0.0.0.0 address. Nrepl server listens to 3177 port.</p><p>Then in your Integrant configuration provide functions so that Integrant knows what to do when you want to init, halt, suspend and resume your state:</p><pre>…<br />(defmethod ig/init-key :backend/nrepl [_ {:keys [bind port]}]<br /> (if (and bind port)<br /> (nrepl/start-server :bind bind :port port)<br /> nil))</pre><pre>(defmethod ig/halt-key! :backend/nrepl [_ this]<br /> (if this<br /> (nrepl/stop-server this)))</pre><pre>(defmethod ig/suspend-key! :backend/nrepl [_ this]<br /> this)</pre><pre>(defmethod ig/resume-key :backend/nrepl [_ _ _ old-impl]<br /> old-impl)<br />…</pre><p>So, in init we start the nrepl server and in halt, we stop it. In suspend we store the nrepl instance and in resume we use the old nrepl instance - i.e. when you keep hitting that Integrant reset hot key (mine is Alt-J) to reset your state you don’t want to stop the nrepl server.</p><h3>Docker Configuration</h3><p>You can use e.g. <a href="https://docs.docker.com/compose/">Docker Compose</a> when providing the docker configuration for your application. Example follows:</p><pre>version: ‘3.7’<br />services:<br /> arkisto_image:<br /> image: local-arkisto:latest<br /> ports:<br />   — “3077:3077”<br />   — “3177:3177”<br /> networks:<br />   [clojure-network]<br /> container_name: arkisto_image<br /> environment:<br />   PROFILE: docker<br />   DB_USERNAME: arkisto<br />   DB_PASSWORD: arkisto<br />   DB_HOST: clojuredb<br />   DB_PORT: 5432<br />   MINIO_HOST: clojures3<br />   AWS_ACCESS_KEY_ID: minioadmin<br />   AWS_SECRET_ACCESS_KEY: minioadmin</pre><pre>networks:<br /> clojure-network:<br />   name: clojure-network</pre><p>The important trick here is to port forward the nrepl port 3177 from docker container to your host (your workstation) so that Cursive REPL can connect to it. (NOTE: This is just a test image configuration, I use another Dockerfile for building the real application image running in Kubernetes, of course - therefore using dummy passwords.)</p><p>If you wonder why we have the MINIO_HOST in this yaml file, let’s see the Aero configuration once more:</p><pre>; Endpoint only used in dev — default value that of Minio.<br /> :endpoint #profile {:prod nil<br /> :dev {:protocol :http<br /> :hostname #or [#env “MINIO_HOST” “localhost”]<br /> :port 9000}}</pre><p>… so, in production the endpoint configuration is nil (not needed, the Kube EKS uses AWS IAM to get access to the S3 buckets…), but in other environments, we simulate S3 using Minio and thus providing the endpoint to Minio server.</p><h3>Connecting to the Nrepl Server From Your IDE</h3><p>I use excellent <a href="https://cursive-ide.com/userguide/repl.html">Cursive REPL</a> Clojure IDE as an example, but you can connect to the nrepl server pretty much same way using any Clojure IDE.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/966/1*KkKYfTk842AgTu7cku229w.png" />Cursive REPL configuration.</figure><p>Then just click the IntelliJ IDEA “Start configuration” button and Cursive REPL connects immediately into your application’s nrepl port. Then you can do in the application code whatever you do also locally: reset state, compile namespaces, etc. The picture at the beginning of the blog post shows one REPL output from my repl scratch file while checking if I can connect to the Minio server running in another container in the same docker network.</p><p>Let’s try another trick here. Add something like this in your project’s deps.edn or in ~/.clojure/deps.edn:</p><pre>:aliases {<br />           :kari {:extra-paths ["scratch"]<br />                  :extra-deps {hashp {:mvn/version "0.1.1"}<br />...</pre><p>This is the excellent <a href="https://github.com/weavejester/hashp">Hashp</a> debugging print tool.</p><p>And then in your clojure scratch file send the following form to repl:</p><pre>(<strong>require</strong> <strong>'</strong>[hashp.core])</pre><p>Then you can add #p in front of any form you want to have debugging information. Let’s add some printouts and see if we are using either AWS Profile or access key / secret key in that docker environment:</p><pre>(<strong>defn</strong> get-aws-credentials<br />  "Get aws credentials. If AWS_PROFILE provided, use it. If AWS basic credentials, use them.<br />  These are only for testing purposes. In real EKS environment do not provide any credentials<br />  (returns nil) which means that pod uses role based authorization provided in the Pulumi<br />  configuration."<br />  [aws-profile aws-basic-credentials]<br />  (<strong>let</strong> [{access-key-id :access-key-id<br />         secret-access-key :secret-access-key} aws-basic-credentials]<br />    (<strong>cond</strong><br />      aws-profile <strong>#</strong>p (<strong>credentials/profile-credentials-provider</strong> aws-profile)<br />      (and access-key-id secret-access-key) <strong>#</strong>p (<strong>credentials/basic-credentials-provider</strong> aws-basic-credentials))))</pre><p>Then send the namespace to repl and reset Integrant state (in my Cursive IDE I have the following hot keys: Alt-N: switch to namespace your cursor is, Alt-M: send namespace to repl, Alt-J: reset Integrant state — takes less than a second to click these three buttons). I see this in my Cursive REPL output windows:</p><pre>Loading src/clj/arkisto/backend/main.clj... done<br />(<strong>integrant.repl/reset</strong>)<br />:reloading ()<br /><strong>#</strong>p[arkisto.backend.main/get-aws-credentials:39] (<strong>credentials/basic-credentials-provider</strong> aws-basic-credentials) =&gt; <strong>#</strong>&lt;cognitect.aws.credentials$basic_credentials_provider$reify__23486<strong>@</strong>3c5cb0f5&gt;<br />=&gt; :resumed</pre><p>… so, we are using access key / secret key (as you could see in the docker compose configuration file earlier).</p><h3>How About If I Want to Connect to a Clojure Application inside Kubernetes Pod?</h3><p>For connecting to a nrepl server running in an application running inside Kubernetes cluster I created a simple <a href="https://github.com/casey/just">Justfile</a> recipe so that my team members can easily connect to the applications:</p><pre><em># forward nrepl port from kube pod</em><br />@kube-nrepl +args<strong>=</strong>'':<br />   ./infra/scripts/run-nrepl-port-forward.sh</pre><p>Just recipe delegates task to the run-nrepl-port-forward.sh which does something like this:</p><pre>...<br />MYNS<strong>=</strong>"XXX-<strong>${</strong>MYAPP<strong>}</strong>-master"   <em># provide namespace</em><br />MYPODNAME<strong>=</strong>$(kubectl get pods -n $MYNS -o<strong>=</strong>jsonpath<strong>=</strong>'{.items[0].metadata.name}')  <em># parse pod name</em><br />echo "Creating port forward from $MYPODNAME nrepl port $REMOTE_PORT to local port $MYPORT..."<br />kubectl -n $MYNS port-forward $MYPODNAME $MYPORT:$REMOTE_PORT  <em># forward port</em></pre><p>… and when I run the Just recipe:</p><pre>λ&gt; just kube-nrepl arkisto 6677<br />Getting pod <strong>for </strong>arkisto...<br />Creating port forward from arkisto-master-897d9bd60c-6tm46 nrepl port 3177 to local port 6677...<br />Forwarding from 127.0.0.1:6677 -&gt; 3177<br />Forwarding from <strong>[</strong>::1]:6677 -&gt; 3177</pre><p>… and then provide the same configuration in your Clojure IDE as provided earlier, but this time the local port is 6677. You can run both repls at the same time and use repl to examine the differences, e.g.</p><pre><em>; Sending form in repl connected to Docker...</em><br />(<strong>user/system</strong>)<br />=&gt;<br /><strong>#</strong>:backend{:s3 <strong>#</strong>object[cognitect.aws.client.Client 0x432cd41f "cognitect.aws.client.Client@432cd41f"],<br />          :bucket {:use-s3 nil,<br />                   :bucket "arkisto-mainsystem-bucket",<br />...<br /><em>; Sending form in repl connected to Kubernetes...</em><br />(<strong>user/system</strong>)<br />=&gt;<br /><strong>#</strong>:backend{:s3 <strong>#</strong>object[cognitect.aws.client.Client 0x37f83fa "cognitect.aws.client.Client@37f83fa"],<br />          :bucket {:use-s3 true,<br />                   :bucket "my-very-secret-arkisto-bucket-xxxx",   <em>; NOTE: bucket name changed in this blog!</em><br />...</pre><p>So, in my docker test environment I’m not using real <a href="https://aws.amazon.com/s3/">AWS S3</a> but <a href="https://hub.docker.com/r/minio/minio/">Minio</a> which provides exactly the same api interface so that the clojure code actually doesn’t know if we are using real AWS S3 service or a simulated environment (Minio). In test environment I use some bucket name for development purposes (creates a bucket inside Minio), in real life the application gets the bucket name from <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html">AWS Parameter Store</a>. The use-s3 is just for the Integrant state to create the bucket in Minio if we are running in a test environment (in real AWS environment the bucket is already there, of course):</p><pre>...<br />  <em>; NOTE: Pulumi manages infra creation (S3 bucket).</em><br />  (when-not use-s3<br />    (<strong>aws/invoke</strong> s3-client {:op :CreateBucket :request {:Bucket bucket}}))<br />  {:use-s3 use-s3 :bucket bucket :s3-client s3-client :clean clean})<br />...</pre><h3>Conclusions</h3><p>If you want to learn an excellent functional language which is ready for the cloud era look no further: <a href="https://clojure.org/">Clojure</a>.</p><p><em>The writer is working at </em><a href="https://www.metosin.fi/"><em>Metosin</em></a><em> using Clojure in cloud projects. If you are interested to start a Clojure project in Finland or you are interested to get Clojure training in Finland you can contact me by sending email to my Metosin email address or contact me via LinkedIn.</em></p><p>Kari Marttila</p><ul><li>Kari Marttila’s Home Page in LinkedIn: <a href="https://www.linkedin.com/in/karimarttila/">https://www.linkedin.com/in/karimarttila/</a></li></ul><p><em>The article was first published in </em><a href="https://www.karimarttila.fi/"><em>https://www.karimarttila.fi/</em></a></p><img height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8be1de8506de" width="1" />              </p>
              <p class="meta"><a href="https://medium.com/@kari.marttila/use-clojure-with-docker-and-kubernetes-8be1de8506de?source=rss-817417aca5da------2">Permalink</a></p>
            </article>
          </section>
          <section class="entry">
            <aside class="aside">
              <!-- <img src="static/i/favicon.gif" alt="Name of the Site" /> -->
              <h2><a href="https://www.clojuriststogether.org/" title="Clojurists Together">Clojurists Together</a></h2>
              <p>
August 28, 2020 10:10 PM                <br />
                <a href="https://www.clojuriststogether.org/">Feed URL</a>
              </p>
            </aside>
            <article class="article">
              <h2><a href="https://www.clojuriststogether.org/news/q3-2020-funding-announcement/">Q3 2020 Funding Announcement</a></h2>
              <p>
<p>Clojurists Together is happy to announce that for Q3 of 2020 (mid-August-mid-November) we are funding four projects:</p>

<ul>
<li><a href="https://github.com/borkdude/clj-kondo">clj-kondo</a>/<a href="https://github.com/borkdude/babashka">babashka</a>/<a href="https://github.com/borkdude/sci">sci</a> with Michiel Borkent</li>
<li><a href="https://github.com/replikativ/datahike">Datahike</a> with Konrad Kühne</li>
<li><a href="https://github.com/metosin/malli">Malli</a> with Tommi Reiman</li>
<li><a href="https://practicalli.github.io">Practicallli</a> with John Stevenson</li>
</ul>

<p>This is the first full funding round run under the Clojurists Together Foundation. It’s taken us a little bit longer to get up and running this time, but future rounds should be much quicker.</p>

<h2 id="clj-kondo-babashka-sci">clj-kondo/babashka/sci</h2>

<h3 id="what-are-you-wanting-to-achieve-with-this-funding">What are you wanting to achieve with this funding?</h3>

<p><strong>clj-kondo</strong></p>

<p>High priority issues in clj-kondo are usually fixed very fast: in most cases
they are fixed and released within weeks. But there are several important
enhancements that have been in the backlog for a while. I have curated a list of
these issues and labeled them “clj-together”. They are prioritized in order of
importance on the project board:
<a href="https://github.com/borkdude/clj-kondo/projects/1?card_filter_query=label%3Aclj-together">https://github.com/borkdude/clj-kondo/projects/1?card_filter_query=label%3Aclj-together</a>
(see medium priority column).</p>

<p>A couple of examples:</p>

<ul>
<li>Lint files in parallel which speeds up linting entire projects</li>
<li>Add warnings for bindings shadowing vars, nested function literals, discarded
constants/pure expressions.</li>
</ul>

<p><strong>Babashka / Small Clojure Interpreter</strong></p>

<ul>
<li>Integration of clojure.spec into babashka</li>
<li>Add support for clojure.datafy</li>
<li>Port tests to Windows</li>
<li>Investigate possiblity of implementing reify and deftype</li>
<li>Smaller sci CLJS builds by configuration</li>
<li>More control over duration / interrupts</li>
</ul>

<h3 id="why-is-this-project-important-to-the-clojure-community">Why is this project important to the Clojure community?</h3>

<p>Clj-kondo is a Clojure linter that is used by a wide variety of individual users
and companies
(<a href="https://github.com/borkdude/clj-kondo/blob/master/doc/companies.md">https://github.com/borkdude/clj-kondo/blob/master/doc/companies.md</a>).</p>

<p>Babashka is a scripting environment that can execute a significant subset of JVM
Clojure programs with instant startup. It is used by a individual users and
companies (<a href="https://github.com/borkdude/babashka/issues/254">https://github.com/borkdude/babashka/issues/254</a>). It is currently my
project with the most stars on Github.</p>

<p>Sci is the Clojure interpreter powering babashka and several other projects:
- Bootleg: An HTML templating CLI
- Clj-kondo: Clojure linter
- Chlorine: Atom editor plugin for Clojure
- Malli: Plain data Schemas for Clojure/Script
- Spire: Pragmatic provisioning using Clojure.</p>

<h2 id="datahike">Datahike</h2>

<h3 id="what-are-you-wanting-to-achieve-with-this-funding-1">What are you wanting to achieve with this funding?</h3>

<p>The following requested features can be added with the help of the funding:</p>

<ul>
<li><a href="https://github.com/replikativ/datahike/issues/104">tuple support</a></li>
<li>adjustment of the general API to Datomic’s client API where possible for easier interaction, <a href="https://github.com/replikativ/datahike/issues/196">#196</a>, <a href="https://github.com/replikativ/datahike/issues/188">#188</a></li>
<li><a href="https://github.com/replikativ/datahike/issues/197">attribute predicates and entity specs</a></li>
<li><a href="https://github.com/replikativ/datahike/issues/151">lazy sequences for transactions</a></li>
</ul>

<h3 id="why-is-this-project-important-to-the-clojure-community-1">Why is this project important to the Clojure community?</h3>

<p>Within the Clojure Datalog database world Datahike provides a persistent open source solution for medium-sized projects with a relatively small and extensible code base. It supports a variety of persistent storages like JDBC or Redis. Additionally Datahike supports parts of the well-known Datomic API to better adapt to its functionality.</p>

<p>By adding ClojureScript support in the future, Datahike goes beyond the backend market with a vision of a distributed cross-platform system environment that speaks Datalog everywhere. With two commercial projects in progress, Datahike becomes more battle-tested in production environments.</p>

<p>The core team now consists of five people contributing to the core libraries with more people from the community building useful extensions like for example a <a href="https://github.com/purrgrammer/konserve-rocksdb">RocksDB store</a>, a <a href="https://github.com/replikativ/datahike/issues/205">console for database interaction</a>, or <a href="https://alekcz.gitbook.io/datahike-tuts">tutorials</a>.</p>

<h2 id="malli">Malli</h2>

<h3 id="what-are-you-wanting-to-achieve-with-this-funding-2">What are you wanting to achieve with this funding?</h3>

<p>Malli is pre-alpha, 90% ready for the community. Due to private and business reasons, I haven’t had enough extra time to lead out a robust stable version. With funding, I would have time to:</p>

<p>1) get a stable release out! lot’s of small and some bigger design decisions, tracked via <a href="https://github.com/metosin/malli/issues/116">metosin/malli#116</a></p>

<p>2) help early adopters (users and libraries like reitit, regal, aave and gungnir) to upgrade to use the initial version</p>

<p>After the release, would work on the following:</p>

<p>3) finalize sequence schemas, <a href="https://github.com/metosin/malli/pull/187">https://github.com/metosin/malli/pull/187</a></p>

<p>4) enhance developer tooling:</p>

<ul>
<li>function schemas with clj-kondo integration <a href="https://github.com/metosin/malli/issues/125">https://github.com/metosin/malli/issues/125</a></li>
<li>pull out and reuse the reitit development time error pretty printer as a separate library (<a href="https://github.com/metosin/virhe">https://github.com/metosin/virhe</a>)</li>
</ul>

<p>5) implement pluggable schema inference</p>

<p>6) parsers</p>

<h3 id="why-is-this-project-important-to-the-clojure-community-2">Why is this project important to the Clojure community?</h3>

<p>Clojure is a data-oriented language and we should have a solid fully data-driven schema library too! Besides validation and value transformations, we should be able transform, persist, generate and infer schemas just like normal data. Malli tries to be  develop-friedly library to companion to other data-driven libs like EQL, Bidi, HoneySQL, Hiccup, Integrant, Reagent and Reitit.</p>

<p>Malli has an open development model, design decions are discussed in slack (#malli) and in GitHub issues. Not a top goal, but eventually, Malli should be spec-compatible.</p>

<p>Despite being pre-alpha, malli has 21 contributors, 391 stars on github and 54k+ downloads on Clojars.</p>

<p>There is more background on my <a href="https://www.youtube.com/watch?v=MR83MhWQ61E">ClojureD talk</a>  and <a href="https://www.slideshare.net/metosin/malli-inside-datadriven-schemas">slides</a>.</p>

<h2 id="practicalli">Practicalli</h2>

<h3 id="what-are-you-wanting-to-achieve-with-this-funding-3">What are you wanting to achieve with this funding?</h3>

<p>Create high quality video tutorials to help spread awareness of Clojure to a wider developer audience.  Use selective content from the books to promote Clojure via articles on channels such as DZone, InfoQ, etc.</p>

<p><strong>1) Practicalli Clojure</strong></p>

<p>Extend the existing content with high quality video tutorials of REPL driven development.  Video tutorials will cover Clojure CLI, tools.deps, community tools (20+ tools in practicalli/clojure-deps.edn including kaocha, clj-new, depstar, depot, clj-kondo) unit test runners, test.check and continuous integration.</p>

<p><strong>2) Practicalli Clojure WebApps</strong></p>

<p>Extending the content on server-side webapps using Clojure CLI and tools.deps projects which already covers ring/compojure apps with unit tests, clojure.spec specifications all run through CircleCI continuous integration and deployed to the Cloud.   Adding Reitit, Duct, Juxt Edge and pedestal based projects which include further examples of component lifecycle management (mount, component, integrant). Data stores currently used are H2 and PostgreSQL and will be extended with Datomic and Crux and their associated security &amp; access management.</p>

<p><strong>3) Practicall ClojureScript</strong></p>

<p>Provide clear and up to date guides on ClojureScript development with Reagent and Re-frame, using figwheel-main and shadow-cljs.  Include video tutorials on using CIDER and Calva with these projects for highly interactive development experience.  To extend with Fulcro if time allows.</p>

<p>Funding will also provide more time for deeper subjects on the weekly live broadcast I am currently working on.</p>

<p>All content is freely available under a Creative Commons license. Code examples and projects will be available via the Practicalli GitHub organization and website.</p>

<h3 id="why-is-this-project-important-to-the-clojure-community-3">Why is this project important to the Clojure community?</h3>

<p>Helping the community to grow by providing quality content for people to learn,  share and help others more readily discover the joy of Clojure.</p>              </p>
              <p class="meta"><a href="https://www.clojuriststogether.org/news/q3-2020-funding-announcement/">Permalink</a></p>
            </article>
          </section>
          <section class="entry">
            <aside class="aside">
              <!-- <img src="static/i/favicon.gif" alt="Name of the Site" /> -->
              <h2><a href="http://aphyr.com/" title="Aphyr: Clojure">Kyle Kingsbury</a></h2>
              <p>
August 28, 2020 01:41 PM                <br />
                <a href="http://aphyr.com/">Feed URL</a>
              </p>
            </aside>
            <article class="article">
              <h2><a href="https://aphyr.com/posts/311-clojure-from-the-ground-up-logistics">Clojure from the ground up: logistics</a></h2>
              <p>
<p><em>Previously, we covered <a href="http://aphyr.com/posts/306-clojure-from-the-ground-up-state">state and mutability</a>.</em></p>

<p>Up until now, we’ve been programming primarily at the REPL. However, the
REPL is a limited tool. While it lets us explore a problem interactively, that
interactivity comes at a cost: changing an expression requires retyping the
entire thing, editing multi-line expressions is awkward, and our work vanishes
when we restart the REPL–so we can’t share our programs with others, or run
them again later. Moreover, programs in the REPL are hard to organize. To solve
large problems, we need a way of writing programs <em>durably</em>–so they can be read
and evaluated later.</p>

<p>In addition to the code itself, we often want to store <em>ancillary</em>
information. <em>Tests</em> verify the correctness of the program. <em>Resources</em> like
precomputed databases, lookup tables, images, and text files provide other data
the program needs to run. There may be <em>documentation</em>: instructions for how to use and understand the software. A program may also depend on code from <em>other</em> programs, which we call <em>libraries</em>, <em>packages</em>, or <em>dependencies</em>. In Clojure, we have a standardized way to bind together all these parts into a single directory, called a <em>project</em>.</p>

<h2>Project structure</h2>

<p>We created a project at the start of this book by using Leiningen, the Clojure
project tool.</p>
<code class="block"><span class="nv">$ </span>lein new scratch
</code>
<p><code>scratch</code> is the name of the project, and also the name of the directory where the project’s files live. Inside the project are a few files.</p>
<code class="block"><span class="nv">$ </span><span class="nb">cd </span>scratch; ls
doc  project.clj  README.md  resources  src  target  <span class="nb">test</span>
</code>
<p><code>project.clj</code> defines the project: its name, its version, dependencies, and so
on. Notice the name of the project (<code>scratch</code>) comes first, followed by the
version (<code>0.1.0-SNAPSHOT</code>). <code>-SNAPSHOT</code> versions are for development; you can
change them at any time, and any projects which depend on the snapshot will
pick up the most recent changes. A version which does <em>not</em> end in <code>-SNAPSHOT</code>
is fixed: once published, it always points to the same version of the project.
This allows projects to specify precisely which projects they depend on. For
example, scratch’s <code>project.clj</code> says scratch depends on <code>org.clojure/clojure</code>
version <code>1.5.1</code>.</p>
<code class="block"><span class="p">(</span><span class="kd">defproject </span><span class="nv">scratch</span> <span class="s">"0.1.0-SNAPSHOT"</span>
  <span class="ss">:description</span> <span class="s">"FIXME: write description"</span>
  <span class="ss">:url</span> <span class="s">"http://example.com/FIXME"</span>
  <span class="ss">:license</span> <span class="p">{</span><span class="ss">:name</span> <span class="s">"Eclipse Public License"</span>
            <span class="ss">:url</span> <span class="s">"http://www.eclipse.org/legal/epl-v10.html"</span><span class="p">}</span>
  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">"1.5.1"</span><span class="p">]</span> <span class="p">])</span>
</code>
<p><code>README.md</code> is the first file most people open when they look at a new project,
and Lein generates a generic readme for you to fill in later. We call this kind
of scaffolding or example a “stub”; it’s just there to remind you what sort of
things to write yourself. You’ll notice the readme includes the name of the
project, some notes on what it does and how to use it, a copyright notice where
your name should go, and a license, which sets the legal terms for the use of
the project. By default, Leiningen suggests the Eclipse Public License, which
allows everyone to use and modify the software, so long as they preserve the
license information.</p>

<p>The <code>doc</code> directory is for documentation; sometimes hand-written, sometimes
automatically generated from the source code. <code>resources</code> is for additional
files, like images. <code>src</code> is where Clojure code lives, and <code>test</code> contains the
corresponding tests. Finally, <code>target</code> is where Leiningen stores compiled code,
built packages, and so on.</p>

<h2>Namespaces</h2>

<p>Every lein project starts out with a stub namespace containing a simple function. Let’s take a look at that namespace now–it lives in <code>src/scratch/core.clj</code>:</p>
<code class="block"><span class="p">(</span><span class="kd">ns </span><span class="nv">scratch.core</span><span class="p">)</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">foo</span>
  <span class="s">"I don't do a whole lot."</span>
  <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">println </span><span class="nv">x</span> <span class="s">"Hello, World!"</span><span class="p">))</span>
</code>
<p>The first part of this file defines the <em>namespace</em> we’ll be working in. The <code>ns</code> macro lets the Clojure compiler know that all following code belongs in the <code>scratch.core</code> namespace. Remember, <code>scratch</code> is the name of our project. <code>scratch.core</code> is for the core functions and definitions of the scratch project. As projects expand, we might add new namespaces to <em>separate</em> our work into smaller, more understandable pieces. For instance, Clojure’s primary functions live in <code>clojure.core</code>, but there are auxiliary functions for string processing in <code>clojure.string</code>, functions for interoperating with Java’s input-output system in <code>clojure.java.io</code>, for printing values in <code>clojure.pprint</code>, and so on.</p>

<p><code>def</code>, <code>defn</code>, and peers always work in the scope of a particular <em>namespace</em>. The function <code>foo</code> in <code>scratch.core</code> is <em>different</em> from the function <code>foo</code> in <code>scratch.pad</code>.</p>
<code class="block"><span class="nv">scratch.foo=&gt;</span> <span class="p">(</span><span class="kd">ns </span><span class="nv">scratch.core</span><span class="p">)</span>
<span class="nv">nil</span>
<span class="nv">scratch.core=&gt;</span> <span class="p">(</span><span class="k">def </span><span class="nv">foo</span> <span class="s">"I'm in core"</span><span class="p">)</span>
<span class="o">#</span><span class="ss">'scratch.core/foo</span>
<span class="nv">scratch.core=&gt;</span> <span class="p">(</span><span class="kd">ns </span><span class="nv">scratch.pad</span><span class="p">)</span>
<span class="nv">nil</span>
<span class="nv">scratch.pad=&gt;</span> <span class="p">(</span><span class="k">def </span><span class="nv">foo</span> <span class="s">"I'm in pad!"</span><span class="p">)</span>
<span class="o">#</span><span class="ss">'scratch.pad/foo</span>
</code>
<p>Notice the full names of these vars are different: <code>scratch.core/foo</code> vs <code>scratch.pad/foo</code>. You can always refer to a var by its fully qualified name: the namespace, followed by a slash <code>/</code>, followed by the short name.</p>

<p>Inside a namespace, symbols resolve to variables which are defined in that namespace. So in <code>scratch.pad</code>, <code>foo</code> refers to <code>scratch.pad/foo</code>.</p>
<code class="block"><span class="nv">scratch.pad=&gt;</span> <span class="nv">foo</span>
<span class="s">"I'm in pad!"</span>
</code>
<p>Namespaces automatically include <code>clojure.core</code> by default; which is where all the standard functions, macros, and special forms come from. <code>let</code>, <code>defn</code>, <code>filter</code>, <code>vector</code>, etc: all live in <code>clojure.core</code>, but are automatically <em>included</em> in new namespaces so we can refer to them by their short names.</p>

<p>Notice that the values for <code>foo</code> we defined in <code>scratch.pad</code> and <code>scratch.core</code> aren’t available in other namespaces, like <code>user</code>.</p>
<code class="block"><span class="nv">scratch.pad=&gt;</span> <span class="p">(</span><span class="kd">ns </span><span class="nv">user</span><span class="p">)</span>
<span class="nv">nil</span>
<span class="nv">user=&gt;</span> <span class="nv">foo</span>

<span class="nv">CompilerException</span> <span class="nv">java.lang.RuntimeException</span><span class="err">:</span> <span class="nv">Unable</span> <span class="nv">to</span> <span class="nb">resolve </span><span class="nv">symbol</span><span class="err">:</span> <span class="nv">foo</span> <span class="nv">in</span> <span class="nv">this</span> <span class="nv">context</span>, <span class="nv">compiling</span><span class="err">:</span><span class="p">(</span><span class="nf">NO_SOURCE_PATH</span><span class="ss">:1:602</span><span class="p">)</span>
</code>
<p>To access things from other namespaces, we have to <em>require</em> them in the namespace definition.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">ns </span><span class="nv">user</span> <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">scratch.core</span><span class="p">]))</span>
<span class="nv">nil</span>
<span class="nv">user=&gt;</span> <span class="nv">scratch.core/foo</span>
<span class="s">"I'm in core"</span>
</code>
<p>The <code>:require</code> part of the <code>ns</code> declaration told the compiler that the <code>user</code> namespace needed access to <code>scratch.core</code>. We could then refer to the fully qualified name <code>scratch.core/foo</code>.</p>

<p>Often, writing out the full namespace is cumbersome–so you can give a short alias for a namespace like so:</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">ns </span><span class="nv">user</span> <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">scratch.core</span> <span class="ss">:as</span> <span class="nv">c</span><span class="p">]))</span>
<span class="nv">nil</span>
<span class="nv">user=&gt;</span> <span class="nv">c/foo</span>
<span class="s">"I'm in core"</span>
</code>
<p>The <code>:as</code> directive indicates that anywhere we write <code>c/something</code>, the compiler should expand that to <code>scratch.core/something</code>. If you plan on using a var from another namespace often, you can <em>refer</em> it to the local namespace–which means you may omit the namespace qualifier entirely.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">ns </span><span class="nv">user</span> <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">scratch.core</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">foo</span><span class="p">]]))</span>
<span class="nv">nil</span>
<span class="nv">user=&gt;</span> <span class="nv">foo</span>
<span class="s">"I'm in core"</span>
</code>
<p>You can refer functions into the current namespace by listing them: <code>[foo bar ...]</code>. Alternatively, you can suck in <em>every</em> function from another namespace by saying <code>:refer :all</code>:</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="kd">ns </span><span class="nv">user</span> <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">scratch.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
<span class="nv">nil</span>
<span class="nv">user=&gt;</span> <span class="nv">foo</span>
<span class="s">"I'm in core"</span>
</code>
<p>Namespaces <em>control complexity</em> by isolating code into more understandable, related pieces. They make it easier to read code by keeping similar things together, and unrelated things apart. By making dependencies between namespaces explicit, they make it clear how groups of functions relate to one another.</p>

<p>If you’ve worked with Erlang, Modula-2, Haskell, Perl, or ML, you’ll find namespaces analogous to <em>modules</em> or <em>packages</em>. Namespaces are often large, encompassing hundreds of functions; and most projects use only a handful of namespaces.</p>

<p>By contrast, object-oriented programming languages like Java, Scala, Ruby, and Objective C organize code in <em>classes</em>, which combine <em>names</em> and <em>state</em> in a single construct. Because all functions in a class operate on the same state, object-oriented languages tend to have <em>many</em> classes with <em>fewer</em> functions in each. It’s not uncommon for a typical Java project to define hundreds or thousands of classes containing only one or two functions each. If you come from an object-oriented language, it can feel a bit unusual to combine so many functions in a single scope–but because functional programs isolate state differently, this is <em>normal</em>. If, on the other hand, you move <em>to</em> an object-oriented language after Clojure, remember that OO languages compose differently. Objects with hundreds of functions are usually considered unwieldy and should be split into smaller pieces.</p>

<h2>Code and tests</h2>

<p>It’s perfectly fine to test small programs in the REPL. We’ve written
and refined hundreds of functions that way: by calling the function and seeing
what happens. However, as programs grow in scope and complexity, testing them
by hand becomes harder and harder. If you change the behavior of a function
which ten other functions rely on, you may have to re-test <em>all ten</em> by hand. In real programs, a small change can alter thousands of distinct behaviors, all of which should be verified.</p>

<p>Wherever possible, we want to <em>automate</em> software tests–making the test itself
<em>another program</em>. If the test suite runs in a matter of seconds, we can make
changes freely–re-running the tests continuously to verify that everything
still works.</p>

<p>As a simple example, let’s write and test a single function in <code>src/scratch/core.clj</code>. How about exponentiation–raising a number to the given power?</p>
<code class="block"><span class="p">(</span><span class="kd">ns </span><span class="nv">scratch.core</span><span class="p">)</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">pow</span>
  <span class="s">"Raises base to the given power. For instance, (pow 3 2) returns three squared, or nine."</span>
  <span class="p">[</span><span class="nv">base</span> <span class="nv">power</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">apply * </span><span class="p">(</span><span class="nb">repeat </span><span class="nv">base</span> <span class="nv">power</span><span class="p">)))</span>
</code>
<p>So we <em>repeat</em> the base <em>power</em> times, then call <code>*</code> with that sequence of bases to multiply them all together. Seems straightforward enough. Now we need to test it.</p>

<p>By default, all lein projects come with a simple test stub. Let’s see it in action by running <code>lein test</code>.</p>
<code class="block">aphyr@waterhouse:~/scratch<span class="nv">$ </span>lein <span class="nb">test</span>

lein <span class="nb">test </span>scratch.core-test

lein <span class="nb">test</span> :only scratch.core-test/a-test

FAIL in <span class="o">(</span>a-test<span class="o">)</span> <span class="o">(</span>core_test.clj:7<span class="o">)</span>
FIXME, I fail.
expected: <span class="o">(=</span> 0 1<span class="o">)</span>
  actual: <span class="o">(</span>not <span class="o">(=</span> 0 1<span class="o">))</span>

Ran 1 tests containing 1 assertions.
1 failures, 0 errors.
Tests failed.
</code>
<p>A <em>failure</em> is when a test returns the wrong value. An <em>error</em> is when a test throws an exception. In this case, the test named <code>a-test</code>, in the file <code>core_test.clj</code>, on line 7, failed. That test expected zero to be equal to one–but found that 0 and 1 were (in point of fact) not equal. Let’s take a look at that test, in <code>test/scratch/core_test.clj</code>.</p>
<code class="block"><span class="p">(</span><span class="kd">ns </span><span class="nv">scratch.core-test</span>
  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.test</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
            <span class="p">[</span><span class="nv">scratch.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>

<span class="p">(</span><span class="nf">deftest</span> <span class="nv">a-test</span>
  <span class="p">(</span><span class="nf">testing</span> <span class="s">"FIXME, I fail."</span>
    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="mi">1</span><span class="p">))))</span>
</code>
<p>These tests live in a namespace too! Notice that namespaces and file names match up: <code>scratch.core</code> lives in <code>src/scratch/core.clj</code>, and <code>scratch.core-test</code> lives in <code>test/scratch/core_test.clj</code>. Dashes (<code>-</code>) in namespaces correspond to underscores (<code>_</code>) in filenames, and dots (<code>.</code>) correspond to directory separators (<code>/</code>).</p>

<p>The <code>scratch.core-test</code> namespace is responsible for testing things in <code>scratch.core</code>. Notice that it requires two namespaces: <code>clojure.test</code>, which provides testing functions and macros, and <code>scratch.core</code>, which is the namespace we want to test.</p>

<p>Then we define a test using <code>deftest</code>. <code>deftest</code> takes a symbol as a test name, and then any number of expressions to evaluate. We can use <code>testing</code> to split up tests into smaller pieces. If a test fails, <code>lein test</code> will print out the enclosing <code>deftest</code> and <code>testing</code> names, to make it easier to figure out what went wrong.</p>

<p>Let’s change this test so that it passes. 0 should equal 0.</p>
<code class="block"><span class="p">(</span><span class="nf">deftest</span> <span class="nv">a-test</span>
  <span class="p">(</span><span class="nf">testing</span> <span class="s">"Numbers are equal to themselves, right?"</span>
    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="mi">0</span><span class="p">))))</span>
</code><code class="block">aphyr@waterhouse:~/scratch<span class="nv">$ </span>lein <span class="nb">test</span>

lein <span class="nb">test </span>scratch.core-test

Ran 1 tests containing 1 assertions.
0 failures, 0 errors.
</code>
<p>Wonderful! Now let’s test the <code>pow</code> function. I like to start with a really basic case and work my way up to more complicated ones. 1<sup>1</sup> is 1, so:</p>
<code class="block"><span class="p">(</span><span class="nf">deftest</span> <span class="nv">pow-test</span>
  <span class="p">(</span><span class="nf">testing</span> <span class="s">"unity"</span>
    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="p">(</span><span class="nf">pow</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">)))))</span>
</code><code class="block">aphyr@waterhouse:~/scratch<span class="nv">$ </span>lein <span class="nb">test</span>

lein <span class="nb">test </span>scratch.core-test

Ran 1 tests containing 1 assertions.
0 failures, 0 errors.
</code>
<p>Excellent. How about something harder?</p>
<code class="block"><span class="p">(</span><span class="nf">deftest</span> <span class="nv">pow-test</span>
  <span class="p">(</span><span class="nf">testing</span> <span class="s">"unity"</span>
    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="p">(</span><span class="nf">pow</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">))))</span>

  <span class="p">(</span><span class="nf">testing</span> <span class="s">"square integers"</span>
    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="mi">9</span> <span class="p">(</span><span class="nf">pow</span> <span class="mi">3</span> <span class="mi">2</span><span class="p">)))))</span>
</code><code class="block">aphyr@waterhouse:~/scratch<span class="nv">$ </span>lein <span class="nb">test</span>

lein <span class="nb">test </span>scratch.core-test

lein <span class="nb">test</span> :only scratch.core-test/pow-test

FAIL in <span class="o">(</span>pow-test<span class="o">)</span> <span class="o">(</span>core_test.clj:10<span class="o">)</span>
square integers
expected: <span class="o">(=</span> 9 <span class="o">(</span>pow 3 2<span class="o">))</span>
  actual: <span class="o">(</span>not <span class="o">(=</span> 9 8<span class="o">))</span>

Ran 1 tests containing 2 assertions.
1 failures, 0 errors.
Tests failed.
</code>
<p>That’s odd. 3<sup>2</sup> should be 9, not 8. Let’s double-check our code in the REPL. <code>base</code> was 3, and <code>power</code> was 2, so…</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">repeat </span><span class="mi">3</span> <span class="mi">2</span><span class="p">)</span>
<span class="p">(</span><span class="mi">2</span> <span class="mi">2</span> <span class="mi">2</span><span class="p">)</span>
<span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="mi">2</span> <span class="mi">2</span><span class="p">)</span>
<span class="mi">8</span>
</code>
<p>Ah, there’s the problem. We’re mis-using <code>repeat</code>. Instead of repeating 3 twice, we repeated 2 thrice.</p>
<code class="block">user=&gt; (doc repeat)
-------------------------
clojure.core/repeat
([x] [n x])
  Returns a lazy (infinite!, or length n if supplied) sequence of xs.</code>
<p>Let’s redefine <code>pow</code> with the correct arguments to <code>repeat</code>:</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">pow</span>
  <span class="s">"Raises base to the given power. For instance, (pow 3 2) returns three</span>
<span class="s">  squared, or nine."</span>
  <span class="p">[</span><span class="nv">base</span> <span class="nv">power</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">apply * </span><span class="p">(</span><span class="nb">repeat </span><span class="nv">power</span> <span class="nv">base</span><span class="p">)))</span>
</code>
<p>How about 0<sup>0?</sup> By convention, mathematicians define 0<sup>0</sup> as 1.</p>
<code class="block"><span class="p">(</span><span class="nf">deftest</span> <span class="nv">pow-test</span>
  <span class="p">(</span><span class="nf">testing</span> <span class="s">"unity"</span>
    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="p">(</span><span class="nf">pow</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">))))</span>

  <span class="p">(</span><span class="nf">testing</span> <span class="s">"square integers"</span>
    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="mi">9</span> <span class="p">(</span><span class="nf">pow</span> <span class="mi">3</span> <span class="mi">2</span><span class="p">))))</span>

  <span class="p">(</span><span class="nf">testing</span> <span class="s">"0^0"</span>
    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="p">(</span><span class="nf">pow</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">)))))</span>
</code><code class="block">aphyr@waterhouse:~/scratch$ lein test

lein test scratch.core-test

Ran 1 tests containing 3 assertions.
0 failures, 0 errors.</code>
<p>Hey, what do you know? It works! But <em>why</em>?</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">repeat </span><span class="mi">0</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">()</span>
</code>
<p>What happens when we call <code>*</code> with an <em>empty</em> list of arguments?</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">*</span><span class="p">)</span>
<span class="mi">1</span>
</code>
<p>Remember when we talked about how the zero-argument forms of <code>+</code>, and <code>*</code> made some definitions simpler? This is one of those times. We didn’t have to define a special exception for zero powers because <code>(*)</code> returns the multiplicative identity 1, by convention.</p>

<h2>Exploring data</h2>

<p>The last bit of logistics we need to talk about is <em>working with other people’s code</em>. Clojure projects, like most modern programming environments, are built to work together. We can use libraries to parse data, solve mathematical problems, render graphics, perform simulations, talk to robots, or predict the weather. As a quick example, I’d like to imagine that you and I are public-health researchers trying to identify the best location for an ad campaign to reduce drunk driving.</p>

<p>The FBI’s <a href="http://www.fbi.gov/about-us/cjis/ucr/ucr">Uniform Crime Reporting</a> database tracks the annual tally of different types of arrests, broken down by county–but the data files provided by the FBI are a mess to work with. Helpfully, <a href="http://emdasheveryone.wordpress.com/">Matt Aliabadi</a> has organized the UCR’s somewhat complex format into nice, normalized files in a data format called JSON, and made them available <a href="https://github.com/maliabadi/ucr-json">on Github</a>. Let’s download the most recent year’s <a href="https://raw2.github.com/maliabadi/ucr-json/master/data/parsed/normalized/2008.json">normalized data</a>, and save it in the <code>scratch</code> directory.</p>

<p>What’s <em>in</em> this file, anyway? Let’s take a look at the first few lines using <code>head</code>:</p>
<code class="block"><span class="err">aphyr@waterhouse:~/scratch$</span> <span class="err">head</span> <span class="mi">2008</span><span class="err">.json</span>
<span class="p">[</span>
  <span class="p">{</span>
    <span class="nt">"icpsr_study_number"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="nt">"icpsr_edition_number"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">"icpsr_part_number"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">"icpsr_sequential_case_id_number"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">"fips_state_code"</span><span class="p">:</span> <span class="s2">"01"</span><span class="p">,</span>
    <span class="nt">"fips_county_code"</span><span class="p">:</span> <span class="s2">"001"</span><span class="p">,</span>
    <span class="nt">"county_population"</span><span class="p">:</span> <span class="mi">52417</span><span class="p">,</span>
    <span class="nt">"number_of_agencies_in_county"</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</code>
<p>This is a data format called <a href="http://json.org/">JSON</a>, and it looks a lot like Clojure’s data structures. That’s the start of a vector on the first line, and the second line starts a map. Then we’ve got string keys like <code>"icpsr_study_number"</code>, and values which look like <code>null</code> (<code>nil</code>), numbers, or strings. But in order to <em>work</em> with this file, we’ll need to <em>parse</em> it into Clojure data structures. For that, we can use a JSON parsing library, like <a href="https://github.com/dakrone/cheshire">Cheshire</a>.</p>

<p>Cheshire, like most Clojure libraries, is published on an internet repository called <a href="http://clojars.org">Clojars</a>. To include it in our scratch project, all we have to do is add open <code>project.clj</code> in a text editor, and add a line specifying that we want to use a particular version of Cheshire.</p>
<code class="block"><span class="p">(</span><span class="kd">defproject </span><span class="nv">scratch</span> <span class="s">"0.1.0-SNAPSHOT"</span>
  <span class="ss">:description</span> <span class="s">"Just playing around"</span>
  <span class="ss">:url</span> <span class="s">"http://example.com/FIXME"</span>
  <span class="ss">:license</span> <span class="p">{</span><span class="ss">:name</span> <span class="s">"Eclipse Public License"</span>
            <span class="ss">:url</span> <span class="s">"http://www.eclipse.org/legal/epl-v10.html"</span><span class="p">}</span>
  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">"1.5.1"</span><span class="p">]</span>
                 <span class="p">[</span><span class="nv">cheshire</span> <span class="s">"5.3.1"</span><span class="p">]])</span>
</code>
<p>Now we’ll exit the REPL with Control+D (^D), and restart it with <code>lein repl</code>. Leiningen, the Clojure package manager, will automatically download Cheshire from Clojars and make it available in the new REPL session.</p>

<p>Now let’s figure out how to parse the JSON file. Looking at <a href="https://github.com/dakrone/cheshire">Cheshire’s README</a> shows an example that looks helpful:</p>
<code class="block"><span class="c1">;; parse some json and get keywords back</span>
<span class="p">(</span><span class="nf">parse-string</span> <span class="s">"{\"foo\":\"bar\"}"</span> <span class="nv">true</span><span class="p">)</span>
<span class="c1">;; =&gt; {:foo "bar"}</span>
</code>
<p>So Cheshire includes a parse-string function which can take a string and return a data structure. How can we get a string out of a file? Using <code>slurp</code>:</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">use</span> <span class="ss">'cheshire.core</span><span class="p">)</span>
<span class="nv">nil</span>
<span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">parse-string</span> <span class="p">(</span><span class="nb">slurp </span><span class="s">"2008.json"</span><span class="p">))</span>
<span class="nv">...</span>
</code>
<p>Woooow, that’s a lot of data! Let’s chop it down to something more manageable. How about the first entry?</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nf">parse-string</span> <span class="p">(</span><span class="nb">slurp </span><span class="s">"2008.json"</span><span class="p">)))</span>
<span class="p">{</span><span class="s">"syntheticdrug_salemanufacture"</span> <span class="mi">1</span>, <span class="s">"all_other_offenses_except_traffic"</span> <span class="mi">900</span>, <span class="s">"arson"</span> <span class="mi">3</span>, <span class="nv">...</span><span class="p">}</span>
<span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="s">"2008.json"</span> <span class="nb">slurp </span><span class="nv">parse-string</span> <span class="nv">first</span><span class="p">)</span>
</code>
<p>It’d be nicer if this data used keywords instead of strings for its keys. Let’s use the second argument to Chesire’s <code>parse-string</code> to convert all the keys in maps to keywords.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nf">parse-string</span> <span class="p">(</span><span class="nb">slurp </span><span class="s">"2008.json"</span><span class="p">)</span> <span class="nv">true</span><span class="p">))</span>
<span class="p">{</span><span class="ss">:other_assaults</span> <span class="mi">288</span>, <span class="ss">:gambling_all_other</span> <span class="mi">0</span>, <span class="ss">:arson</span> <span class="mi">3</span>, <span class="nv">...</span> <span class="ss">:drunkenness</span> <span class="mi">108</span><span class="p">}</span>
</code>
<p>Since we’re going to be working with this dataset over and over again, let’s bind it to a variable for easy re-use.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">def </span><span class="nv">data</span> <span class="p">(</span><span class="nf">parse-string</span> <span class="p">(</span><span class="nb">slurp </span><span class="s">"2008.json"</span><span class="p">)</span> <span class="nv">true</span><span class="p">))</span>
<span class="o">#</span><span class="ss">'user/data</span>
</code>
<p>Now we’ve got a big long vector of counties, each represented by a map–but we’re just interested in the <em>DUIs</em> of each one. What does that look like? Let’s <em>map</em> each county to its <code>:driving_under_influence</code>.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">data</span> <span class="p">(</span><span class="nb">map </span><span class="ss">:driving_under_influence</span><span class="p">))</span>
<span class="p">(</span><span class="mi">198</span> <span class="mi">1095</span> <span class="mi">114</span> <span class="mi">98</span> <span class="mi">135</span> <span class="mi">4</span> <span class="mi">122</span> <span class="mi">587</span> <span class="mi">204</span> <span class="mi">53</span> <span class="mi">177</span> <span class="nv">...</span>
</code>
<p>What’s the most any county has ever reported?</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">data</span> <span class="p">(</span><span class="nb">map </span><span class="ss">:driving_under_influence</span><span class="p">)</span> <span class="p">(</span><span class="nb">apply </span><span class="nv">max</span><span class="p">))</span>
<span class="mi">45056</span>
</code>
<p>45056 counts in one year? Wow! What about the second-worst county? The easiest way to find the <em>top n</em> counties is to <em>sort</em> the list, then look at the final elements.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">data</span> <span class="p">(</span><span class="nb">map </span><span class="ss">:driving_under_influence</span><span class="p">)</span> <span class="nb">sort </span><span class="p">(</span><span class="nf">take-last</span> <span class="mi">10</span><span class="p">))</span>
<span class="p">(</span><span class="mi">8589</span> <span class="mi">10432</span> <span class="mi">10443</span> <span class="mi">10814</span> <span class="mi">11439</span> <span class="mi">13983</span> <span class="mi">17572</span> <span class="mi">18562</span> <span class="mi">26235</span> <span class="mi">45056</span><span class="p">)</span>
</code>
<p>So the top 10 counties range from 8549 counts to 45056 counts. What’s the <em>most common</em> count? Clojure comes with a built-in function called <code>frequencies</code> which takes a sequence of elements, and returns a map from each element to how many times it appeared in the sequence.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">data</span> <span class="p">(</span><span class="nb">map </span><span class="ss">:driving_under_influence</span><span class="p">)</span> <span class="nv">frequencies</span><span class="p">)</span>
<span class="p">{</span><span class="mi">0</span> <span class="mi">227</span>, <span class="mi">1024</span> <span class="mi">1</span>, <span class="mi">45056</span> <span class="mi">1</span>, <span class="mi">32</span> <span class="mi">15</span>, <span class="mi">2080</span> <span class="mi">1</span>, <span class="mi">64</span> <span class="mi">12</span> <span class="nv">...</span>
</code>
<p>Now let’s take those [drunk-driving, frequency] pairs and sort them by key to produce a <em>histogram</em>. <code>sort-by</code> takes a function to apply to each element in the collection–in this case, a key-value pair–and returns something that can be sorted, like a number. We’ll choose the <code>key</code> function to extract the key from each key-value pair, effectively sorting the counties by number of reported incidents.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">data</span> <span class="p">(</span><span class="nb">map </span><span class="ss">:driving_under_influence</span><span class="p">)</span> <span class="nv">frequencies</span> <span class="p">(</span><span class="nb">sort-by </span><span class="nv">key</span><span class="p">)</span> <span class="nv">pprint</span><span class="p">)</span>
<span class="p">([</span><span class="mi">0</span> <span class="mi">227</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">1</span> <span class="mi">24</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">2</span> <span class="mi">17</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">3</span> <span class="mi">20</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">4</span> <span class="mi">17</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">5</span> <span class="mi">24</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">6</span> <span class="mi">23</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">7</span> <span class="mi">23</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">8</span> <span class="mi">17</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">9</span> <span class="mi">19</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">10</span> <span class="mi">29</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">11</span> <span class="mi">20</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">12</span> <span class="mi">18</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">13</span> <span class="mi">21</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">14</span> <span class="mi">25</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">15</span> <span class="mi">13</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">16</span> <span class="mi">18</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">17</span> <span class="mi">16</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">18</span> <span class="mi">17</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">19</span> <span class="mi">11</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">20</span> <span class="mi">8</span><span class="p">]</span>
 <span class="nv">...</span>
</code>
<p>So a ton of counties (227 out of 3172 total) report no drunk driving; a few hundred have one incident, a moderate number have 10-20, and it falls off from there. This is a common sort of shape in statistics; often a hallmark of an exponential distribution.</p>

<p>How about the 10 worst counties, all the way out on the end of the curve?</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">data</span> <span class="p">(</span><span class="nb">map </span><span class="ss">:driving_under_influence</span><span class="p">)</span> <span class="nv">frequencies</span> <span class="p">(</span><span class="nb">sort-by </span><span class="nv">key</span><span class="p">)</span> <span class="p">(</span><span class="nf">take-last</span> <span class="mi">10</span><span class="p">)</span> <span class="nv">pprint</span><span class="p">)</span>
<span class="p">([</span><span class="mi">8589</span> <span class="mi">1</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">10432</span> <span class="mi">1</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">10443</span> <span class="mi">1</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">10814</span> <span class="mi">1</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">11439</span> <span class="mi">1</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">13983</span> <span class="mi">1</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">17572</span> <span class="mi">1</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">18562</span> <span class="mi">1</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">26235</span> <span class="mi">1</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">45056</span> <span class="mi">1</span><span class="p">])</span>
</code>
<p>So it looks like 45056 is high, but there are 8 other counties with tens of thousands of reports too. Let’s back up to the original dataset, and sort it by DUIs:</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">data</span> <span class="p">(</span><span class="nb">sort-by </span><span class="ss">:driving_under_influence</span><span class="p">)</span> <span class="p">(</span><span class="nf">take-last</span> <span class="mi">10</span><span class="p">)</span> <span class="nv">pprint</span><span class="p">)</span>
<span class="p">({</span><span class="ss">:other_assaults</span> <span class="mi">3096</span>,
  <span class="ss">:gambling_all_other</span> <span class="mi">3</span>,
  <span class="ss">:arson</span> <span class="mi">106</span>,
  <span class="ss">:have_stolen_property</span> <span class="mi">698</span>,
  <span class="ss">:syntheticdrug_salemanufacture</span> <span class="mi">0</span>,
  <span class="ss">:icpsr_sequential_case_id_number</span> <span class="mi">220</span>,
  <span class="ss">:drug_abuse_salemanufacture</span> <span class="mi">1761</span>,
  <span class="nv">...</span>
</code>
<p>What we’re looking for is the county names, but it’s a little hard to read these enormous maps. Let’s take a look at just the keys that define each county, and see which ones might be useful. We’ll take this list of counties, map each one to a list of its keys, and concatenate those lists together into one big long list. <code>mapcat</code> maps and concatenates in a single step. We expect the same keys to show up over and over again, so we’ll remove duplicates by merging all those keys <code>into</code> a <code>sorted-set</code>.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">data</span> <span class="p">(</span><span class="nb">sort-by </span><span class="ss">:driving_under_influence</span><span class="p">)</span> <span class="p">(</span><span class="nf">take-last</span> <span class="mi">10</span><span class="p">)</span> <span class="p">(</span><span class="nb">mapcat </span><span class="nv">keys</span><span class="p">)</span> <span class="p">(</span><span class="nb">into </span><span class="p">(</span><span class="nf">sorted-set</span><span class="p">))</span> <span class="nv">pprint</span><span class="p">)</span>
<span class="o">#</span><span class="p">{</span><span class="ss">:aggravated_assaults</span> <span class="ss">:all_other_offenses_except_traffic</span> <span class="ss">:arson</span>
  <span class="ss">:auto_thefts</span> <span class="ss">:bookmaking_horsesport</span> <span class="ss">:burglary</span> <span class="ss">:county_population</span>
  <span class="ss">:coverage_indicator</span> <span class="ss">:curfew_loitering_laws</span> <span class="ss">:disorderly_conduct</span>
  <span class="ss">:driving_under_influence</span> <span class="ss">:drug_abuse_salemanufacture</span>
  <span class="ss">:drug_abuse_violationstotal</span> <span class="ss">:drug_possession_other</span>
  <span class="ss">:drug_possession_subtotal</span> <span class="ss">:drunkenness</span> <span class="ss">:embezzlement</span>
  <span class="ss">:fips_county_code</span> <span class="ss">:fips_state_code</span> <span class="ss">:forgerycounterfeiting</span> <span class="ss">:fraud</span>
  <span class="ss">:gambling_all_other</span> <span class="ss">:gambling_total</span> <span class="ss">:grand_total</span>
  <span class="ss">:have_stolen_property</span> <span class="ss">:icpsr_edition_number</span> <span class="ss">:icpsr_part_number</span>
  <span class="ss">:icpsr_sequential_case_id_number</span> <span class="ss">:icpsr_study_number</span> <span class="ss">:larceny</span>
  <span class="ss">:liquor_law_violations</span> <span class="ss">:marijuana_possession</span>
  <span class="ss">:marijuanasalemanufacture</span> <span class="ss">:multicounty_jurisdiction_flag</span> <span class="ss">:murder</span>
  <span class="ss">:number_of_agencies_in_county</span> <span class="ss">:numbers_lottery</span>
  <span class="ss">:offenses_against_family_child</span> <span class="ss">:opiumcocaine_possession</span>
  <span class="ss">:opiumcocainesalemanufacture</span> <span class="ss">:other_assaults</span> <span class="ss">:otherdang_nonnarcotics</span>
  <span class="ss">:part_1_total</span> <span class="ss">:property_crimes</span> <span class="ss">:prostitutioncomm_vice</span> <span class="ss">:rape</span> <span class="ss">:robbery</span>
  <span class="ss">:runaways</span> <span class="ss">:sex_offenses</span> <span class="ss">:suspicion</span> <span class="ss">:synthetic_narcoticspossession</span>
  <span class="ss">:syntheticdrug_salemanufacture</span> <span class="ss">:vagrancy</span> <span class="ss">:vandalism</span> <span class="ss">:violent_crimes</span>
  <span class="ss">:weapons_violations</span><span class="p">}</span>
</code>
<p>Ah, <code>:fips_county_code</code> and <code>:fips_state_code</code> look promising. Let’s compact the dataset to just drunk driving and those codes, using <code>select-keys</code>.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">data</span> <span class="p">(</span><span class="nb">sort-by </span><span class="ss">:driving_under_influence</span><span class="p">)</span> <span class="p">(</span><span class="nf">take-last</span> <span class="mi">10</span><span class="p">)</span> <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">select-keys </span><span class="nv">%</span> <span class="p">[</span><span class="ss">:driving_under_influence</span> <span class="ss">:fips_county_code</span> <span class="ss">:fips_state_code</span><span class="p">]))</span> <span class="nv">pprint</span><span class="p">)</span>
<span class="p">({</span><span class="ss">:fips_state_code</span> <span class="s">"06"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"067"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">8589</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"48"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"201"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">10432</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"32"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"003"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">10443</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"06"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"065"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">10814</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"53"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"033"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">11439</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"06"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"071"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">13983</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"06"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"059"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">17572</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"06"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"073"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">18562</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"04"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"013"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">26235</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"06"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"037"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">45056</span><span class="p">})</span>
</code>
<p>Now we’re getting somewhere–but we need a way to interpret these state and county codes. Googling for “FIPS” led me to Wikipedia’s account of the <a href="http://en.wikipedia.org/wiki/FIPS_county_code">FIPS county code system</a>, and the NOAA’s ERDDAP service, which has a table <a href="http://coastwatch.pfeg.noaa.gov/erddap/convert/fipscounty.html">mapping FIPS codes to state and county names</a>. Let’s save that file as <a href="http://coastwatch.pfeg.noaa.gov/erddap/convert/fipscounty.json">fips.json</a>.</p>

<p>Now we’ll slurp that file into the REPL and parse it, just like we did with the crime dataset.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="k">def </span><span class="nv">fips</span> <span class="p">(</span><span class="nf">parse-string</span> <span class="p">(</span><span class="nb">slurp </span><span class="s">"fips.json"</span><span class="p">)</span> <span class="nv">true</span><span class="p">))</span>
</code>
<p>Let’s take a quick look at the structure of this data:</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">keys </span><span class="nv">fips</span><span class="p">)</span>
<span class="p">(</span><span class="ss">:table</span><span class="p">)</span>
<span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">keys </span><span class="p">(</span><span class="ss">:table</span> <span class="nv">fips</span><span class="p">))</span>
<span class="p">(</span><span class="ss">:columnNames</span> <span class="ss">:columnTypes</span> <span class="ss">:rows</span><span class="p">)</span>
<span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">fips</span> <span class="ss">:table</span> <span class="ss">:columnNames</span><span class="p">)</span>
<span class="p">[</span><span class="s">"FIPS"</span> <span class="s">"Name"</span><span class="p">]</span>
</code>
<p>Great, so we expect the rows to be a list of FIPS code and Name.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">fips</span> <span class="ss">:table</span> <span class="ss">:rows</span> <span class="p">(</span><span class="nb">take </span><span class="mi">3</span><span class="p">)</span> <span class="nv">pprint</span><span class="p">)</span>
<span class="p">([</span><span class="s">"02000"</span> <span class="s">"AK"</span><span class="p">]</span>
 <span class="p">[</span><span class="s">"02013"</span> <span class="s">"AK, Aleutians East"</span><span class="p">]</span>
 <span class="p">[</span><span class="s">"02016"</span> <span class="s">"AK, Aleutians West"</span><span class="p">])</span>
</code>
<p>Perfect. Now that’s we’ve done some exploratory work in the REPL, let’s shift back to an editor. Create a new file in <code>src/scratch/crime.clj</code>:</p>
<code class="block"><span class="p">(</span><span class="kd">ns </span><span class="nv">scratch.crime</span>
  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">cheshire.core</span> <span class="ss">:as</span> <span class="nv">json</span><span class="p">]))</span>

<span class="p">(</span><span class="k">def </span><span class="nv">fips</span>
  <span class="s">"A map of FIPS codes to their county names."</span>
  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nf">json/parse-string</span> <span class="p">(</span><span class="nb">slurp </span><span class="s">"fips.json"</span><span class="p">)</span> <span class="nv">true</span><span class="p">)</span>
       <span class="ss">:table</span>
       <span class="ss">:rows</span>
       <span class="p">(</span><span class="nb">into </span><span class="p">{})))</span>
</code>
<p>We’re just taking a snippet we wrote in the REPL–parsing the FIPS dataset–and writing it down for use as a part of a bigger program. We use <code>(into {})</code> to convert the sequence of <code>[fips, name]</code> pairs into a map, just like we used <code>into (sorted-set)</code> to merge a list of keywords into a set earlier. <code>into</code> works just like <code>conj</code>, repeated over and over again, and is an incredibly useful tool for building up collections of things.</p>

<p>Back in the REPL, let’s check if that worked:</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">use</span> <span class="ss">'scratch.crime</span> <span class="ss">:reload</span><span class="p">)</span>
<span class="nv">nil</span>
<span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">fips</span> <span class="s">"10001"</span><span class="p">)</span>
<span class="s">"DE, Kent"</span>
</code>
<p>Remember, maps act like functions in Clojure, so we can use the <code>fips</code> map to look up the names of counties efficiently.</p>

<p>We also have to load the UCR crime file–so let’s split that load-and-parse code into its own function:</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">load-json</span>
  <span class="s">"Given a filename, reads a JSON file and returns it, parsed, with keywords."</span>
  <span class="p">[</span><span class="nv">file</span><span class="p">]</span>
  <span class="p">(</span><span class="nf">json/parse-string</span> <span class="p">(</span><span class="nb">slurp </span><span class="nv">file</span><span class="p">)</span> <span class="nv">true</span><span class="p">))</span>

<span class="p">(</span><span class="k">def </span><span class="nv">fips</span>
  <span class="s">"A map of FIPS codes to their county names."</span>
  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="s">"fips.json"</span>
       <span class="nv">load-json</span>
       <span class="ss">:table</span>
       <span class="ss">:rows</span>
       <span class="p">(</span><span class="nb">into </span><span class="p">{})))</span>
</code>
<p>Now we can re-use <code>load-json</code> to load the UCR crime file.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">most-duis</span>
  <span class="s">"Given a JSON filename of UCR crime data for a particular year, finds the</span>
<span class="s">  counties with the most DUIs."</span>
  <span class="p">[</span><span class="nv">file</span><span class="p">]</span>
  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">file</span>
       <span class="nv">load-json</span>
       <span class="p">(</span><span class="nb">sort-by </span><span class="ss">:driving_under_influence</span><span class="p">)</span>
       <span class="p">(</span><span class="nf">take-last</span> <span class="mi">10</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">select-keys </span><span class="nv">%</span> <span class="p">[</span><span class="ss">:driving_under_influence</span>
                             <span class="ss">:fips_county_code</span>
                             <span class="ss">:fips_state_code</span><span class="p">]))))</span>
</code><code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">use</span> <span class="ss">'scratch.crime</span> <span class="ss">:reload</span><span class="p">)</span> <span class="p">(</span><span class="nf">pprint</span> <span class="p">(</span><span class="nf">most-duis</span> <span class="s">"2008.json"</span><span class="p">))</span>
<span class="nv">nil</span>
<span class="p">({</span><span class="ss">:fips_state_code</span> <span class="s">"06"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"067"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">8589</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"48"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"201"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">10432</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"32"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"003"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">10443</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"06"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"065"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">10814</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"53"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"033"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">11439</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"06"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"071"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">13983</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"06"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"059"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">17572</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"06"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"073"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">18562</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"04"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"013"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">26235</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"06"</span>,
  <span class="ss">:fips_county_code</span> <span class="s">"037"</span>,
  <span class="ss">:driving_under_influence</span> <span class="mi">45056</span><span class="p">})</span>
</code>
<p>Almost there. We need to join together the state and county FIPS codes into a single string, because that’s how <code>fips</code> represents the county code:</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">fips-code</span>
  <span class="s">"Given a county (a map with :fips_state_code and :fips_county_code keys),</span>
<span class="s">   returns the five-digit FIPS code for the county, as a string."</span>
  <span class="p">[</span><span class="nv">county</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="ss">:fips_state_code</span> <span class="nv">county</span><span class="p">)</span> <span class="p">(</span><span class="ss">:fips_county_code</span> <span class="nv">county</span><span class="p">)))</span>
</code>
<p>Let’s write a quick test in <code>test/scratch/crime_test.clj</code> to verify that function works correctly:</p>
<code class="block"><span class="p">(</span><span class="kd">ns </span><span class="nv">scratch.crime-test</span>
  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.test</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
            <span class="p">[</span><span class="nv">scratch.crime</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>

<span class="p">(</span><span class="nf">deftest</span> <span class="nv">fips-code-test</span>
  <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="s">"12345"</span> <span class="p">(</span><span class="nf">fips-code</span> <span class="p">{</span><span class="ss">:fips_state_code</span> <span class="s">"12"</span> <span class="ss">:fips_county_code</span> <span class="s">"345"</span><span class="p">}))))</span>
</code><code class="block">aphyr@waterhouse:~/scratch$ lein test scratch.crime-test

lein test scratch.crime-test

Ran 1 tests containing 1 assertions.
0 failures, 0 errors.</code>
<p>Great. Note that <code>lein test some-namespace</code> runs only the tests in that particular namespace. For the last step, let’s take the <code>most-duis</code> function and, using <code>fips</code> and <code>fips-code</code>, construct a map of county names to DUI reports.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">most-duis</span>
  <span class="s">"Given a JSON filename of UCR crime data for a particular year, finds the</span>
<span class="s">  counties with the most DUIs."</span>
  <span class="p">[</span><span class="nv">file</span><span class="p">]</span>
  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">file</span>
       <span class="nv">load-json</span>
       <span class="p">(</span><span class="nb">sort-by </span><span class="ss">:driving_under_influence</span><span class="p">)</span>
       <span class="p">(</span><span class="nf">take-last</span> <span class="mi">10</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">county</span><span class="p">]</span>
              <span class="p">[(</span><span class="nf">fips</span> <span class="p">(</span><span class="nf">fips-code</span> <span class="nv">county</span><span class="p">))</span>
               <span class="p">(</span><span class="ss">:driving_under_influence</span> <span class="nv">county</span><span class="p">)]))</span>
       <span class="p">(</span><span class="nb">into </span><span class="p">{})))</span>
</code><code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">use</span> <span class="ss">'scratch.crime</span> <span class="ss">:reload</span><span class="p">)</span> <span class="p">(</span><span class="nf">pprint</span> <span class="p">(</span><span class="nf">most-duis</span> <span class="s">"2008.json"</span><span class="p">))</span>
<span class="nv">nil</span>
<span class="p">{</span><span class="s">"CA, Orange"</span> <span class="mi">17572</span>,
 <span class="s">"CA, San Bernardino"</span> <span class="mi">13983</span>,
 <span class="s">"CA, Los Angeles"</span> <span class="mi">45056</span>,
 <span class="s">"CA, Riverside"</span> <span class="mi">10814</span>,
 <span class="s">"NV, Clark"</span> <span class="mi">10443</span>,
 <span class="s">"WA, King"</span> <span class="mi">11439</span>,
 <span class="s">"AZ, Maricopa"</span> <span class="mi">26235</span>,
 <span class="s">"CA, San Diego"</span> <span class="mi">18562</span>,
 <span class="s">"TX, Harris"</span> <span class="mi">10432</span>,
 <span class="s">"CA, Sacramento"</span> <span class="mi">8589</span><span class="p">}</span>
</code>
<p>Our question is, at least in part, answered: Los Angeles and Maricopa counties, in California and Arizona, have the most reports of drunk driving out of any counties in the 2008 Uniform Crime Reporting database. These might be good counties for a PSA campaign. California has either lots of drunk drivers, or aggressive enforcement, or both! Remember, this only tells us about <em>reports</em> of crimes; not the crimes themselves. Numbers vary based on how the state enforces the laws!</p>
<code class="block"><span class="p">(</span><span class="kd">ns </span><span class="nv">scratch.crime</span>
  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">cheshire.core</span> <span class="ss">:as</span> <span class="nv">json</span><span class="p">]))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">load-json</span>
  <span class="s">"Given a filename, reads a JSON file and returns it, parsed, with keywords."</span>
  <span class="p">[</span><span class="nv">file</span><span class="p">]</span>
  <span class="p">(</span><span class="nf">json/parse-string</span> <span class="p">(</span><span class="nb">slurp </span><span class="nv">file</span><span class="p">)</span> <span class="nv">true</span><span class="p">))</span>

<span class="p">(</span><span class="k">def </span><span class="nv">fips</span>
  <span class="s">"A map of FIPS codes to their county names."</span>
  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="s">"fips.json"</span>
       <span class="nv">load-json</span>
       <span class="ss">:table</span>
       <span class="ss">:rows</span>
       <span class="p">(</span><span class="nb">into </span><span class="p">{})))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">fips-code</span>
  <span class="s">"Given a county (a map with :fips_state_code and :fips_county_code keys),</span>
<span class="s">  returns the five-digit FIPS code for the county, as a string."</span>
  <span class="p">[</span><span class="nv">county</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="ss">:fips_state_code</span> <span class="nv">county</span><span class="p">)</span> <span class="p">(</span><span class="ss">:fips_county_code</span> <span class="nv">county</span><span class="p">)))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">most-duis</span>
  <span class="s">"Given a JSON filename of UCR crime data for a particular year, finds the</span>
<span class="s">  counties with the most DUIs."</span>
  <span class="p">[</span><span class="nv">file</span><span class="p">]</span>
  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">file</span>
       <span class="nv">load-json</span>
       <span class="p">(</span><span class="nb">sort-by </span><span class="ss">:driving_under_influence</span><span class="p">)</span>
       <span class="p">(</span><span class="nf">take-last</span> <span class="mi">10</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">county</span><span class="p">]</span>
              <span class="p">[(</span><span class="nf">fips</span> <span class="p">(</span><span class="nf">fips-code</span> <span class="nv">county</span><span class="p">))</span>
               <span class="p">(</span><span class="ss">:driving_under_influence</span> <span class="nv">county</span><span class="p">)]))</span>
       <span class="p">(</span><span class="nb">into </span><span class="p">{})))</span>
</code>
<h2>Recap</h2>

<p>In this chapter, we expanded beyond transient programs written in the REPL. We learned how <em>projects</em> combine static resources, code, and tests into a single package, and how projects can relate to one another through <em>dependencies</em>. We learned the basics of Clojure’s namespace system, which isolates distinct chunks of code from one another, and how to include definitions from one namespace in another via <code>require</code> and <code>use</code>. We learned how to write and run <em>tests</em> to verify our code’s correctness, and how to move seamlessly between the repl and code in <code>.clj</code> files. We made use of Cheshire, a Clojure library published on Clojars, to parse JSON–a common data format. Finally, we brought together our knowledge of Clojure’s basic grammar, immutable data structures, core functions, sequences, threading macros, and vars to explore a real-world problem.</p>

<h2>Exercises</h2>

<ol>
<li><p><code>most-duis</code> tells us about the raw number of reports, but doesn’t account for differences in county population. One would naturally expect counties with more people to have more crime! Divide the <code>:driving_under_influence</code> of each county by its <code>:county_population</code> to find a <em>prevalence</em> of DUIs, and take the top ten counties based on prevalence. How should you handle counties with a population of zero?</p></li>
<li><p>How do the prevalence counties compare to the original counties? Expand most-duis to return vectors of <code>[county-name, prevalence, report-count, population]</code> What are the populations of the high-prevalence counties? Why do you suppose the data looks this way? If you were leading a public-health campaign to reduce drunk driving, would you target your intervention based on <em>report count</em> or <em>prevalence</em>? Why?</p></li>
<li><p>We can <em>generalize</em> the <code>most-duis</code> function to handle <em>any</em> type of crime. Write a function <code>most-prevalent</code> which takes a file and a field name, like <code>:arson</code>, and finds the counties where that field is most often reported, per capita.</p></li>
<li><p>Write a test to verify that <code>most-prevalent</code> is correct.</p></li>
</ol>

<p>Next up: <a href="https://aphyr.com/posts/312-clojure-from-the-ground-up-modeling">modeling</a>.</p>              </p>
              <p class="meta"><a href="https://aphyr.com/posts/311-clojure-from-the-ground-up-logistics">Permalink</a></p>
            </article>
          </section>
          <section class="entry">
            <aside class="aside">
              <!-- <img src="static/i/favicon.gif" alt="Name of the Site" /> -->
              <h2><a href="http://aphyr.com/" title="Aphyr: Clojure">Kyle Kingsbury</a></h2>
              <p>
August 28, 2020 01:40 PM                <br />
                <a href="http://aphyr.com/">Feed URL</a>
              </p>
            </aside>
            <article class="article">
              <h2><a href="https://aphyr.com/posts/312-clojure-from-the-ground-up-modeling">Clojure from the ground up: modeling</a></h2>
              <p>
<p>Previously: <a href="http://aphyr.com/posts/311-clojure-from-the-ground-up-logistics">Logistics</a></p>

<p>Until this point in the book, we’ve dealt primarily in specific details: what an expression is, how math works, which functions apply to different data structures, and where code lives. But programming, like speaking a language, painting landscapes, or designing turbines, is about more than the <em>nuts and bolts</em> of the trade. It’s knowing how to <em>combine</em> those parts into a cohesive whole–and this is a skill which is difficult to describe formally. In this part of the book, I’d like to work with you on an integrative tour of one particular problem: modeling a rocket in flight.</p>

<p>We’re going to reinforce our concrete knowledge of the standard library by using maps, sequences, and math functions together. At the same time, we’re going to practice how to represent a complex system; decomposing a problem into smaller parts, naming functions and variables, and writing tests.</p>

<h2>So you want to go to space</h2>

<p>First, we need a representation of a craft. The obvious properties for a rocket are its dry mass (how much it weighs without fuel), fuel mass, position, velocity, and time. We’ll create a new file in our scratch project–<code>src/scratch/rocket.clj</code>–to talk about spacecraft.</p>

<p>For starters, let’s pattern our craft after an <a href="http://en.wikipedia.org/wiki/Atlas_V">Atlas V</a> launch vehicle. We’ll represent everything in SI units–kilograms, meters, newtons, etc. The Atlas V carries 627,105 lbs of LOX/RP-1 fuel, and a total mass of 334,500 kg gives only 50,050 kg of mass which <em>isn’t</em> fuel. It develops 4152 kilonewtons of thrust and runs for 253 seconds, with a <a href="http://en.wikipedia.org/wiki/Specific_impulse">specific impulse</a> (effectively, exhaust velocity) of 3.05 kilometers/sec. Real rockets develop varying amounts of thrust depending on the atmosphere, but we’ll pretend it’s constant in our simulation.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">atlas-v</span>
 <span class="p">[]</span>
  <span class="p">{</span><span class="ss">:dry-mass</span>  <span class="mi">50050</span>
   <span class="ss">:fuel-mass</span> <span class="mi">284450</span>
   <span class="ss">:time</span> <span class="mi">0</span>
   <span class="ss">:isp</span> <span class="mi">3050</span>
   <span class="ss">:max-fuel-rate</span> <span class="p">(</span><span class="nb">/ </span><span class="mi">284450</span> <span class="mi">253</span><span class="p">)</span>
   <span class="ss">:max-thrust</span> <span class="mf">4.152</span><span class="nv">e6</span><span class="p">})</span>
</code>
<p>How heavy is the craft?</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">mass</span>
  <span class="s">"The total mass of a craft."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="ss">:dry-mass</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="ss">:fuel-mass</span> <span class="nv">craft</span><span class="p">)))</span>
</code>
<p>What about the position and velocity? We could represent them in Cartesian coordinates–x, y, and z–or we could choose spherical coordinates: a radius from the planet and angle from the pole and 0 degrees longitude. I’ve got a hunch that spherical coordinates will be easier for position, but accelerating the craft will be simplest in in x, y, and z terms. The center of the planet is a natural choice for the coordinate system’s origin (0, 0, 0). We’ll choose z along the north pole, and x and y in the plane of the equator.</p>

<p>Let’s define a space center where we launch from–let’s say it’s initially on the equator at y=0. To figure out the x coordinate, we’ll need to know how far the space center is from the center of the earth. The earth’s <a href="http://en.wikipedia.org/wiki/Earth_radius#Equatorial_radius">equatorial radius</a> is ~6378 kilometers.</p>
<code class="block"><span class="p">(</span><span class="k">def </span><span class="nv">earth-equatorial-radius</span>
 <span class="s">"Radius of the earth, in meters"</span>
  <span class="mi">6378137</span><span class="p">)</span>
</code>
<p>How fast is the surface moving? Well the earth’s day is 86,400 seconds long,</p>
<code class="block"><span class="p">(</span><span class="k">def </span><span class="nv">earth-day</span>
  <span class="s">"Length of an earth day, in seconds."</span>
  <span class="mi">86400</span><span class="p">)</span>
</code>
<p>which means a given point on the equator has to go 2 * pi * equatorial radius meters in earth-day seconds:</p>
<code class="block"><span class="p">(</span><span class="k">def </span><span class="nv">earth-equatorial-speed</span>
  <span class="s">"How fast points on the equator move, relative to the center of the earth,</span>
<span class="s">  in meters/sec."</span>
  <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">Math/PI</span> <span class="nv">earth-equatorial-radius</span><span class="p">)</span>
     <span class="nv">earth-day</span><span class="p">))</span>
</code>
<p>So our space center is on the equator (z=0), at y=0 by choice, which means x is the equatorial radius. Since the earth is spinning, the space center is moving at earth-equatorial-speed in the y direction–and not changing at all in x or z.</p>
<code class="block"><span class="p">(</span><span class="k">def </span><span class="nv">initial-space-center</span>
  <span class="s">"The initial position and velocity of the launch facility"</span>
  <span class="p">{</span><span class="ss">:time</span>     <span class="mi">0</span>
   <span class="ss">:position</span> <span class="p">{</span><span class="ss">:x</span> <span class="nv">earth-equatorial-radius</span>
              <span class="ss">:y</span> <span class="mi">0</span>
              <span class="ss">:z</span> <span class="mi">0</span><span class="p">}</span>
   <span class="ss">:velocity</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">0</span>
              <span class="ss">:y</span> <span class="nv">earth-equatorial-speed</span>
              <span class="ss">:z</span> <span class="mi">0</span><span class="p">}})</span>
</code>
<p><code>:position</code> and <code>:velocity</code> are both <a href="http://en.wikipedia.org/wiki/Euclidean_vector#Representations">vectors</a>, in the sense that they describe a position, or a direction, in terms of x, y, and z components. This is a <em>different</em> kind of vector than a Clojure vector, like <code>[1 2 3]</code>. We’re actually representing these logical vectors as Clojure <em>maps</em>, with <code>:x</code>, <code>:y</code>, and <code>:z</code> keys, corresponding to the distance along the x, y, and z directions, from the center of the earth. Throughout this chapter, I’ll mainly use the term <em>coordinates</em> to talk about these structures, to avoid confusion with Clojure vectors.</p>

<p>Now let’s create a function which positions our craft on the launchpad at time 0. We’ll just <em>merge</em> the spacecraft’s with the initial space center, overwriting the craft’s time and space coordinates.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">prepare</span>
  <span class="s">"Prepares a craft for launch from an equatorial space center."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">merge </span><span class="nv">craft</span> <span class="nv">initial-space-center</span><span class="p">))</span>
</code>
<h2>Forces</h2>

<p>Gravity continually pulls the spacecraft towards the center of the Earth, accelerating it by 9.8 meters/second every second. To figure out what direction is towards the Earth, we’ll need the angles of a <a href="http://en.wikipedia.org/wiki/Spherical_coordinate_system">spherical coordinate system</a>. We’ll use the trigonometric functions from <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html">java.lang.Math</a>.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">magnitude</span>
  <span class="s">"What's the radius of a given set of cartesian coordinates?"</span>
  <span class="p">[</span><span class="nv">c</span><span class="p">]</span>
  <span class="c1">; By the Pythagorean theorem...</span>
  <span class="p">(</span><span class="nf">Math/sqrt</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">Math/pow</span> <span class="p">(</span><span class="ss">:x</span> <span class="nv">c</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">Math/pow</span> <span class="p">(</span><span class="ss">:y</span> <span class="nv">c</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">Math/pow</span> <span class="p">(</span><span class="ss">:z</span> <span class="nv">c</span><span class="p">)</span> <span class="mi">2</span><span class="p">))))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">cartesian-&gt;spherical</span>
  <span class="s">"Converts a map of Cartesian coordinates :x, :y, and :z to spherical coordinates :r, :theta, and :phi."</span>
  <span class="p">[</span><span class="nv">c</span><span class="p">]</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">r</span> <span class="p">(</span><span class="nf">magnitude</span> <span class="nv">c</span><span class="p">)]</span>
    <span class="p">{</span><span class="ss">:r</span> <span class="nv">r</span>
     <span class="ss">:theta</span> <span class="p">(</span><span class="nf">Math/acos</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="ss">:z</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">r</span><span class="p">))</span>
     <span class="ss">:phi</span>   <span class="p">(</span><span class="nf">Math/atan</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="ss">:y</span> <span class="nv">c</span><span class="p">)</span> <span class="p">(</span><span class="ss">:x</span> <span class="nv">c</span><span class="p">)))}))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">spherical-&gt;cartesian</span>
  <span class="s">"Converts spherical to Cartesian coordinates."</span>
  <span class="p">[</span><span class="nv">c</span><span class="p">]</span>
  <span class="p">{</span><span class="ss">:x</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="ss">:r</span> <span class="nv">c</span><span class="p">)</span> <span class="p">(</span><span class="nf">Math/sin</span> <span class="p">(</span><span class="ss">:theta</span> <span class="nv">c</span><span class="p">))</span> <span class="p">(</span><span class="nf">Math/cos</span> <span class="p">(</span><span class="ss">:phi</span> <span class="nv">c</span><span class="p">)))</span>
   <span class="ss">:y</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="ss">:r</span> <span class="nv">c</span><span class="p">)</span> <span class="p">(</span><span class="nf">Math/sin</span> <span class="p">(</span><span class="ss">:theta</span> <span class="nv">c</span><span class="p">))</span> <span class="p">(</span><span class="nf">Math/sin</span> <span class="p">(</span><span class="ss">:phi</span> <span class="nv">c</span><span class="p">)))</span>
   <span class="ss">:z</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="ss">:r</span> <span class="nv">c</span><span class="p">)</span> <span class="p">(</span><span class="nf">Math/cos</span> <span class="p">(</span><span class="ss">:phi</span> <span class="nv">c</span><span class="p">)))})</span>
</code>
<p>With those angles in mind, computing the gravitational acceleration is easy. We just take the spherical coordinates of the spacecraft, and replace the radius with the total force due to gravity. Then we can transform that spherical force back into Cartesian coordinates.</p>
<code class="block"><span class="p">(</span><span class="k">def </span><span class="nv">g</span> <span class="s">"Acceleration of gravity in meters/s^2"</span> <span class="mf">-9.8</span><span class="p">)</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">gravity-force</span>
  <span class="s">"The force vector, each component in Newtons, due to gravity."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="c1">; Since force is mass times acceleration...</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">total-force</span> <span class="p">(</span><span class="nb">* </span><span class="nv">g</span> <span class="p">(</span><span class="nf">mass</span> <span class="nv">craft</span><span class="p">))]</span>
    <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">craft</span>
        <span class="c1">; Now we'll take the craft's position</span>
        <span class="ss">:position</span>
        <span class="c1">; in spherical coordinates,</span>
        <span class="nv">cartesian-&gt;spherical</span>
        <span class="c1">; replace the radius with the gravitational force...</span>
        <span class="p">(</span><span class="nb">assoc </span><span class="ss">:r</span> <span class="nv">total-force</span><span class="p">)</span>
        <span class="c1">; and transform back to Cartesian-land</span>
        <span class="nv">spherical-&gt;cartesian</span><span class="p">)))</span>
</code>
<p>Rockets produce thrust by consuming fuel. Let’s say the fuel consumption is always the maximum, until we run out:</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">fuel-rate</span>
  <span class="s">"How fast is fuel, in kilograms/second, consumed by the craft?"</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">pos? </span><span class="p">(</span><span class="ss">:fuel-mass</span> <span class="nv">craft</span><span class="p">))</span>
    <span class="p">(</span><span class="ss">:max-fuel-rate</span> <span class="nv">craft</span><span class="p">)</span>
    <span class="mi">0</span><span class="p">))</span>
</code>
<p>Now that we know how much fuel is being consumed, we can compute the force the rocket engine develops. That force is simply the mass consumed per second times the exhaust velocity–which is the specific impulse <code>:isp</code>. We’ll ignore atmospheric effects.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">thrust</span>
  <span class="s">"How much force, in newtons, does the craft's rocket engines exert?"</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nf">fuel-rate</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="ss">:isp</span> <span class="nv">craft</span><span class="p">)))</span>
</code>
<p>Cool. What about the direction of thrust? Just for grins, let’s keep the rocket pointing entirely along the x axis.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">engine-force</span>
  <span class="s">"The force vector, each component in Newtons, due to the rocket engine."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">t</span> <span class="p">(</span><span class="nf">thrust</span> <span class="nv">craft</span><span class="p">)]</span>
    <span class="p">{</span><span class="ss">:x</span> <span class="nv">t</span>
     <span class="ss">:y</span> <span class="mi">0</span>
     <span class="ss">:z</span> <span class="mi">0</span><span class="p">}))</span>
</code>
<p>The total force on a craft is just the sum of gravity and thrust. To sum these maps together, we’ll need a way to sum the x, y, and z components independently. Clojure’s <code>merge-with</code> function combines common fields in maps using a function, so this is surprisingly straightforward.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">total-force</span>
  <span class="s">"Total force on a craft."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">merge-with + </span><span class="p">(</span><span class="nf">engine-force</span> <span class="nv">craft</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">gravity-force</span> <span class="nv">craft</span><span class="p">)))</span>
</code>
<p>The acceleration of a craft, by <a href="http://www.physicsclassroom.com/class/newtlaws/u2l3a.cfm">Newton’s second law</a>, is force divided by mass. This one’s a little trickier; given <code>{:x 1 :y 2 :z 4}</code> we want to apply a function–say, multiplication by a factor, to each number. Since maps are sequences of key/value pairs…</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">seq </span><span class="p">{</span><span class="ss">:x</span> <span class="mi">1</span> <span class="ss">:y</span> <span class="mi">2</span> <span class="ss">:z</span> <span class="mi">3</span><span class="p">})</span>
<span class="p">([</span><span class="ss">:z</span> <span class="mi">3</span><span class="p">]</span> <span class="p">[</span><span class="ss">:y</span> <span class="mi">2</span><span class="p">]</span> <span class="p">[</span><span class="ss">:x</span> <span class="mi">1</span><span class="p">])</span>
</code>
<p>… and we can build up new maps out of key/value pairs using <code>into</code>…</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">into </span><span class="p">{}</span> <span class="p">[[</span><span class="ss">:x</span> <span class="mi">4</span><span class="p">]</span> <span class="p">[</span><span class="ss">:y</span> <span class="mi">5</span><span class="p">]])</span>
<span class="p">{</span><span class="ss">:x</span> <span class="mi">4</span>, <span class="ss">:y</span> <span class="mi">5</span><span class="p">}</span>
</code>
<p>… we can write a function <code>map-values</code> which works like <code>map</code>, but affects the values of a map data structure.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">map-values</span>
  <span class="s">"Applies f to every value in the map m."</span>
  <span class="p">[</span><span class="nv">f</span> <span class="nv">m</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">into </span><span class="p">{}</span>
        <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
               <span class="p">[(</span><span class="nb">key </span><span class="nv">pair</span><span class="p">)</span> <span class="p">(</span><span class="nf">f</span> <span class="p">(</span><span class="nb">val </span><span class="nv">pair</span><span class="p">))])</span>
             <span class="nv">m</span><span class="p">)))</span>
</code>
<p>And that allows us to define a <code>scale</code> function which <em>scales</em> a set of coordinates by some factor:</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">scale</span>
  <span class="s">"Multiplies a map of x, y, and z coordinates by the given factor."</span>
  <span class="p">[</span><span class="nv">factor</span> <span class="nv">coordinates</span><span class="p">]</span>
  <span class="p">(</span><span class="nf">map-values</span> <span class="p">(</span><span class="nb">partial * </span><span class="nv">factor</span><span class="p">)</span> <span class="nv">coordinates</span><span class="p">))</span>
</code>
<p>What’s that <code>partial</code> thing? It’s a function which <em>takes a function</em>, and some arguments, and <em>returns a new function</em>. What does the new function do? It calls the original function, with the arguments passed to <code>partial</code>, followed by any arguments passed to the new function. In short, <code>(partial * factor)</code> returns a function that takes any number, and multiplies it by <code>factor</code>.</p>

<p>So to divide each component of the force vector by the mass of the craft:</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">acceleration</span>
  <span class="s">"Total acceleration of a craft."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">m</span> <span class="p">(</span><span class="nf">mass</span> <span class="nv">craft</span><span class="p">)]</span>
    <span class="p">(</span><span class="nf">scale</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">m</span><span class="p">)</span> <span class="p">(</span><span class="nf">total-force</span> <span class="nv">craft</span><span class="p">))))</span>
</code>
<p>Note that <code>(/ m)</code> returns 1/m. Our scale function can do double-duty as both multiplication and division.</p>

<p>With the acceleration and fuel consumption all figured out, we’re ready to <em>apply those changes over time</em>. We’ll write a function which takes the rocket at a particular time, and returns a version of it <code>dt</code> seconds later. </p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">step</span>
  <span class="p">[</span><span class="nv">craft</span> <span class="nv">dt</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">assoc </span><span class="nv">craft</span>
         <span class="c1">; Time advances by dt seconds</span>
         <span class="ss">:t</span>         <span class="p">(</span><span class="nb">+ </span><span class="nv">dt</span> <span class="p">(</span><span class="ss">:t</span> <span class="nv">craft</span><span class="p">))</span>
         <span class="c1">; We burn some fuel</span>
         <span class="ss">:fuel-mass</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="ss">:fuel-mass</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">dt</span> <span class="p">(</span><span class="nf">fuel-rate</span> <span class="nv">craft</span><span class="p">)))</span>
         <span class="c1">; Our position changes based on our velocity</span>
         <span class="ss">:position</span>  <span class="p">(</span><span class="nb">merge-with + </span><span class="p">(</span><span class="ss">:position</span> <span class="nv">craft</span><span class="p">)</span>
                                  <span class="p">(</span><span class="nf">scale</span> <span class="nv">dt</span> <span class="p">(</span><span class="ss">:velocity</span> <span class="nv">craft</span><span class="p">)))</span>
         <span class="c1">; And our velocity changes based on our acceleration</span>
         <span class="ss">:velocity</span>  <span class="p">(</span><span class="nb">merge-with + </span><span class="p">(</span><span class="ss">:velocity</span> <span class="nv">craft</span><span class="p">)</span>
                                  <span class="p">(</span><span class="nf">scale</span> <span class="nv">dt</span> <span class="p">(</span><span class="nf">acceleration</span> <span class="nv">craft</span><span class="p">)))))</span>
</code>
<p>OK. Let’s save the <code>rocket.clj</code> file, load that code into the REPL, and fire it up.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">use</span> <span class="ss">'scratch.rocket</span> <span class="ss">:reload</span><span class="p">)</span>
<span class="nv">nil</span>
</code>
<p><code>use</code> is like a shorthand for <code>(:require ... :refer :all)</code>. We’re passing <code>:reload</code> because we want the REPL to re-read the file. Notice that in <code>ns</code> declarations, the namespace name <code>scratch.rocket</code> is <em>unquoted</em>–but when we call <code>use</code> or <code>require</code> at the repl, we quote the namespace name.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">atlas-v</span><span class="p">)</span>
<span class="p">{</span><span class="ss">:dry-mass</span> <span class="mi">50050</span>, <span class="ss">:fuel-mass</span> <span class="mi">284450</span>, <span class="ss">:time</span> <span class="mi">0</span>, <span class="ss">:isp</span> <span class="mi">3050</span>, <span class="ss">:max-fuel-rate</span> <span class="mi">284450</span><span class="nv">/253</span>, <span class="ss">:max-thrust</span> <span class="mf">4152000.0</span><span class="p">}</span>
</code>
<h2>Launch</h2>

<p>Let’s prepare the rocket. We’ll use <code>pprint</code> to print it in a more readable form.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">atlas-v</span><span class="p">)</span> <span class="nv">prepare</span> <span class="nv">pprint</span><span class="p">)</span>
<span class="p">{</span><span class="ss">:velocity</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">0</span>, <span class="ss">:y</span> <span class="mf">463.8312116386399</span>, <span class="ss">:z</span> <span class="mi">0</span><span class="p">}</span>,
 <span class="ss">:position</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">6378137</span>, <span class="ss">:y</span> <span class="mi">0</span>, <span class="ss">:z</span> <span class="mi">0</span><span class="p">}</span>,
 <span class="ss">:dry-mass</span> <span class="mi">50050</span>,
 <span class="ss">:fuel-mass</span> <span class="mi">284450</span>,
 <span class="ss">:time</span> <span class="mi">0</span>,
 <span class="ss">:isp</span> <span class="mi">3050</span>,
 <span class="ss">:max-fuel-rate</span> <span class="mi">284450</span><span class="nv">/253</span>,
 <span class="ss">:max-thrust</span> <span class="mf">4152000.0</span><span class="p">}</span>
</code>
<p>Great; there it is on the launchpad. Wow, even “standing still”, it’s moving at 463 meters/sec because of the earth’s rotation! That means <em>you and I</em> are flying through space at almost half a kilometer every second! Let’s step forward one second in time.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">atlas-v</span><span class="p">)</span> <span class="nv">prepare</span> <span class="p">(</span><span class="nf">step</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">pprint</span><span class="p">)</span>

<span class="nv">NullPointerException</span>   <span class="nv">clojure.lang.Numbers.ops</span> <span class="p">(</span><span class="nf">Numbers.java</span><span class="ss">:942</span><span class="p">)</span>
</code>
<p>In evaluating this expression, Clojure reached a point where it could not continue, and aborted execution. We call this error an <em>exception</em>, and the process of aborting <em>throwing</em> the exception. Clojure backs up to the function which <em>called</em> the function that threw, then the function which called <em>that</em> function, and so on, all the way to the top-level expression. The REPL finally intercepts the exception, prints an error to the console, and stashes the exception object in a special variable <code>*e</code>.</p>

<p>In this case, we know that the exception in question was a <code>NullPointerException</code>, which occurs when a function received <code>nil</code> unexpectedly. This one came from <code>clojure.lang.Numbers.ops</code>, which suggests some sort of math was involved. Let’s use <code>pst</code> to find out where it came from.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">pst</span> <span class="nv">*e</span><span class="p">)</span>
<span class="nv">NullPointerException</span> 
    <span class="nv">clojure.lang.Numbers.ops</span> <span class="p">(</span><span class="nf">Numbers.java</span><span class="ss">:942</span><span class="p">)</span>
    <span class="nv">clojure.lang.Numbers.add</span> <span class="p">(</span><span class="nf">Numbers.java</span><span class="ss">:126</span><span class="p">)</span>
    <span class="nv">scratch.rocket/step</span> <span class="p">(</span><span class="nf">rocket.clj</span><span class="ss">:125</span><span class="p">)</span>
    <span class="nv">user/eval1478</span> <span class="p">(</span><span class="nf">NO_SOURCE_FILE</span><span class="ss">:1</span><span class="p">)</span>
    <span class="nv">clojure.lang.Compiler.eval</span> <span class="p">(</span><span class="nf">Compiler.java</span><span class="ss">:6619</span><span class="p">)</span>
    <span class="nv">clojure.lang.Compiler.eval</span> <span class="p">(</span><span class="nf">Compiler.java</span><span class="ss">:6582</span><span class="p">)</span>
    <span class="nv">clojure.core/eval</span> <span class="p">(</span><span class="nf">core.clj</span><span class="ss">:2852</span><span class="p">)</span>
    <span class="nv">clojure.main/repl/read-eval-print--6588/fn--6591</span> <span class="p">(</span><span class="nf">main.clj</span><span class="ss">:259</span><span class="p">)</span>
    <span class="nv">clojure.main/repl/read-eval-print--6588</span> <span class="p">(</span><span class="nf">main.clj</span><span class="ss">:259</span><span class="p">)</span>
    <span class="nv">clojure.main/repl/fn--6597</span> <span class="p">(</span><span class="nf">main.clj</span><span class="ss">:277</span><span class="p">)</span>
    <span class="nv">clojure.main/repl</span> <span class="p">(</span><span class="nf">main.clj</span><span class="ss">:277</span><span class="p">)</span>
    <span class="nv">clojure.tools.nrepl.middleware.interruptible-eval/evaluate/fn--589</span> <span class="p">(</span><span class="nf">interruptible_eval.clj</span><span class="ss">:56</span><span class="p">)</span>
</code>
<p>This is called a <em>stack trace</em>: the <em>stack</em> is the context of the program at each function call. It traces the path the computer took in evaluating the expression, from the bottom to the top. At the bottom is the REPL, and Clojure compiler. Our code begins at <code>user/eval1478</code>–that’s the compiler’s name for the expression we just typed. That function called <code>scratch.rocket/step</code>, which in turn called <code>Numbers.add</code>, and that called  <code>Numbers.ops</code>. Let’s start by looking at the last function <em>we</em> wrote before calling into Clojure’s standard library: the <code>step</code> function, in <code>rocket.clj</code>, on line <code>125</code>.</p>
<code class="block"><span class="mi">123</span>  <span class="p">(</span><span class="nb">assoc </span><span class="nv">craft</span>
<span class="mi">124</span>         <span class="c1">; Time advances by dt seconds</span>
<span class="mi">125</span>         <span class="ss">:t</span>         <span class="p">(</span><span class="nb">+ </span><span class="nv">dt</span> <span class="p">(</span><span class="ss">:t</span> <span class="nv">craft</span><span class="p">))</span>
</code>
<p>Ah; we named the time field <code>:time</code> earlier, not <code>:t</code>. Let’s replace <code>:t</code> with <code>:time</code>, save the file, and reload.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">use</span> <span class="ss">'scratch.rocket</span> <span class="ss">:reload</span><span class="p">)</span>
<span class="nv">nil</span>
<span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">atlas-v</span><span class="p">)</span> <span class="nv">prepare</span> <span class="p">(</span><span class="nf">step</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">pprint</span><span class="p">)</span>
<span class="p">{</span><span class="ss">:velocity</span> <span class="p">{</span><span class="ss">:x</span> <span class="mf">0.45154055666826215</span>, <span class="ss">:y</span> <span class="mf">463.8312116386399</span>, <span class="ss">:z</span> <span class="mf">-9.8</span><span class="p">}</span>,
 <span class="ss">:position</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">6378137</span>, <span class="ss">:y</span> <span class="mf">463.8312116386399</span>, <span class="ss">:z</span> <span class="mi">0</span><span class="p">}</span>,
 <span class="ss">:dry-mass</span> <span class="mi">50050</span>,
 <span class="ss">:fuel-mass</span> <span class="mi">71681400</span><span class="nv">/253</span>,
 <span class="ss">:time</span> <span class="mi">1</span>,
 <span class="ss">:isp</span> <span class="mi">3050</span>,
 <span class="ss">:max-fuel-rate</span> <span class="mi">284450</span><span class="nv">/253</span>,
 <span class="ss">:max-thrust</span> <span class="mf">4152000.0</span><span class="p">}</span>
</code>
<p>Look at that! Our position is unchanged (because our velocity was zero), but our <em>velocity</em> has shifted. We’re now moving… wait, -9.8 meters per second <em>south</em>? That can’t be right. Gravity points <em>down</em>, not sideways. Something must be wrong with our spherical coordinate system. Let’s write a test in <code>test/scratch/rocket_test.clj</code> to explore.</p>
<code class="block"><span class="p">(</span><span class="kd">ns </span><span class="nv">scratch.rocket-test</span>
  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.test</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
            <span class="p">[</span><span class="nv">scratch.rocket</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>

<span class="p">(</span><span class="nf">deftest</span> <span class="nv">spherical-coordinate-test</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">pos</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">1</span> <span class="ss">:y</span> <span class="mi">2</span> <span class="ss">:z</span> <span class="mi">3</span><span class="p">}]</span>
    <span class="p">(</span><span class="nf">testing</span> <span class="s">"roundtrip"</span>
      <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="nv">pos</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">pos</span> <span class="nv">cartesian-&gt;spherical</span> <span class="nv">spherical-&gt;cartesian</span><span class="p">))))))</span>
</code><code class="block">aphyr@waterhouse:~/scratch$ lein test

lein test scratch.core-test

lein test scratch.rocket-test

lein test :only scratch.rocket-test/spherical-coordinate-test

FAIL in (spherical-coordinate-test) (rocket_test.clj:8)
roundtrip
expected: (= pos (-&gt; pos cartesian-&gt;spherical spherical-&gt;cartesian))
  actual: (not (= {:z 3, :y 2, :x 1} {:x 1.0, :y 1.9999999999999996, :z 1.6733200530681513}))

Ran 2 tests containing 4 assertions.
1 failures, 0 errors.
Tests failed.</code>
<p>Definitely wrong. Looks like something to do with the z coordinate, since x and y look OK. Let’s try testing a point on the north pole:</p>
<code class="block"><span class="p">(</span><span class="nf">deftest</span> <span class="nv">spherical-coordinate-test</span>
  <span class="p">(</span><span class="nf">testing</span> <span class="s">"spherical-&gt;cartesian"</span>
    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">spherical-&gt;cartesian</span> <span class="p">{</span><span class="ss">:r</span> <span class="mi">2</span>
                                  <span class="ss">:phi</span> <span class="mi">0</span>
                                  <span class="ss">:theta</span> <span class="mi">0</span><span class="p">})</span>
           <span class="p">{</span><span class="ss">:x</span> <span class="mf">0.0</span> <span class="ss">:y</span> <span class="mf">0.0</span> <span class="ss">:z</span> <span class="mf">2.0</span><span class="p">})))</span>

  <span class="p">(</span><span class="nf">testing</span> <span class="s">"roundtrip"</span>
    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">pos</span> <span class="p">{</span><span class="ss">:x</span> <span class="mf">1.0</span> <span class="ss">:y</span> <span class="mf">2.0</span> <span class="ss">:z</span> <span class="mf">3.0</span><span class="p">}]</span>
      <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="nv">pos</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">pos</span> <span class="nv">cartesian-&gt;spherical</span> <span class="nv">spherical-&gt;cartesian</span><span class="p">))))))</span>
</code>
<p>That checks out OK. Let’s try some values in the repl.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">cartesian-&gt;spherical</span> <span class="p">{</span><span class="ss">:x</span> <span class="mf">0.00001</span> <span class="ss">:y</span> <span class="mf">0.00001</span> <span class="ss">:z</span> <span class="mf">2.0</span><span class="p">})</span>
<span class="p">{</span><span class="ss">:r</span> <span class="mf">2.00000000005</span>, <span class="ss">:theta</span> <span class="mf">7.071068104411588</span><span class="nv">E-6</span>, <span class="ss">:phi</span> <span class="mf">0.7853981633974483</span><span class="p">}</span>
<span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">cartesian-&gt;spherical</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">1</span> <span class="ss">:y</span> <span class="mi">2</span> <span class="ss">:z</span> <span class="mi">3</span><span class="p">})</span>
<span class="p">{</span><span class="ss">:r</span> <span class="mf">3.7416573867739413</span>, <span class="ss">:theta</span> <span class="mf">0.6405223126794245</span>, <span class="ss">:phi</span> <span class="mf">1.1071487177940904</span><span class="p">}</span>
<span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">spherical-&gt;cartesian</span> <span class="p">(</span><span class="nf">cartesian-&gt;spherical</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">1</span> <span class="ss">:y</span> <span class="mi">2</span> <span class="ss">:z</span> <span class="mi">3</span><span class="p">}))</span>
<span class="p">{</span><span class="ss">:x</span> <span class="mf">1.0</span>, <span class="ss">:y</span> <span class="mf">1.9999999999999996</span>, <span class="ss">:z</span> <span class="mf">1.6733200530681513</span><span class="p">}</span>
<span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">cartesian-&gt;spherical</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">1</span> <span class="ss">:y</span> <span class="mi">2</span> <span class="ss">:z</span> <span class="mi">0</span><span class="p">})</span>
<span class="p">{</span><span class="ss">:r</span> <span class="mf">2.23606797749979</span>, <span class="ss">:theta</span> <span class="mf">1.5707963267948966</span>, <span class="ss">:phi</span> <span class="mf">1.1071487177940904</span><span class="p">}</span>
<span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">cartesian-&gt;spherical</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">1</span> <span class="ss">:y</span> <span class="mi">1</span> <span class="ss">:z</span> <span class="mi">0</span><span class="p">})</span>
<span class="p">{</span><span class="ss">:r</span> <span class="mf">1.4142135623730951</span>, <span class="ss">:theta</span> <span class="mf">1.5707963267948966</span>, <span class="ss">:phi</span> <span class="mf">0.7853981633974483</span><span class="p">}</span>
</code>
<p>Oh, wait, that looks odd. <code>{:x 1 :y 1 :z 0}</code> is on the equator: phi–the angle from the pole–should be pi/2 or ~1.57, and theta–the angle around the equator–should be pi/4 or 0.78. Those coordinates are reversed! Double-checking our formulas with <a href="http://mathworld.wolfram.com/SphericalCoordinates.html">Wolfram MathWorld</a> shows that we mixed up phi and theta! Let’s redefine <code>cartesian-&gt;polar</code> correctly.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">cartesian-&gt;spherical</span>
  <span class="s">"Converts a map of Cartesian coordinates :x, :y, and :z to spherical</span>
<span class="s">  coordinates :r, :theta, and :phi."</span>
  <span class="p">[</span><span class="nv">c</span><span class="p">]</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">r</span> <span class="p">(</span><span class="nf">Math/sqrt</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">Math/pow</span> <span class="p">(</span><span class="ss">:x</span> <span class="nv">c</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span>
                        <span class="p">(</span><span class="nf">Math/pow</span> <span class="p">(</span><span class="ss">:y</span> <span class="nv">c</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span>
                        <span class="p">(</span><span class="nf">Math/pow</span> <span class="p">(</span><span class="ss">:z</span> <span class="nv">c</span><span class="p">)</span> <span class="mi">2</span><span class="p">)))]</span>
    <span class="p">{</span><span class="ss">:r</span>     <span class="nv">r</span>
     <span class="ss">:phi</span>   <span class="p">(</span><span class="nf">Math/acos</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="ss">:z</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">r</span><span class="p">))</span>
     <span class="ss">:theta</span> <span class="p">(</span><span class="nf">Math/atan</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="ss">:y</span> <span class="nv">c</span><span class="p">)</span> <span class="p">(</span><span class="ss">:x</span> <span class="nv">c</span><span class="p">)))}))</span>
</code><code class="block">aphyr@waterhouse:~/scratch$ lein test

lein test scratch.core-test

lein test scratch.rocket-test

Ran 2 tests containing 5 assertions.
0 failures, 0 errors.</code>
<p>Great. Now let’s check the rocket trajectory again.</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">atlas-v</span><span class="p">)</span> <span class="nv">prepare</span> <span class="p">(</span><span class="nf">step</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">pprint</span><span class="p">)</span>
<span class="p">{</span><span class="ss">:velocity</span>
 <span class="p">{</span><span class="ss">:x</span> <span class="mf">0.45154055666826204</span>,
  <span class="ss">:y</span> <span class="mf">463.8312116386399</span>,
  <span class="ss">:z</span> <span class="mf">-6.000769315822031</span><span class="nv">E-16</span><span class="p">}</span>,
 <span class="ss">:position</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">6378137</span>, <span class="ss">:y</span> <span class="mf">463.8312116386399</span>, <span class="ss">:z</span> <span class="mi">0</span><span class="p">}</span>,
 <span class="ss">:dry-mass</span> <span class="mi">50050</span>,
 <span class="ss">:fuel-mass</span> <span class="mi">71681400</span><span class="nv">/253</span>,
 <span class="ss">:time</span> <span class="mi">1</span>,
 <span class="ss">:isp</span> <span class="mi">3050</span>,
 <span class="ss">:max-fuel-rate</span> <span class="mi">284450</span><span class="nv">/253</span>,
 <span class="ss">:max-thrust</span> <span class="mf">4152000.0</span><span class="p">}</span>
</code>
<p>This time, our velocity is increasing in the +x direction, at half a meter per second. We have liftoff!</p>

<h2>Flight</h2>

<p>We have a function that can move the rocket forward by one small step of time, but we’d like to understand the rocket’s trajectory as a <em>whole</em>; to see <em>all</em> positions it will take. We’ll use <em>iterate</em> to construct a lazy, infinite sequence of rocket states, each one constructed by stepping forward from the last.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">trajectory</span>
  <span class="p">[</span><span class="nv">dt</span> <span class="nv">craft</span><span class="p">]</span>
  <span class="s">"Returns all future states of the craft, at dt-second intervals."</span>
  <span class="p">(</span><span class="nb">iterate </span><span class="o">#</span><span class="p">(</span><span class="nf">step</span> <span class="nv">%</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">craft</span><span class="p">))</span>
</code><code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nf">atlas-v</span><span class="p">)</span> <span class="nv">prepare</span> <span class="p">(</span><span class="nf">trajectory</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">take </span><span class="mi">3</span><span class="p">)</span> <span class="nv">pprint</span><span class="p">)</span>
<span class="p">({</span><span class="ss">:velocity</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">0</span>, <span class="ss">:y</span> <span class="mf">463.8312116386399</span>, <span class="ss">:z</span> <span class="mi">0</span><span class="p">}</span>,
  <span class="ss">:position</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">6378137</span>, <span class="ss">:y</span> <span class="mi">0</span>, <span class="ss">:z</span> <span class="mi">0</span><span class="p">}</span>,
  <span class="ss">:dry-mass</span> <span class="mi">50050</span>,
  <span class="ss">:fuel-mass</span> <span class="mi">284450</span>,
  <span class="ss">:time</span> <span class="mi">0</span>,
  <span class="ss">:isp</span> <span class="mi">3050</span>,
  <span class="ss">:max-fuel-rate</span> <span class="mi">284450</span><span class="nv">/253</span>,
  <span class="ss">:max-thrust</span> <span class="mf">4152000.0</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:velocity</span>
  <span class="p">{</span><span class="ss">:x</span> <span class="mf">0.45154055666826204</span>,
   <span class="ss">:y</span> <span class="mf">463.8312116386399</span>,
   <span class="ss">:z</span> <span class="mf">-6.000769315822031</span><span class="nv">E-16</span><span class="p">}</span>,
  <span class="ss">:position</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">6378137</span>, <span class="ss">:y</span> <span class="mf">463.8312116386399</span>, <span class="ss">:z</span> <span class="mi">0</span><span class="p">}</span>,
  <span class="ss">:dry-mass</span> <span class="mi">50050</span>,
  <span class="ss">:fuel-mass</span> <span class="mi">71681400</span><span class="nv">/253</span>,
  <span class="ss">:time</span> <span class="mi">1</span>,
  <span class="ss">:isp</span> <span class="mi">3050</span>,
  <span class="ss">:max-fuel-rate</span> <span class="mi">284450</span><span class="nv">/253</span>,
  <span class="ss">:max-thrust</span> <span class="mf">4152000.0</span><span class="p">}</span>
 <span class="p">{</span><span class="ss">:velocity</span>
  <span class="p">{</span><span class="ss">:x</span> <span class="mf">0.9376544222659078</span>,
   <span class="ss">:y</span> <span class="mf">463.83049896253056</span>,
   <span class="ss">:z</span> <span class="mf">-1.200153863164406</span><span class="nv">E-15</span><span class="p">}</span>,
  <span class="ss">:position</span>
  <span class="p">{</span><span class="ss">:x</span> <span class="mf">6378137.451540557</span>,
   <span class="ss">:y</span> <span class="mf">927.6624232772798</span>,
   <span class="ss">:z</span> <span class="mf">-6.000769315822031</span><span class="nv">E-16</span><span class="p">}</span>,
  <span class="ss">:dry-mass</span> <span class="mi">50050</span>,
  <span class="ss">:fuel-mass</span> <span class="mi">71396950</span><span class="nv">/253</span>,
  <span class="ss">:time</span> <span class="mi">2</span>,
  <span class="ss">:isp</span> <span class="mi">3050</span>,
  <span class="ss">:max-fuel-rate</span> <span class="mi">284450</span><span class="nv">/253</span>,
  <span class="ss">:max-thrust</span> <span class="mf">4152000.0</span><span class="p">})</span>
</code>
<p>Notice that each map is like a frame of a movie, playing at one frame per second. We can make the simulation more or less accurate by raising or lowering the framerate–adjusting the parameter fed to <code>trajectory</code>. For now, though, we’ll stick with one-second intervals.</p>

<p>How high above the surface is the rocket?</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">altitude</span>
  <span class="s">"The height above the surface of the equator, in meters."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">craft</span>
      <span class="ss">:position</span>
      <span class="nv">cartesian-&gt;spherical</span>
      <span class="ss">:r</span>
      <span class="p">(</span><span class="nb">- </span><span class="nv">earth-equatorial-radius</span><span class="p">)))</span>
</code>
<p>Now we can explore the rocket’s path as a series of altitudes over time:</p>
<code class="block"><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nf">atlas-v</span><span class="p">)</span> <span class="nv">prepare</span> <span class="p">(</span><span class="nf">trajectory</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">map </span><span class="nv">altitude</span><span class="p">)</span> <span class="p">(</span><span class="nb">take </span><span class="mi">10</span><span class="p">)</span> <span class="nv">pprint</span><span class="p">)</span>
<span class="p">(</span><span class="mf">0.0</span>
 <span class="mf">0.016865378245711327</span>
 <span class="mf">0.519002066925168</span>
 <span class="mf">1.540983198210597</span>
 <span class="mf">3.117615718394518</span>
 <span class="mf">5.283942770212889</span>
 <span class="mf">8.075246102176607</span>
 <span class="mf">11.52704851794988</span>
 <span class="mf">15.675116359256208</span>
 <span class="mf">20.555462017655373</span><span class="p">)</span>
</code>
<p>The million dollar question, though, is whether the rocket breaks orbit.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">above-ground?</span>
  <span class="s">"Is the craft at or above the surface?"</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">&lt;= </span><span class="mi">0</span> <span class="p">(</span><span class="nf">altitude</span> <span class="nv">craft</span><span class="p">)))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">flight</span>
  <span class="s">"The above-ground portion of a trajectory."</span>
  <span class="p">[</span><span class="nv">trajectory</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">take-while </span><span class="nv">above-ground?</span> <span class="nv">trajectory</span><span class="p">))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">crashed?</span>
  <span class="s">"Does this trajectory crash into the surface before 100 hours are up?"</span>
  <span class="p">[</span><span class="nv">trajectory</span><span class="p">]</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">time-limit</span> <span class="p">(</span><span class="nb">* </span><span class="mi">100</span> <span class="mi">3600</span><span class="p">)]</span> <span class="c1">; 1 hour</span>
    <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">every? </span><span class="nv">above-ground?</span>
                 <span class="p">(</span><span class="nb">take-while </span><span class="o">#</span><span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="ss">:time</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">time-limit</span><span class="p">)</span> <span class="nv">trajectory</span><span class="p">)))))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">crash-time</span>
  <span class="s">"Given a trajectory, returns the time the rocket impacted the ground."</span>
  <span class="p">[</span><span class="nv">trajectory</span><span class="p">]</span>
  <span class="p">(</span><span class="ss">:time</span> <span class="p">(</span><span class="nb">last </span><span class="p">(</span><span class="nf">flight</span> <span class="nv">trajectory</span><span class="p">))))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">apoapsis</span>
  <span class="s">"The highest altitude achieved during a trajectory."</span>
  <span class="p">[</span><span class="nv">trajectory</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">apply max </span><span class="p">(</span><span class="nb">map </span><span class="nv">altitude</span> <span class="nv">trajectory</span><span class="p">)))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">apoapsis-time</span>
  <span class="s">"The time of apoapsis"</span>
  <span class="p">[</span><span class="nv">trajectory</span><span class="p">]</span>
  <span class="p">(</span><span class="ss">:time</span> <span class="p">(</span><span class="nb">apply max-key </span><span class="nv">altitude</span> <span class="p">(</span><span class="nf">flight</span> <span class="nv">trajectory</span><span class="p">))))</span>
</code>
<p>If the rocket goes below ground, we know it crashed. If the rocket stays in orbit, the trajectory will never end. That makes it a bit tricky to tell whether the rocket is in a stable orbit or not, because we can’t ask about every element, or the last element, of an infinite sequence: it’ll take infinite time to evaluate. Instead, we’ll assume that the rocket <em>should</em> crash within the first, say, 100 hours; if it makes it past that point, we’ll assume it made orbit successfully. With these functions in hand, we’ll write a test in <code>test/scratch/rocket_test.clj</code> to see whether or not the launch is successful:</p>
<code class="block"><span class="p">(</span><span class="nf">deftest</span> <span class="nv">makes-orbit</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">trajectory</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nf">atlas-v</span><span class="p">)</span>
                        <span class="nv">prepare</span>
                        <span class="p">(</span><span class="nf">trajectory</span> <span class="mi">1</span><span class="p">))]</span>

    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nf">crashed?</span> <span class="nv">trajectory</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">println </span><span class="s">"Crashed at"</span> <span class="p">(</span><span class="nf">crash-time</span> <span class="nv">trajectory</span><span class="p">)</span> <span class="s">"seconds"</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">println </span><span class="s">"Maximum altitude"</span> <span class="p">(</span><span class="nf">apoapsis</span> <span class="nv">trajectory</span><span class="p">)</span>
               <span class="s">"meters at"</span>        <span class="p">(</span><span class="nf">apoapsis-time</span> <span class="nv">trajectory</span><span class="p">)</span> <span class="s">"seconds"</span><span class="p">))</span>

    <span class="c1">; Assert that the rocket eventually made it to orbit.</span>
    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nf">crashed?</span> <span class="nv">trajectory</span><span class="p">)))))</span>
</code><code class="block"><span class="nv">aphyr</span><span class="o">@</span><span class="nv">waterhouse</span><span class="err">:</span><span class="o">~</span><span class="nv">/scratch$</span> <span class="nv">lein</span> <span class="nb">test </span><span class="nv">scratch.rocket-test</span>

<span class="nv">lein</span> <span class="nb">test </span><span class="nv">scratch.rocket-test</span>
<span class="nv">Crashed</span> <span class="nv">at</span> <span class="mi">982</span> <span class="nv">seconds</span>
<span class="nv">Maximum</span> <span class="nv">altitude</span> <span class="mf">753838.039645385</span> <span class="nv">meters</span> <span class="nv">at</span> <span class="mi">532</span> <span class="nv">seconds</span>

<span class="nv">lein</span> <span class="nb">test </span><span class="ss">:only</span> <span class="nv">scratch.rocket-test/makes-orbit</span>

<span class="nv">FAIL</span> <span class="nv">in</span> <span class="p">(</span><span class="nf">makes-orbit</span><span class="p">)</span> <span class="p">(</span><span class="nf">rocket_test.clj</span><span class="ss">:26</span><span class="p">)</span>
<span class="nv">expected</span><span class="err">:</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nf">crashed?</span> <span class="nv">trajectory</span><span class="p">))</span>
  <span class="nv">actual</span><span class="err">:</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">not </span><span class="nv">true</span><span class="p">))</span>

<span class="nv">Ran</span> <span class="mi">2</span> <span class="nv">tests</span> <span class="nv">containing</span> <span class="mi">3</span> <span class="nv">assertions.</span>
<span class="mi">1</span> <span class="nv">failures</span>, <span class="mi">0</span> <span class="nv">errors.</span>
<span class="nv">Tests</span> <span class="nv">failed.</span>
</code>
<p>We made it to an altitude of 750 kilometers, and crashed 982 seconds after launch. We’re gonna need a bigger boat.</p>

<h2>Stage II</h2>

<p>The Atlas V isn’t big enough to make it into orbit on its own. It carries a second stage, the <a href="http://en.wikipedia.org/wiki/Centaur_(rocket_stage)">Centaur</a>, which is much smaller and uses <a href="http://www.astronautix.com/stages/cenaurde.htm">more efficient engines</a>.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">centaur</span>
  <span class="s">"The upper rocket stage.</span>
<span class="s">  http://en.wikipedia.org/wiki/Centaur_(rocket_stage)</span>
<span class="s">  http://www.astronautix.com/stages/cenaurde.htm"</span>
  <span class="p">[]</span>
  <span class="p">{</span><span class="ss">:dry-mass</span>  <span class="mi">2361</span>
   <span class="ss">:fuel-mass</span> <span class="mi">13897</span>
   <span class="ss">:isp</span>       <span class="mi">4354</span>
   <span class="ss">:max-fuel-rate</span> <span class="p">(</span><span class="nb">/ </span><span class="mi">13897</span> <span class="mi">470</span><span class="p">)})</span>
</code>
<p>The Centaur lives inside the Atlas V main stage. We’ll re-write <code>atlas-v</code> to take an <em>argument</em>: its next stage.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">atlas-v</span>
  <span class="s">"The full launch vehicle. http://en.wikipedia.org/wiki/Atlas_V"</span>
  <span class="p">[</span><span class="nv">next-stage</span><span class="p">]</span>
  <span class="p">{</span><span class="ss">:dry-mass</span>  <span class="mi">50050</span>
   <span class="ss">:fuel-mass</span> <span class="mi">284450</span>
   <span class="ss">:isp</span> <span class="mi">3050</span>
   <span class="ss">:max-fuel-rate</span> <span class="p">(</span><span class="nb">/ </span><span class="mi">284450</span> <span class="mi">253</span><span class="p">)</span>
   <span class="ss">:next-stage</span> <span class="nv">next-stage</span><span class="p">})</span>
</code>
<p>Now, in our tests, we’ll construct the rocket like so:</p>
<code class="block">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">trajectory</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nf">atlas-v</span> <span class="p">(</span><span class="nf">centaur</span><span class="p">))</span>
                        <span class="nv">prepare</span>
                        <span class="p">(</span><span class="nf">trajectory</span> <span class="mi">1</span><span class="p">))]</span>
</code>
<p>When we exhaust the fuel reserves of the primary stage, we’ll de-couple the main booster from the Centaur. In terms of our simulation, the Atlas V will be <em>replaced</em> by its next stage, the Centaur. We’ll write a function <code>stage</code> which separates the vehicles when ready:</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">stage</span>
  <span class="s">"When fuel reserves are exhausted, separate stages. Otherwise, return craft</span>
<span class="s">  unchanged."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nf">cond</span>
    <span class="c1">; Still fuel left</span>
    <span class="p">(</span><span class="nb">pos? </span><span class="p">(</span><span class="ss">:fuel-mass</span> <span class="nv">craft</span><span class="p">))</span>
    <span class="nv">craft</span>

    <span class="c1">; No remaining stages</span>
    <span class="p">(</span><span class="nb">nil? </span><span class="p">(</span><span class="ss">:next-stage</span> <span class="nv">craft</span><span class="p">))</span>
    <span class="nv">craft</span>

    <span class="c1">; Stage!</span>
    <span class="ss">:else</span>
    <span class="p">(</span><span class="nb">merge </span><span class="p">(</span><span class="ss">:next-stage</span> <span class="nv">craft</span><span class="p">)</span>
           <span class="p">(</span><span class="nb">select-keys </span><span class="nv">craft</span> <span class="p">[</span><span class="ss">:time</span> <span class="ss">:position</span> <span class="ss">:velocity</span><span class="p">]))))</span>
</code>
<p>We’re using <code>cond</code> to handle three distinct cases: where there’s fuel remaining in the craft, where there is no stage to separate, and when we’re ready for stage separation. Separation is easy: we simply return the next stage of the current craft, with the current craft’s time, position, and velocity merged in.</p>

<p>Finally, we’ll have to update our <code>step</code> function to take into account the possibility of stage separation.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">step</span>
  <span class="p">[</span><span class="nv">craft</span> <span class="nv">dt</span><span class="p">]</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">craft</span> <span class="p">(</span><span class="nf">stage</span> <span class="nv">craft</span><span class="p">)]</span>
    <span class="p">(</span><span class="nb">assoc </span><span class="nv">craft</span>
           <span class="c1">; Time advances by dt seconds</span>
           <span class="ss">:time</span>      <span class="p">(</span><span class="nb">+ </span><span class="nv">dt</span> <span class="p">(</span><span class="ss">:time</span> <span class="nv">craft</span><span class="p">))</span>
           <span class="c1">; We burn some fuel</span>
           <span class="ss">:fuel-mass</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="ss">:fuel-mass</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">dt</span> <span class="p">(</span><span class="nf">fuel-rate</span> <span class="nv">craft</span><span class="p">)))</span>
           <span class="c1">; Our position changes based on our velocity</span>
           <span class="ss">:position</span>  <span class="p">(</span><span class="nb">merge-with + </span><span class="p">(</span><span class="ss">:position</span> <span class="nv">craft</span><span class="p">)</span>
                                  <span class="p">(</span><span class="nf">scale</span> <span class="nv">dt</span> <span class="p">(</span><span class="ss">:velocity</span> <span class="nv">craft</span><span class="p">)))</span>
           <span class="c1">; And our velocity changes based on our acceleration</span>
           <span class="ss">:velocity</span>  <span class="p">(</span><span class="nb">merge-with + </span><span class="p">(</span><span class="ss">:velocity</span> <span class="nv">craft</span><span class="p">)</span>
                                  <span class="p">(</span><span class="nf">scale</span> <span class="nv">dt</span> <span class="p">(</span><span class="nf">acceleration</span> <span class="nv">craft</span><span class="p">))))))</span>
</code>
<p>Same as before, only now we call <code>stage</code> prior to the physics simulation. Let’s try a launch.</p>
<code class="block">aphyr@waterhouse:~/scratch$ lein test scratch.rocket-test

lein test scratch.rocket-test
Crashed at 2415 seconds
Maximum altitude 4598444.289945109 meters at 1446 seconds

lein test :only scratch.rocket-test/makes-orbit

FAIL in (makes-orbit) (rocket_test.clj:27)
expected: (not (crashed? trajectory))
  actual: (not (not true))

Ran 2 tests containing 3 assertions.
1 failures, 0 errors.
Tests failed.</code>
<p>Still crashed–but we increased our apoapsis from 750 kilometers to 4,598 kilometers. That’s plenty high, but we’re still not making orbit. Why? Because we’re going straight up, then straight back down. To orbit, we need to move <em>sideways</em>, around the earth.</p>

<h2>Orbital insertion</h2>

<p>Our spacecraft is shooting upwards, but in order to remain in orbit around the earth, it has to execute a <em>second</em> burn: an orbital injection maneuver. That injection maneuver is also called a <em>circularization burn</em> because it turns the orbit from an ascending parabola into a circle (or something roughly like it). We don’t need to be precise about circularization–any trajectory that doesn’t hit the planet will suffice. All we have to do is burn towards the horizon, once we get high enough.</p>

<p>To do that, we’ll need to enhance the rocket’s control software. We assumed that the rocket would always thrust in the +x direction; but now we’ll need to thrust in multiple directions. We’ll break up the engine force into two parts: <code>thrust</code> (how hard the rocket motor pushes) and <code>orientation</code> (which determines the direction the rocket is pointing.)</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">unit-vector</span>
  <span class="s">"Scales coordinates to magnitude 1."</span>
  <span class="p">[</span><span class="nv">coordinates</span><span class="p">]</span>
  <span class="p">(</span><span class="nf">scale</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nf">magnitude</span> <span class="nv">coordinates</span><span class="p">))</span> <span class="nv">coordinates</span><span class="p">))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">engine-force</span>
  <span class="s">"The force vector, each component in Newtons, due to the rocket engine."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nf">scale</span> <span class="p">(</span><span class="nf">thrust</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="nf">unit-vector</span> <span class="p">(</span><span class="nf">orientation</span> <span class="nv">craft</span><span class="p">))))</span>
</code>
<p>We’re taking the orientation of the craft–some coordinates–and scaling it to be of length one with <code>unit-vector</code>. Then we’re scaling the orientation vector by the thrust, returning a <em>thrust vector</em>.</p>

<p>As we go back and redefine parts of the program, you might see an error like</p>
<code class="block">Exception in thread "main" java.lang.RuntimeException: Unable to resolve symbol: unit-vector in this context, compiling:(scratch/rocket.clj:69:11)
    at clojure.lang.Compiler.analyze(Compiler.java:6380)
    at clojure.lang.Compiler.analyze(Compiler.java:6322)</code>
<p>This is a stack trace from the Clojure compiler. It indicates that in <code>scratch/rocket.clj</code>, on line <code>69</code>, column <code>11</code>, we used the symbol <code>unit-vector</code>–but it didn’t have a meaning at that point in the program. Perhaps <code>unit-vector</code> is defined <em>below</em> that line. There are two ways to solve this.</p>

<ol>
<li><p>Organize your functions so that the simple ones come first, and those that depend on them come later. Read this way, namespaces tell a story, progressing from smaller to bigger, more complex problems.</p></li>
<li><p>Sometimes, ordering functions this way is impossible, or would put related ideas too far apart. In this case you can <code>(declare unit-vector)</code> near the top of the namespace. This tells Clojure that <code>unit-vector</code> isn’t defined <em>yet</em>, but it’ll come later.</p></li>
</ol>

<p>Now that we’ve broken up <code>engine-force</code> into <code>thrust</code> and <code>orientation</code>, we have to control the thrust properly for our two burns. We’ll start by defining the times for the initial ascent and circularization burn, expressed as vectors of start and end times, in seconds.</p>
<code class="block"><span class="p">(</span><span class="k">def </span><span class="nv">ascent</span>
  <span class="s">"The start and end times for the ascent burn."</span>
  <span class="p">[</span><span class="mi">0</span> <span class="mi">3000</span><span class="p">])</span>

<span class="p">(</span><span class="k">def </span><span class="nv">circularization</span>
  <span class="s">"The start and end times for the circularization burn."</span>
  <span class="p">[</span><span class="mi">4000</span> <span class="mi">1000</span><span class="p">])</span>
</code>
<p>Now we’ll change the thrust by adjusting the rate of fuel consumption. Instead of burning at maximum until running out of fuel, we’ll execute two distinct burns.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">fuel-rate</span>
  <span class="s">"How fast is fuel, in kilograms/second, consumed by the craft?"</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nf">cond</span>
    <span class="c1">; Out of fuel</span>
    <span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="ss">:fuel-mass</span> <span class="nv">craft</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
    <span class="mi">0</span>

    <span class="c1">; Ascent burn</span>
    <span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nb">first </span><span class="nv">ascent</span><span class="p">)</span> <span class="p">(</span><span class="ss">:time</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="nb">last </span><span class="nv">ascent</span><span class="p">))</span>
    <span class="p">(</span><span class="ss">:max-fuel-rate</span> <span class="nv">craft</span><span class="p">)</span>

    <span class="c1">; Circularization burn</span>
    <span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nb">first </span><span class="nv">circularization</span><span class="p">)</span> <span class="p">(</span><span class="ss">:time</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="nb">last </span><span class="nv">circularization</span><span class="p">))</span>
    <span class="p">(</span><span class="ss">:max-fuel-rate</span> <span class="nv">craft</span><span class="p">)</span>

    <span class="c1">; Shut down engines otherwise</span>
    <span class="ss">:else</span> <span class="mi">0</span><span class="p">))</span>
</code>
<p>We’re using <code>cond</code> to express four distinct possibilities: that we’ve run out of fuel, executing either of the two burns, or resting with the engines shut down. Because the comparison function <code>&lt;=</code> takes any number of arguments and asserts that they occur in order, expressing intervals like “the time is between the first and last times in the ascent” is easy.</p>

<p>Finally, we need to determine the <em>direction</em> to burn in. This one’s gonna require some tricky linear algebra. You don’t need to worry about the specifics here–the goal is to find out what direction the rocket should burn to fly towards the horizon, in a circle around the planet. We’re doing that by taking the rocket’s velocity vector, and <em>flattening out</em> the velocity towards or away from the planet. All that’s left is the direction the rocket is flying <em>around</em> the earth.</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">dot-product</span>
  <span class="s">"Finds the inner product of two x, y, z coordinate maps.</span>
<span class="s">  See http://en.wikipedia.org/wiki/Dot_product."</span>
  <span class="p">[</span><span class="nv">c1</span> <span class="nv">c2</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="ss">:x</span> <span class="nv">c1</span><span class="p">)</span> <span class="p">(</span><span class="ss">:x</span> <span class="nv">c2</span><span class="p">))</span>
     <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="ss">:y</span> <span class="nv">c1</span><span class="p">)</span> <span class="p">(</span><span class="ss">:y</span> <span class="nv">c2</span><span class="p">))</span>
     <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="ss">:z</span> <span class="nv">c1</span><span class="p">)</span> <span class="p">(</span><span class="ss">:z</span> <span class="nv">c2</span><span class="p">))))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">projection</span>
  <span class="s">"The component of coordinate map a in the direction of coordinate map b.</span>
<span class="s">  See http://en.wikipedia.org/wiki/Vector_projection."</span>
  <span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">b</span> <span class="p">(</span><span class="nf">unit-vector</span> <span class="nv">b</span><span class="p">)]</span>
    <span class="p">(</span><span class="nf">scale</span> <span class="p">(</span><span class="nf">dot-product</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">b</span><span class="p">)))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">rejection</span>
  <span class="s">"The component of coordinate map a *not* in the direction of coordinate map</span>
<span class="s">  b."</span>
  <span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span><span class="o">'</span> <span class="p">(</span><span class="nf">projection</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)]</span>
    <span class="p">{</span><span class="ss">:x</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="ss">:x</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="ss">:x</span> <span class="nv">a</span><span class="o">'</span><span class="p">))</span>
     <span class="ss">:y</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="ss">:y</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="ss">:y</span> <span class="nv">a</span><span class="o">'</span><span class="p">))</span>
     <span class="ss">:z</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="ss">:z</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="ss">:z</span> <span class="nv">a</span><span class="o">'</span><span class="p">))}))</span>
</code>
<p>With the mathematical underpinnings ready, we’ll define the orientation control software:</p>
<code class="block"><span class="p">(</span><span class="kd">defn </span><span class="nv">orientation</span>
  <span class="s">"What direction is the craft pointing?"</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nf">cond</span>
    <span class="c1">; Initially, point along the *position* vector of the craft--that is</span>
    <span class="c1">; to say, straight up, away from the earth.</span>
    <span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nb">first </span><span class="nv">ascent</span><span class="p">)</span> <span class="p">(</span><span class="ss">:time</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="nb">last </span><span class="nv">ascent</span><span class="p">))</span>
    <span class="p">(</span><span class="ss">:position</span> <span class="nv">craft</span><span class="p">)</span>

    <span class="c1">; During the circularization burn, we want to burn *sideways*, in the</span>
    <span class="c1">; direction of the orbit. We'll find the component of our velocity</span>
    <span class="c1">; which is aligned with our position vector (that is to say, the vertical</span>
    <span class="c1">; velocity), and subtract the vertical component. All that's left is the</span>
    <span class="c1">; *horizontal* part of our velocity.</span>
    <span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nb">first </span><span class="nv">circularization</span><span class="p">)</span> <span class="p">(</span><span class="ss">:time</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="nb">last </span><span class="nv">circularization</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">rejection</span> <span class="p">(</span><span class="ss">:velocity</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="ss">:position</span> <span class="nv">craft</span><span class="p">))</span>

    <span class="c1">; Otherwise, just point straight ahead.</span>
    <span class="ss">:else</span> <span class="p">(</span><span class="ss">:velocity</span> <span class="nv">craft</span><span class="p">)))</span>
</code>
<p>For the ascent burn, we’ll push straight away from the planet. For circularization, we use the <code>rejection</code> function to find the part of the velocity around the planet, and thrust in that direction. By default, we’ll leave the rocket pointing in the direction of travel.</p>

<p>With these changes made, the rocket should execute two burns. Let’s re-run the tests and see.</p>
<code class="block">aphyr@waterhouse:~/scratch$ lein test scratch.rocket-test

lein test scratch.rocket-test

Ran 2 tests containing 3 assertions.
0 failures, 0 errors.</code>
<p>We finally did it! We’re <em>rocket scientists</em>!</p>

<h2>Review</h2>
<code class="block"><span class="p">(</span><span class="kd">ns </span><span class="nv">scratch.rocket</span><span class="p">)</span>

<span class="c1">;; Linear algebra for {:x 1 :y 2 :z 3} coordinate vectors.</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">map-values</span>
  <span class="s">"Applies f to every value in the map m."</span>
  <span class="p">[</span><span class="nv">f</span> <span class="nv">m</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">into </span><span class="p">{}</span>
        <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
               <span class="p">[(</span><span class="nb">key </span><span class="nv">pair</span><span class="p">)</span> <span class="p">(</span><span class="nf">f</span> <span class="p">(</span><span class="nb">val </span><span class="nv">pair</span><span class="p">))])</span>
             <span class="nv">m</span><span class="p">)))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">magnitude</span>
  <span class="s">"What's the radius of a given set of cartesian coordinates?"</span>
  <span class="p">[</span><span class="nv">c</span><span class="p">]</span>
  <span class="c1">; By the Pythagorean theorem...</span>
  <span class="p">(</span><span class="nf">Math/sqrt</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">Math/pow</span> <span class="p">(</span><span class="ss">:x</span> <span class="nv">c</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">Math/pow</span> <span class="p">(</span><span class="ss">:y</span> <span class="nv">c</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">Math/pow</span> <span class="p">(</span><span class="ss">:z</span> <span class="nv">c</span><span class="p">)</span> <span class="mi">2</span><span class="p">))))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">scale</span>
  <span class="s">"Multiplies a map of x, y, and z coordinates by the given factor."</span>
  <span class="p">[</span><span class="nv">factor</span> <span class="nv">coordinates</span><span class="p">]</span>
  <span class="p">(</span><span class="nf">map-values</span> <span class="p">(</span><span class="nb">partial * </span><span class="nv">factor</span><span class="p">)</span> <span class="nv">coordinates</span><span class="p">))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">unit-vector</span>
  <span class="s">"Scales coordinates to magnitude 1."</span>
  <span class="p">[</span><span class="nv">coordinates</span><span class="p">]</span>
  <span class="p">(</span><span class="nf">scale</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nf">magnitude</span> <span class="nv">coordinates</span><span class="p">))</span> <span class="nv">coordinates</span><span class="p">))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">dot-product</span>
  <span class="s">"Finds the inner product of two x, y, z coordinate maps. See</span>
<span class="s">  http://en.wikipedia.org/wiki/Dot_product"</span>
  <span class="p">[</span><span class="nv">c1</span> <span class="nv">c2</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="ss">:x</span> <span class="nv">c1</span><span class="p">)</span> <span class="p">(</span><span class="ss">:x</span> <span class="nv">c2</span><span class="p">))</span>
     <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="ss">:y</span> <span class="nv">c1</span><span class="p">)</span> <span class="p">(</span><span class="ss">:y</span> <span class="nv">c2</span><span class="p">))</span>
     <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="ss">:z</span> <span class="nv">c1</span><span class="p">)</span> <span class="p">(</span><span class="ss">:z</span> <span class="nv">c2</span><span class="p">))))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">projection</span>
  <span class="s">"The component of coordinate map a in the direction of coordinate map b.</span>
<span class="s">  See http://en.wikipedia.org/wiki/Vector_projection."</span>
  <span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">b</span> <span class="p">(</span><span class="nf">unit-vector</span> <span class="nv">b</span><span class="p">)]</span>
    <span class="p">(</span><span class="nf">scale</span> <span class="p">(</span><span class="nf">dot-product</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">b</span><span class="p">)))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">rejection</span>
  <span class="s">"The component of coordinate map a *not* in the direction of coordinate map</span>
<span class="s">  b."</span>
  <span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span><span class="o">'</span> <span class="p">(</span><span class="nf">projection</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)]</span>
    <span class="p">{</span><span class="ss">:x</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="ss">:x</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="ss">:x</span> <span class="nv">a</span><span class="o">'</span><span class="p">))</span>
     <span class="ss">:y</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="ss">:y</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="ss">:y</span> <span class="nv">a</span><span class="o">'</span><span class="p">))</span>
     <span class="ss">:z</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="ss">:z</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="ss">:z</span> <span class="nv">a</span><span class="o">'</span><span class="p">))}))</span>

<span class="c1">;; Coordinate conversion</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">cartesian-&gt;spherical</span>
  <span class="s">"Converts a map of Cartesian coordinates :x, :y, and :z to spherical</span>
<span class="s">  coordinates :r, :theta, and :phi."</span>
  <span class="p">[</span><span class="nv">c</span><span class="p">]</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">r</span> <span class="p">(</span><span class="nf">magnitude</span> <span class="nv">c</span><span class="p">)]</span>
    <span class="p">{</span><span class="ss">:r</span>     <span class="nv">r</span>
     <span class="ss">:phi</span>   <span class="p">(</span><span class="nf">Math/acos</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="ss">:z</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">r</span><span class="p">))</span>
     <span class="ss">:theta</span> <span class="p">(</span><span class="nf">Math/atan</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="ss">:y</span> <span class="nv">c</span><span class="p">)</span> <span class="p">(</span><span class="ss">:x</span> <span class="nv">c</span><span class="p">)))}))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">spherical-&gt;cartesian</span>
  <span class="s">"Converts spherical to Cartesian coordinates."</span>
  <span class="p">[</span><span class="nv">c</span><span class="p">]</span>
  <span class="p">{</span><span class="ss">:x</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="ss">:r</span> <span class="nv">c</span><span class="p">)</span> <span class="p">(</span><span class="nf">Math/cos</span> <span class="p">(</span><span class="ss">:theta</span> <span class="nv">c</span><span class="p">))</span> <span class="p">(</span><span class="nf">Math/sin</span> <span class="p">(</span><span class="ss">:phi</span> <span class="nv">c</span><span class="p">)))</span>
   <span class="ss">:y</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="ss">:r</span> <span class="nv">c</span><span class="p">)</span> <span class="p">(</span><span class="nf">Math/sin</span> <span class="p">(</span><span class="ss">:theta</span> <span class="nv">c</span><span class="p">))</span> <span class="p">(</span><span class="nf">Math/sin</span> <span class="p">(</span><span class="ss">:phi</span> <span class="nv">c</span><span class="p">)))</span>
   <span class="ss">:z</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="ss">:r</span> <span class="nv">c</span><span class="p">)</span> <span class="p">(</span><span class="nf">Math/cos</span> <span class="p">(</span><span class="ss">:phi</span> <span class="nv">c</span><span class="p">)))})</span>

<span class="c1">;; The earth</span>

<span class="p">(</span><span class="k">def </span><span class="nv">earth-equatorial-radius</span>
  <span class="s">"Radius of the earth, in meters"</span>
  <span class="mi">6378137</span><span class="p">)</span>

<span class="p">(</span><span class="k">def </span><span class="nv">earth-day</span>
  <span class="s">"Length of an earth day, in seconds."</span>
  <span class="mi">86400</span><span class="p">)</span>

<span class="p">(</span><span class="k">def </span><span class="nv">earth-equatorial-speed</span>
  <span class="s">"How fast points on the equator move, relative to the center of the earth, in</span>
<span class="s">  meters/sec."</span>
  <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">Math/PI</span> <span class="nv">earth-equatorial-radius</span><span class="p">)</span>
     <span class="nv">earth-day</span><span class="p">))</span>

<span class="p">(</span><span class="k">def </span><span class="nv">g</span> <span class="s">"Acceleration of gravity in meters/s^2"</span> <span class="mf">-9.8</span><span class="p">)</span>

<span class="p">(</span><span class="k">def </span><span class="nv">initial-space-center</span>
  <span class="s">"The initial position and velocity of the launch facility"</span>
  <span class="p">{</span><span class="ss">:time</span>     <span class="mi">0</span>
   <span class="ss">:position</span> <span class="p">{</span><span class="ss">:x</span> <span class="nv">earth-equatorial-radius</span>
              <span class="ss">:y</span> <span class="mi">0</span>
              <span class="ss">:z</span> <span class="mi">0</span><span class="p">}</span>
   <span class="ss">:velocity</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">0</span>
              <span class="ss">:y</span> <span class="nv">earth-equatorial-speed</span>
              <span class="ss">:z</span> <span class="mi">0</span><span class="p">}})</span>


<span class="c1">;; Craft</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">centaur</span>
  <span class="s">"The upper rocket stage.</span>
<span class="s">  http://en.wikipedia.org/wiki/Centaur_(rocket_stage)</span>
<span class="s">  http://www.astronautix.com/stages/cenaurde.htm"</span>
  <span class="p">[]</span>
  <span class="p">{</span><span class="ss">:dry-mass</span>  <span class="mi">2361</span>
   <span class="ss">:fuel-mass</span> <span class="mi">13897</span>
   <span class="ss">:isp</span>       <span class="mi">4354</span>
   <span class="ss">:max-fuel-rate</span> <span class="p">(</span><span class="nb">/ </span><span class="mi">13897</span> <span class="mi">470</span><span class="p">)})</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">atlas-v</span>
  <span class="s">"The full launch vehicle. http://en.wikipedia.org/wiki/Atlas_V"</span>
  <span class="p">[</span><span class="nv">next-stage</span><span class="p">]</span>
  <span class="p">{</span><span class="ss">:dry-mass</span>  <span class="mi">50050</span>
   <span class="ss">:fuel-mass</span> <span class="mi">284450</span>
   <span class="ss">:isp</span> <span class="mi">3050</span>
   <span class="ss">:max-fuel-rate</span> <span class="p">(</span><span class="nb">/ </span><span class="mi">284450</span> <span class="mi">253</span><span class="p">)</span>
   <span class="ss">:next-stage</span> <span class="nv">next-stage</span><span class="p">})</span>

<span class="c1">;; Flight control</span>

<span class="p">(</span><span class="k">def </span><span class="nv">ascent</span>
  <span class="s">"The start and end times for the ascent burn."</span>
  <span class="p">[</span><span class="mi">0</span> <span class="mi">300</span><span class="p">])</span>

<span class="p">(</span><span class="k">def </span><span class="nv">circularization</span>
  <span class="s">"The start and end times for the circularization burn."</span>
  <span class="p">[</span><span class="mi">400</span> <span class="mi">1000</span><span class="p">])</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">orientation</span>
  <span class="s">"What direction is the craft pointing?"</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nf">cond</span>
    <span class="c1">; Initially, point along the *position* vector of the craft--that is</span>
    <span class="c1">; to say, straight up, away from the earth.</span>
    <span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nb">first </span><span class="nv">ascent</span><span class="p">)</span> <span class="p">(</span><span class="ss">:time</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="nb">last </span><span class="nv">ascent</span><span class="p">))</span>
    <span class="p">(</span><span class="ss">:position</span> <span class="nv">craft</span><span class="p">)</span>

    <span class="c1">; During the circularization burn, we want to burn *sideways*, in the</span>
    <span class="c1">; direction of the orbit. We'll find the component of our velocity</span>
    <span class="c1">; which is aligned with our position vector (that is to say, the vertical</span>
    <span class="c1">; velocity), and subtract the vertical component. All that's left is the</span>
    <span class="c1">; *horizontal* part of our velocity.</span>
    <span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nb">first </span><span class="nv">circularization</span><span class="p">)</span> <span class="p">(</span><span class="ss">:time</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="nb">last </span><span class="nv">circularization</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">rejection</span> <span class="p">(</span><span class="ss">:velocity</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="ss">:position</span> <span class="nv">craft</span><span class="p">))</span>

    <span class="c1">; Otherwise, just point straight ahead.</span>
    <span class="ss">:else</span> <span class="p">(</span><span class="ss">:velocity</span> <span class="nv">craft</span><span class="p">)))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">fuel-rate</span>
  <span class="s">"How fast is fuel, in kilograms/second, consumed by the craft?"</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nf">cond</span>
    <span class="c1">; Out of fuel</span>
    <span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="ss">:fuel-mass</span> <span class="nv">craft</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
    <span class="mi">0</span>

    <span class="c1">; Ascent burn</span>
    <span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nb">first </span><span class="nv">ascent</span><span class="p">)</span> <span class="p">(</span><span class="ss">:time</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="nb">last </span><span class="nv">ascent</span><span class="p">))</span>
    <span class="p">(</span><span class="ss">:max-fuel-rate</span> <span class="nv">craft</span><span class="p">)</span>

    <span class="c1">; Circularization burn</span>
    <span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nb">first </span><span class="nv">circularization</span><span class="p">)</span> <span class="p">(</span><span class="ss">:time</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="nb">last </span><span class="nv">circularization</span><span class="p">))</span>
    <span class="p">(</span><span class="ss">:max-fuel-rate</span> <span class="nv">craft</span><span class="p">)</span>

    <span class="c1">; Shut down engines otherwise</span>
    <span class="ss">:else</span> <span class="mi">0</span><span class="p">))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">stage</span>
  <span class="s">"When fuel reserves are exhausted, separate stages. Otherwise, return craft</span>
<span class="s">  unchanged."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nf">cond</span>
    <span class="c1">; Still fuel left</span>
    <span class="p">(</span><span class="nb">pos? </span><span class="p">(</span><span class="ss">:fuel-mass</span> <span class="nv">craft</span><span class="p">))</span>
    <span class="nv">craft</span>

    <span class="c1">; No remaining stages</span>
    <span class="p">(</span><span class="nb">nil? </span><span class="p">(</span><span class="ss">:next-stage</span> <span class="nv">craft</span><span class="p">))</span>
    <span class="nv">craft</span>

    <span class="c1">; Stage!</span>
    <span class="ss">:else</span>
    <span class="p">(</span><span class="nb">merge </span><span class="p">(</span><span class="ss">:next-stage</span> <span class="nv">craft</span><span class="p">)</span>
           <span class="p">(</span><span class="nb">select-keys </span><span class="nv">craft</span> <span class="p">[</span><span class="ss">:time</span> <span class="ss">:position</span> <span class="ss">:velocity</span><span class="p">]))))</span>

<span class="c1">;; Dynamics</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">thrust</span>
  <span class="s">"How much force, in newtons, does the craft's rocket engines exert?"</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nf">fuel-rate</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="ss">:isp</span> <span class="nv">craft</span><span class="p">)))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">mass</span>
  <span class="s">"The total mass of a craft."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="ss">:dry-mass</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="ss">:fuel-mass</span> <span class="nv">craft</span><span class="p">)))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">gravity-force</span>
  <span class="s">"The force vector, each component in Newtons, due to gravity."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="c1">; Since force is mass times acceleration...</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">total-force</span> <span class="p">(</span><span class="nb">* </span><span class="nv">g</span> <span class="p">(</span><span class="nf">mass</span> <span class="nv">craft</span><span class="p">))]</span>
    <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">craft</span>
        <span class="c1">; Now we'll take the craft's position</span>
        <span class="ss">:position</span>
        <span class="c1">; in spherical coordinates,</span>
        <span class="nv">cartesian-&gt;spherical</span>
        <span class="c1">; replace the radius with the gravitational force...</span>
        <span class="p">(</span><span class="nb">assoc </span><span class="ss">:r</span> <span class="nv">total-force</span><span class="p">)</span>
        <span class="c1">; and transform back to Cartesian-land</span>
        <span class="nv">spherical-&gt;cartesian</span><span class="p">)))</span>

<span class="p">(</span><span class="kd">declare </span><span class="nv">altitude</span><span class="p">)</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">engine-force</span>
  <span class="s">"The force vector, each component in Newtons, due to the rocket engine."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
<span class="c1">;  Debugging; useful for working through trajectories in detail.</span>
<span class="c1">;  (println craft)</span>
<span class="c1">;  (println "t   " (:time craft) "alt" (altitude craft) "thrust" (thrust craft))</span>
<span class="c1">;  (println "fuel" (:fuel-mass craft))</span>
<span class="c1">;  (println "vel " (:velocity craft))</span>
<span class="c1">;  (println "ori " (unit-vector (orientation craft)))</span>
  <span class="p">(</span><span class="nf">scale</span> <span class="p">(</span><span class="nf">thrust</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="nf">unit-vector</span> <span class="p">(</span><span class="nf">orientation</span> <span class="nv">craft</span><span class="p">))))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">total-force</span>
  <span class="s">"Total force on a craft."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">merge-with + </span><span class="p">(</span><span class="nf">engine-force</span> <span class="nv">craft</span><span class="p">)</span>
              <span class="p">(</span><span class="nf">gravity-force</span> <span class="nv">craft</span><span class="p">)))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">acceleration</span>
  <span class="s">"Total acceleration of a craft."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">m</span> <span class="p">(</span><span class="nf">mass</span> <span class="nv">craft</span><span class="p">)]</span>
    <span class="p">(</span><span class="nf">scale</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">m</span><span class="p">)</span> <span class="p">(</span><span class="nf">total-force</span> <span class="nv">craft</span><span class="p">))))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">step</span>
  <span class="p">[</span><span class="nv">craft</span> <span class="nv">dt</span><span class="p">]</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">craft</span> <span class="p">(</span><span class="nf">stage</span> <span class="nv">craft</span><span class="p">)]</span>
    <span class="p">(</span><span class="nb">assoc </span><span class="nv">craft</span>
           <span class="c1">; Time advances by dt seconds</span>
           <span class="ss">:time</span>      <span class="p">(</span><span class="nb">+ </span><span class="nv">dt</span> <span class="p">(</span><span class="ss">:time</span> <span class="nv">craft</span><span class="p">))</span>
           <span class="c1">; We burn some fuel</span>
           <span class="ss">:fuel-mass</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="ss">:fuel-mass</span> <span class="nv">craft</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">dt</span> <span class="p">(</span><span class="nf">fuel-rate</span> <span class="nv">craft</span><span class="p">)))</span>
           <span class="c1">; Our position changes based on our velocity</span>
           <span class="ss">:position</span>  <span class="p">(</span><span class="nb">merge-with + </span><span class="p">(</span><span class="ss">:position</span> <span class="nv">craft</span><span class="p">)</span>
                                  <span class="p">(</span><span class="nf">scale</span> <span class="nv">dt</span> <span class="p">(</span><span class="ss">:velocity</span> <span class="nv">craft</span><span class="p">)))</span>
           <span class="c1">; And our velocity changes based on our acceleration</span>
           <span class="ss">:velocity</span>  <span class="p">(</span><span class="nb">merge-with + </span><span class="p">(</span><span class="ss">:velocity</span> <span class="nv">craft</span><span class="p">)</span>
                                  <span class="p">(</span><span class="nf">scale</span> <span class="nv">dt</span> <span class="p">(</span><span class="nf">acceleration</span> <span class="nv">craft</span><span class="p">))))))</span>

<span class="c1">;; Launch and flight</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">prepare</span>
  <span class="s">"Prepares a craft for launch from an equatorial space center."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">merge </span><span class="nv">craft</span> <span class="nv">initial-space-center</span><span class="p">))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">trajectory</span>
  <span class="p">[</span><span class="nv">dt</span> <span class="nv">craft</span><span class="p">]</span>
  <span class="s">"Returns all future states of the craft, at dt-second intervals."</span>
  <span class="p">(</span><span class="nb">iterate </span><span class="o">#</span><span class="p">(</span><span class="nf">step</span> <span class="nv">%</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">craft</span><span class="p">))</span>

<span class="c1">;; Analyzing trajectories</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">altitude</span>
  <span class="s">"The height above the surface of the equator, in meters."</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">craft</span>
      <span class="ss">:position</span>
      <span class="nv">cartesian-&gt;spherical</span>
      <span class="ss">:r</span>
      <span class="p">(</span><span class="nb">- </span><span class="nv">earth-equatorial-radius</span><span class="p">)))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">above-ground?</span>
  <span class="s">"Is the craft at or above the surface?"</span>
  <span class="p">[</span><span class="nv">craft</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">&lt;= </span><span class="mi">0</span> <span class="p">(</span><span class="nf">altitude</span> <span class="nv">craft</span><span class="p">)))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">flight</span>
  <span class="s">"The above-ground portion of a trajectory."</span>
  <span class="p">[</span><span class="nv">trajectory</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">take-while </span><span class="nv">above-ground?</span> <span class="nv">trajectory</span><span class="p">))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">crashed?</span>
  <span class="s">"Does this trajectory crash into the surface before 10 hours are up?"</span>
  <span class="p">[</span><span class="nv">trajectory</span><span class="p">]</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">time-limit</span> <span class="p">(</span><span class="nb">* </span><span class="mi">10</span> <span class="mi">3600</span><span class="p">)]</span> <span class="c1">; 10 hours</span>
    <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">every? </span><span class="nv">above-ground?</span>
                 <span class="p">(</span><span class="nb">take-while </span><span class="o">#</span><span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="ss">:time</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">time-limit</span><span class="p">)</span> <span class="nv">trajectory</span><span class="p">)))))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">crash-time</span>
  <span class="s">"Given a trajectory, returns the time the rocket impacted the ground."</span>
  <span class="p">[</span><span class="nv">trajectory</span><span class="p">]</span>
  <span class="p">(</span><span class="ss">:time</span> <span class="p">(</span><span class="nb">last </span><span class="p">(</span><span class="nf">flight</span> <span class="nv">trajectory</span><span class="p">))))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">apoapsis</span>
  <span class="s">"The highest altitude achieved during a trajectory."</span>
  <span class="p">[</span><span class="nv">trajectory</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">apply max </span><span class="p">(</span><span class="nb">map </span><span class="nv">altitude</span> <span class="p">(</span><span class="nf">flight</span> <span class="nv">trajectory</span><span class="p">))))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">apoapsis-time</span>
  <span class="s">"The time of apoapsis"</span>
  <span class="p">[</span><span class="nv">trajectory</span><span class="p">]</span>
  <span class="p">(</span><span class="ss">:time</span> <span class="p">(</span><span class="nb">apply max-key </span><span class="nv">altitude</span> <span class="p">(</span><span class="nf">flight</span> <span class="nv">trajectory</span><span class="p">))))</span>
</code>
<p>As written here, our first non-trivial program tells a story–though a <em>different</em> one than the process of exploration and refinement that brought the rocket to orbit. It builds from small, abstract ideas: linear algebra and coordinates; physical constants describing the universe for the simulation; and the basic outline of the spacecraft. Then we define the software controlling the rocket; the times for the burns, how much to thrust, in what direction, and when to separate stages. Using those control functions, we build a <em>physics engine</em> including gravity and thrust forces, and use Newton’s second law to build a basic <a href="http://en.wikipedia.org/wiki/Euler_method">Euler Method</a> solver. Finally, we analyze the trajectories the solver produces to answer key questions: how high, how long, and did it explode?</p>

<p>We used Clojure’s immutable data structures–mostly maps–to represent the state of the universe, and defined <em>pure functions</em> to interpret those states and construct new ones. Using <code>iterate</code>, we projected a single state forward into an infinite timeline of the future–evaluated as demanded by the analysis functions. Though we pay a performance penalty, immutable data structures, pure functions, and lazy evaluation make simulating complex systems easier to reason about.</p>

<p>Had we written this simulation in a different language, different techniques might have come into play. In Java, C++, or Ruby, we would have defined a hierarchy of datatypes called <em>classes</em>, each one representing a small piece of state. We might define a <code>Craft</code> type, and created subtypes <code>Atlas</code> and <code>Centaur</code>. We’d create a <code>Coordinate</code> type, subdivided into <code>Cartesian</code> and <code>Spherical</code>, and so on. The types add complexity and rigidity, but also prevent mis-spellings, and can prevent us from interpreting, say, coordinates as craft or vice-versa.</p>

<p>To move the system forward in a language emphasizing <em>mutable</em> data structures, we would have updated the time and coordinates of a single craft in-place. This introduces additional complexity, because many of the changes we made depended on the current values of the craft. To ensure the correct ordering of calculations, we’d scatter temporary variables and explicit copies throughout the code, ensuring that functions didn’t see inconsistent pictures of the craft state. The mutable approach would likely be faster, but would still demand some copying of data, and sacrifice clarity.</p>

<p>More <em>imperative</em> languages place less emphasis on laziness, and make it harder to express ideas like <code>map</code> and <code>take</code>. We might have simulated the trajectory for some fixed time, constructing a history of all the intermediate results we needed, then analyzed it by moving explicitly from slot to slot in that history, checking if the craft had crashed, and so on.</p>

<p>Across all these languages, though, some ideas remain the same. We solve big problems by breaking them up into smaller ones. We use data structures to represent the state of the system, and functions to alter that state. Comments and docstrings clarify the <em>story</em> of the code, making it readable to others. Tests ensure the software is correct, and allow us to work piecewise towards a solution.</p>

<h2>Exercises</h2>

<ol>
<li><p>We know the spacecraft reached orbit, but we have no idea what that orbit <em>looks</em> like. Since the trajectory is infinite in length, we can’t ask about the <em>entire</em> history using <code>max</code>–but we know that all orbits have a high and low point. At the highest point, the difference between successive altitudes changes from increasing to decreasing, and at the lowest point, the difference between successive altitudes changes from decreasing to increasing. Using this technique, refine the <code>apoapsis</code> function to find the highest point using that <em>inflection</em> in altitudes–and write a corresponding <code>periapsis</code> function that finds the lowest point in the orbit. Display both periapsis and apoapsis in the test suite.</p></li>
<li><p>We assumed the force of gravity resulted in a constant 9.8 meter/second/second acceleration towards the earth, but in the real world, gravity falls off with the <a href="http://en.wikipedia.org/wiki/Newton's_law_of_universal_gravitation">inverse square law</a>. Using the mass of the earth, mass of the spacecraft, and Newton’s constant, refine the gravitational force used in this simulation to take Newton’s law into account. How does this affect the apoapsis?</p></li>
<li><p>We ignored the atmosphere, which exerts <a href="http://en.wikipedia.org/wiki/Drag_(physics)">drag</a> on the craft as it moves through the air. Write a basic air-density function which falls off with altitude. Make some educated guesses as to how much drag a real rocket experiences, and assume that the drag force is proportional to the square of the rocket’s velocity. Can your rocket still reach orbit?</p></li>
<li><p>Notice that the periapsis and apoapsis of the rocket are <em>different</em>. By executing the circularization burn carefully, can you make them the same–achieving a perfectly circular orbit? One way to do this is to pick an orbital altitude and velocity of a known satellite–say, the International Space Station–and write the control software to match that velocity at that altitude.</p></li>
</ol>

<p>In the next chapter, we talk about <a href="https://aphyr.com/posts/319-clojure-from-the-ground-up-debugging">debugging</a>.</p>              </p>
              <p class="meta"><a href="https://aphyr.com/posts/312-clojure-from-the-ground-up-modeling">Permalink</a></p>
            </article>
          </section>
          <section class="entry">
            <aside class="aside">
              <!-- <img src="static/i/favicon.gif" alt="Name of the Site" /> -->
              <h2><a href="https://javahippie.net/" title="Tim Zöller">The Java Hippie (Tim Zöller)</a></h2>
              <p>
August 28, 2020 10:05 AM                <br />
                <a href="https://javahippie.net/">Feed URL</a>
              </p>
            </aside>
            <article class="article">
              <h2><a href="https://javahippie.net/video/clojure/cloud/2020/08/28/functional-friday.html">Video: Functional Friday 1</a></h2>
              <p>
<p>Today I started a small streaming series on Twitch: Functional Friday. Every Friday at lunch time (for Germany) I will stream 30 minutes of work on a small Clojure web app, which will be able to run scaled in the cloud. Every video will be archived on my YouTube channel (see in social links below), in case you missed it or want to watch it later.</p>              </p>
              <p class="meta"><a href="https://javahippie.net/video/clojure/cloud/2020/08/28/functional-friday.html">Permalink</a></p>
            </article>
          </section>
          <section class="entry">
            <aside class="aside">
              <!-- <img src="static/i/favicon.gif" alt="Name of the Site" /> -->
              <h2><a href="https://www.clojuriststogether.org/" title="Clojurists Together">Clojurists Together</a></h2>
              <p>
August 27, 2020 02:00 AM                <br />
                <a href="https://www.clojuriststogether.org/">Feed URL</a>
              </p>
            </aside>
            <article class="article">
              <h2><a href="https://www.clojuriststogether.org/news/july-2020-monthly-update/">July 2020 Monthly Update</a></h2>
              <p>
<h2 id="new-members">New members</h2>

<p>Big welcome to our newest members, <a href="https://roamresearch.com">Roam Research</a> and <a href="https://www.cisco.com">Cisco</a>!</p>

<h2 id="cider">Cider</h2>

<p><strong>July 1-15</strong></p>

<ul>
<li>Got married :-)</li>
<li>My computer broke and I had to get a new one

<ul>
<li>Then I had to troubleshoot AMD GPU driver issues :-)</li>
</ul></li>
<li>Specified docs license (<a href="https://github.com/clojure-emacs/cider/issues/2740">https://github.com/clojure-emacs/cider/issues/2740</a>)</li>
<li>Tried to get CIDER’s ClojureDocs integration working with ClojureScript, but it turned out to be more complex than I initially expected. I’ll revisit this later. (<a href="https://github.com/clojure-emacs/cider/issues/2874">https://github.com/clojure-emacs/cider/issues/2874</a>)</li>
<li>Fixed a dependency bug in Orchard and cider-nrepl (<a href="https://github.com/clojure-emacs/orchard/issues/91">https://github.com/clojure-emacs/orchard/issues/91</a>)</li>
<li>Fix an eldoc issue on Emacs 28 (<a href="https://github.com/clojure-emacs/cider/issues/2875">https://github.com/clojure-emacs/cider/issues/2875</a>)</li>
<li>Cut a new Orchard release (0.5.11)</li>
<li>Bundle clojuredocs export with Orchard and cut version 0.6 (this eliminates the need to delete the data on demand when starting CIDER)</li>
<li>New docs sections

<ul>
<li>Code Evaluation (<a href="https://docs.cider.mx/cider/usage/code_evaluation.html">https://docs.cider.mx/cider/usage/code_evaluation.html</a>)</li>
<li>Working with Documentation (<a href="https://docs.cider.mx/cider/usage/working_with_documentation.html">https://docs.cider.mx/cider/usage/working_with_documentation.html</a>)</li>
<li>Profiling (<a href="https://docs.cider.mx/cider/debugging/profiling.html">https://docs.cider.mx/cider/debugging/profiling.html</a>)</li>
</ul></li>
<li>Various small documentation improvements</li>
<li>Discussed the addition of a potential UNIX socket transport for nREPL (<a href="https://github.com/nrepl/nrepl/pull/204">https://github.com/nrepl/nrepl/pull/204</a>)</li>
</ul>

<p>Between the unexpected wedding and my hardware issues I’m a bit behind my schedule, but I still managed to do some pretty good progress. On the bright side - I feel I’m way more productive with my new computer, especially when the GPU works. :D</p>

<p><strong>July 16-31</strong></p>

<p>Here’s the latest update.</p>

<ul>
<li>Investigated a mysterious spike in the traffic of clojuredocs-edn.netlify.app (it was 4 times higher this month compared to the previous month) - half a terabyte of clojuredocs-export.edn</li>
<li>Released cider-nrepl 0.25.3 (mostly to address the complaints about downloading the ClojureDocs export automatically)</li>
<li>Released inf-clojure 3.0 (no new functionality, but massive improvements to the internals)</li>
<li>Released nREPL 0.8 (as promised in <a href="https://metaredux.com/posts/2020/06/15/nrepl-0-8-evolving-the-protocol.html">https://metaredux.com/posts/2020/06/15/nrepl-0-8-evolving-the-protocol.html</a>)</li>
<li>Extended the nREPL docs on building new middleware (<a href="https://nrepl.org/nrepl/building_middleware.html">https://nrepl.org/nrepl/building_middleware.html</a>)</li>
<li>Fixed cider-mode not being auto-activated for babashka (<a href="https://github.com/clojure-emacs/cider/issues/2882">https://github.com/clojure-emacs/cider/issues/2882</a>)</li>
<li>Documented how to manually update one’s copy of the clojuredocs data</li>
<li>Merged Krell REPL support (<a href="https://github.com/clojure-emacs/cider/pull/2861">https://github.com/clojure-emacs/cider/pull/2861</a>)</li>
<li>Fixed an init bug when using babashka (<a href="https://github.com/clojure-emacs/cider/issues/2882">https://github.com/clojure-emacs/cider/issues/2882</a>)</li>
<li>Made connection-info babashka/generic nREPL server aware (<a href="https://github.com/clojure-emacs/cider/pull/2883">https://github.com/clojure-emacs/cider/pull/2883</a>)</li>
<li>Added cider-eval-list-at-point for evaluating code between paired delimiters (lists, vectors, etc)</li>
<li>Released CIDER 0.26 (“Nesebar”) (<a href="https://github.com/clojure-emacs/cider/releases/tag/v0.26.0">https://github.com/clojure-emacs/cider/releases/tag/v0.26.0</a>)</li>
</ul>

<p>I’m glad that despite some unforeseen circumstances I managed to finish the funding cycle with several major releases!
There’s a bit of work in progress that I plan to finish in the next couple of weeks and I’ll credit ClojureDocs for supporting it:</p>

<ul>
<li>write a couple of blog posts about recent changes and the profiler</li>
<li>add more gif-like demos to the docs</li>
<li>polish the sideloading functionality (have user and system sideloading, add better docs)</li>
<li>add more examples of CIDER features in hard-cider</li>
</ul>

<h2 id="figwheel">Figwheel</h2>

<p><strong>July 1-15</strong></p>

<p>The past two weeks were mostly dedicated getting React Native support
up and running.</p>

<h4 id="configuring-ssl-certificate-hosts-with-ssl-valid-hosts">Configuring SSL certificate hosts with <code>:ssl-valid-hosts</code></h4>

<p>Added a new
<a href="https://figwheel.org/config-options#ssl-valid-hosts"><code>:ssl-valid-hosts</code></a>
option will let you configure which hostnames and ips the generated
certificate considers valid.</p>

<h4 id="react-native-support">React Native Support</h4>

<p>React Native support is complete!</p>

<p>The minimal configuration for a React Native project in
<code>figwheel.main</code> is now:</p>

<pre><code>^{:react-native :cli}
{:main example.main}
</code></pre>

<p>This also supports React Native Expo CLI as well.</p>

<p>React Native support includes the compiler passes from
<a href="https://github.com/vouch-opensource/krell">Krell</a> which allows
<code>js/require</code> of assets like CSS and images.</p>

<p>Also spent time getting good production compilation support as well.</p>

<p>Please see the new <a href="https://figwheel.org/docs/react-native.html">React Native figwheel
documentation</a> for more
details.</p>

<p>This is pretty exciting because the time to get a native app up and
and under development is quite fast. Using Figwheel to do these things
is great because we get the familiar Figwheel reloading patterns and
other bells and whistles.</p>

<p>As a final test I was able to create a MacOS app via
<a href="https://github.com/Microsoft/react-native-macos">react-native-macos</a>
and it just worked without a hitch.</p>

<p>I really hope folks give the new React Native support a try as it’s a
joy to code a native app this way.</p>

<h4 id="released-figwheel-main-0-2-10">Released <code>figwheel.main 0.2.10</code></h4>

<p>All of the above and more has been released in <code>figwheel.main 0.2.10</code>.</p>

<p><strong>July 16-31</strong></p>

<h4 id="fixes">Fixes</h4>

<ul>
<li>Fixed bug introduced by a refactor that broke <code>:connect-url</code> this
has been deployed to 0.2.11</li>
</ul>

<h4 id="updated-the-figwheel-main-template">Updated the figwheel.main template</h4>

<p>The figwheel main template was in need of some major updates.</p>

<ul>
<li>om support has been removed</li>
<li>added the <code>+npm-bundle</code> option</li>
</ul>

<p>The <code>+npm-bundle</code> option will generate a Figwheel project that uses
the Figwheel’s new <code>:auto-bundle</code> feature and is a quick way to get
started with NPM in a Figwheel project.</p>

<p>I went through all the permutations of the CLI options for each to
ensure that the template works for the different tools and frameworks
and fixed several bugs in the process.</p>

<h4 id="added-a-tutorial-doc-on-how-to-use-nodejs-with-figwheel">Added a tutorial/doc on how to use Nodejs with Figwheel</h4>

<p>It’s always been possible to use Figwheel to develop Nodejs
applications in ClojureScript. But it certainly isn’t that clear how
to do so.</p>

<p>I added a document that shows how to set up a Nodejs application
includeing an example of how to create a hot reloadable <code>express</code>
application.</p>

<h4 id="much-much-thanks">Much Much thanks!</h4>

<p>A big thanks again to everyone who has come together to support this
work. All in all it has allowed me to make some major improvements. My
hope is that folks will find time to try out these new features, if
anyone encounters any problems please let me know.</p>

<h2 id="practicalli">Practicalli</h2>

<p><strong>July 1-15</strong></p>

<p>Continuous integration and deployment was the main focus of this period, with some Clojure spec generative testing.</p>

<p>Added Practicalli website and YouTube channel to the <a href="https://clojure.org/community/resources">Clojure.org community resources</a>.</p>

<h4 id="practicalli-study-group">Practicalli study group</h4>

<p>Continuing a tools theme by setting up continuous integration (CI) for Clojure projects.  The CI service partially written in Clojure provides good support for Clojure projects.  Building on CircleCI to deploy Clojure applications to the Cloud using the Heroku service.</p>

<p>Broadcasts also cover using Kaocha generative test runner, both locally and on CircleCI</p>

<ul>
<li><a href="https://youtu.be/WLcaXuAH1Ew">077 - Continuous Integration - Clojure deps.edn and Leiningen projects</a></li>
<li><a href="https://youtu.be/sXZKrD4cAFk">78 - Continuous Integration - Clojure deps.edn projects and CircleCI</a></li>
<li><a href="https://youtu.be/P0D3W_ugfdA">079 - Continuous Integration - Deploying deps.edn project on Heroku via CirecleCI</a></li>
</ul>

<p>Content developed for Practicalli Clojure and Practicalli Clojure Webapps books.</p>

<h4 id="practicalli-clojure">Practicalli Clojure</h4>

<p>Created several guides for new and existent projects, using CircleCI as a continuous integration service.  Kaocha is also used to run generative tests as well as unit tests.</p>

<p>Created <a href="http://practicalli.github.io/clojure/testing/integration-testing/circle-ci/random-clojure-function.html">an introduction to CircleCI as a continuous integration service</a> and identified and documented recommended docker images to use for Clojure deps.edn and Leinigen projects.  The CircleCI examples are a little dated and includes only Leinginen project examples.</p>

<p><strong>Random Clojure Function project</strong>.
Created a guide to develop a project that <a href="http://practicalli.github.io/clojure/simple-projects/random-clojure-function.html">generates a random function</a> from the namepaces available in the REPL or the functions from specified namespaces.</p>

<p>Using the <a href="http://practicalli.github.io/clojure/simple-projects/random-clojure-function.html">random Clojure function project</a>, created a <a href="http://practicalli.github.io/clojure/testing/integration-testing/circle-ci/random-clojure-function.html">guide to develop a project with the help of CircleCI</a> as the continuous integration service.</p>

<p><strong>Banking on Clojure</strong>
Updated the <a href="http://practicalli.github.io/clojure/clojure-spec/projects/bank-account/">banking-on-clojure project</a> using a TDD approach with Clojure spec.</p>

<p>Using Kaocha test runner run unit tests and Clojure spec generative tests locally and via CirceCI. Kaocha can run the same tests as clojure.spec.test.alpha/test function calls, without having to add code to the project. Adding the spect-check-plugin via the test.edn config did not run the generative tests, only the unit tests. Use the spec-test-check plugin to run the reports works when included as a command line flag.</p>

<h4 id="practicalli-clojure-webapps">Practicalli Clojure Webapps</h4>

<p>Created <a href="https://practicalli.github.io/clojure-webapps/projects/status-monitor-deps/">a guide to deploy a Clojure application via CirceCI onto Heroku</a>. Think of Heroku as AWS without the cognative load to use it, simply push source code to Heroku and it builds and deploys the resulting application.</p>

<p>Updated the status monitor project to deps.edn to use as the basis for a guide to deploy Clojure applications via CircleCI to Heroku (a cloud platform as a service). The project takes a simple approach so the focus remains on the continuous integration pipeline.</p>

<p>CircleCI has an Heroku Orb, providing common configuration for deploying to Heroku.  The Heroku orb is used to deploy the project from its source code, building an uberjar and running the application from that uberjar.</p>

<p>Updated details of using postgresql with Clojure (documentation will be extended soon) and recommended next.java as a library to use for SQL.</p>

<p>Simplified the overall navigation on the Practicalli Clojure Webapps book.</p>

<h4 id="practicalli-spacemacs">Practicalli Spacemacs</h4>

<p>Rewrite of the switch to develop page, using in-page tabs to simplify the guide into the two different approaches.</p>

<h4 id="hacking-on-spacemacs">Hacking on Spacemacs</h4>

<p>Added key bindings to refactor namespace forms in clojure-mode</p>

<p><code>"ran" 'clojure-insert-ns-form</code>
<code>"raN" 'clojure-insert-ns-form-at-point</code>
<code>"rsn" 'clojure-sort-ns</code></p>

<p>Updated <a href="https://github.com/practicalli/spacemacs.d/">practicalli/.spacemacs.d</a> repository with doom modeline configuration, providing a very clean and simple UI experience for Emacs whilst still providing the most useful information.</p>

<p><strong>July 16-31</strong></p>

<p>Started series called Banking on Clojure to cover application servers, sql and relational databases.  This will cover the full development and deployment workflow, including clojure.spec for specifications and generative testing.</p>

<p>Added more tools to practicalli/clojure-deps-edn</p>

<p>Add anchors to all sub-headings across all books, making content easier to navigate by enabling navigation to specific sections in a page.  This helps keep relevant information together on one page and reference a specific section from other pages.</p>

<h4 id="practicalli-clojure-webapp">Practicalli Clojure WebApp</h4>

<p>Started a section on <a href="https://practicalli.github.io/clojure-webapps/app-servers/">Application servers</a>, covering approaches to server configuration and server start/stop/reload.</p>

<p>Started a section on Databases that will initially cover H2 and Postgresql relational databases, using Sql with next.jdbc</p>

<p>Created Banking on Clojure WebApp content for the live broadcasts and book.  The project uses CircleCI for continuous integration and Heroku pipelines for deployment to staging and production.</p>

<h4 id="practicalli-clojure-1">Practicalli Clojure</h4>

<p>Configure REPL startup using <code>dev/user.clj</code> file and <code>:dev</code> alias in practicalli/clojure-deps-edn configuration.  Added examples of <a href="http://practicalli.github.io/clojure/clojure-tools/configure-repl-startup.html">requiring namespaces and starting component lifecycle services at REPL starup</a> added to Practicalli Clojure book.</p>

<p>Add section on <a href="https://practicalli.github.io/clojure/clojure-tools/data-browsers/">data browser tools</a>, extending REBL and Clojure Inspector with new projects Reveal and Portal.</p>

<h4 id="practicalli-clojure-deps-edn">practicalli/clojure-deps-edn</h4>

<p>Identified main purpose of the practicalli/clojure-deps-edn project, to provide a large set of meaningful and consistently named aliases that would be available in all projects and less likely to be over-ridden by project specific deps.edn configuration.</p>

<p>Any experimental or alpha state tools are clearly marked as ‘experimental - used at own risk’ to set clear expectations.</p>

<p>Updated libraries used in aliases are using their fully qualified names, e.g. cider/cider-nrepl as this will be required for future versions of the Clojure CLI tool.</p>

<p>Added Google Storage mirrors for Maven Central for Americas, Asia and Europe to library repository configuration.  Also added a community mirror in Asia (China) for Clojars.</p>

<p>Recent alias additions include
- <code>:dev</code> - include the <code>/dev/ path to configure REPL startup with a /dev/user.clj file
-</code>rebel-nrepl<code>- run rebel REPL with nrepl connection for editor connections (eg. CIDER, Calva)
-</code>:nrebl<code>- REBL data browser on nREPL connection (e.g. CIDER, Calva)
-</code>:deploy-locally<code>to add a jar to _/.m2 directory
-</code>:deploy-clojars<code>to deploy a jar on clojars.org
-</code>:deploy-clojars-signed<code>to sign and deploy a jar on clojars.org
-</code>:carve<code>- a new project to carve out unused vars in code
-</code>:repl-reveal` - a REPL with data browser</p>

<h4 id="practicalli-spacemacs-1">Practicalli Spacemacs</h4>

<p>Add Emacs profiler use to the <a href="https://practicalli.github.io/spacemacs/install-spacemacs/troubleshooting.html">Spacemacs troubleshooting guide</a></p>

<h4 id="pull-requests">Pull requests</h4>

<ul>
<li>carve - fixed alias in docs</li>
</ul>

<h2 id="re-frame">Re-frame</h2>

<p>Most of the Clojurists Together work was completed in the first sprint earlier in the year in May.</p>

<p>However we have released a stable v1.0.0 version of re-frame which is major milestone in the project’s history.</p>

<p>Also, many improvements to the docs have been made recently. Too many to mention but some are notable:</p>

<ul>
<li>added a new FAQ on <a href="https://day8.github.io/re-frame/FAQs/laggy-input/">laggy input</a></li>
<li>added a new FAQ on <a href="https://day8.github.io/re-frame/FAQs/FocusOnElement/">field focus</a></li>
<li>added to existing FAQ on <a href="https://day8.github.io/re-frame/FAQs/GlobalInterceptors/#answer-v100-onwards">global interceptors</a></li>
<li>Additions made to <a href="https://day8.github.io/re-frame/External-Resources/">External-Resources</a></li>
<li>completely reworked <a href="https://day8.github.io/re-frame/event-handling-infographic/">Infographics for Dominoes 1,2 3</a></li>
<li>completely reworked <a href="https://day8.github.io/re-frame/Interceptors/#infographics">Infographics for Interceptors</a>. See also other explanations added to that tutorial.</li>
</ul>

<p>Also:
  - closed #590
  - created #627 and developed a corresponding PR #628
  - React native and other niggles resolved in v1.0.0-rc* releases. See #604  #614  #615.</p>

<p>Numerically, we’re at 16 issues and 4 pull requests.</p>              </p>
              <p class="meta"><a href="https://www.clojuriststogether.org/news/july-2020-monthly-update/">Permalink</a></p>
            </article>
          </section>
          <section class="entry">
            <aside class="aside">
              <!-- <img src="static/i/favicon.gif" alt="Name of the Site" /> -->
              <h2><a href="https://scicloj.github.com" title="SciCloj">The Clojure scientific hub</a></h2>
              <p>
August 25, 2020 09:00 PM                <br />
                <a href="https://scicloj.github.com">Feed URL</a>
              </p>
            </aside>
            <article class="article">
              <h2><a href="https://scicloj.github.com/posts/2020-08-26-public-meeting-2020-08-30/">Preparing to our public meeting on August 30th</a></h2>
              <p>
<p>A lot is happening in the Clojure data science ecosystem. While the infrastructure and tooling are gradually maturing, new libraries and experiments are rising. It seems that we are on a phase transition, and some beautiful things are about to happen.</p><p>It is a good time to meet and catch up, hear about active projects and discuss future directions and ways to collaborate.</p><p>That is what we will be doing in the <a href="https://twitter.com/scicloj/status/1291845872884625408">public meeting</a> on the coming Sunday, August 30th 2020.</p><h2 id="time">Time</h2><p>We will meet at 5pm UTC, for 90m minutes. Please check your time difference from <a href="https://time.is/UTC">the UTC timezone</a>.</p><p>The next public meeting is planned to take on a different hour, more comfortable to the friends in East Asia.</p><h2 id="joining_the_meeting">Joining the meeting</h2><p>Please register in <a href="https://tinyurl.com/y4a2w79g">the registration form</a>.</p><p>You will get an email with a calendar invitation and a Zoom link.</p><p><strong>Edit:</strong> You can also see the calendar event with the Zoom link <a href="https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=NGViazd2cjNhdjNsdG03OXFnczhvOHFhdTkgc2NpY2xvakBt&amp;tmsrc=scicloj%40gmail.com">here</a>.</p><h2 id="plan">Plan</h2><p>We will have a sequence of 5min lightning talks, then some discussion.</p><p>Below is the tentative plan. Several more friends have mentioned they might speak too, but haven't confirmed yet. If you wish to add your name to the list, please kindly email <a href="mailto:scicloj@gmail.com">scicloj@gmail.com</a>.</p><ul><li><a href="https://www.linkedin.com/in/anthony-khong/">Anthony Khong</a> will speak about <a href="https://github.com/zero-one-group/geni">Geni</a> – a new Clojure library that wraps <a href="https://spark.apache.org/">Apache Spark</a>.</li><li><a href="https://twitter.com/daslu_">Daniel Slutsky</a> will share a workflow with some of the new libraries and tools, including <a href="https://github.com/scicloj/tablecloth">Tablecloth</a>, <a href="https://github.com/pink-gorilla/gorilla-ui">Gorilla-UI</a> and an experimental branch of <a href="https://github.com/scicloj/Notespace">Notespace</a>.</li><li><a href="https://github.com/jsa-aerial">Jon Anthony</a> will present a demonstration of building interactive dashboards with <a href="https://github.com/jsa-aerial/saite">Saite</a>.</li><li><a href="https://twitter.com/mtraven">Michael Travers</a> will give <a href="https://drive.google.com/file/d/1WSsW6Y9cexKm7n6Ts6QwDC8lgV1-pzdf/view">a presentation</a> about a visual query builder for knowledge graphs.</li><li><a href="https://twitter.com/metasoarous">Christopher Small</a> will present the work he has been doing on <a href="https://twitter.com/UsePolis">Polis</a> analyses with <a href="https://github.com/clj-python/libpython-clj">Libpython-clj</a>, the <a href="https://github.com/techascent/tech.ml">tech.ml</a> stack, <a href="https://github.com/metasoarous/oz">Oz</a> &amp; <a href="https://github.com/clojupyter/clojupyter">Clojupyter</a> in a Docker environment.</li><li><a href="https://twitter.com/ontomd">Sivaram Arabandi</a> will give a presentation on imprecise data.</li><li><a href="https://twitter.com/replomancer">Łukasz Kożuchowski</a> will talk about <a href="https://en.wikipedia.org/wiki/Differential_privacy">Differential Privacy</a> in Clojure (a work in progress open source library).</li></ul>              </p>
              <p class="meta"><a href="https://scicloj.github.com/posts/2020-08-26-public-meeting-2020-08-30/">Permalink</a></p>
            </article>
          </section>
          <section class="entry">
            <aside class="aside">
              <!-- <img src="static/i/favicon.gif" alt="Name of the Site" /> -->
              <h2><a href="https://purelyfunctional.tv" title="PurelyFunctional.tv">PurelyFunctional.tv Clojure articles</a></h2>
              <p>
August 24, 2020 10:00 AM                <br />
                <a href="https://purelyfunctional.tv">Feed URL</a>
              </p>
            </aside>
            <article class="article">
              <h2><a href="https://purelyfunctional.tv/issues/purelyfunctional-tv-newsletter-392-command-your-repl/">PurelyFunctional.tv Newsletter 392: command your repl</a></h2>
              <p>
<div class=" reset">
<p><em>Issue 392 – August 24, 2020 · <a href="https://purelyfunctional.tv/newsletter-archives/">Archives</a> · <a href="https://purelyfunctional.tv/newsletter/" title="Thanks, Jeff!">Subscribe</a></em></p>
<h2>Clojure Tip 💡</h2>
<p><em>command your repl</em></p>
<p>Last week, I mentioned that there are three editor commands you need to know to do REPL-driven development (RDD). These three commands are all you should really need. Of course, more commands will give you more nuance. But I wanted to select the bare minimum that gives you all of the benefits of RDD.</p>
<p>Those commands are all evaluation commands. They differ only in what they compile. Here they are:</p>
<ol>
<li>Evaluate one expression</li>
<li>Evaluate a top-level form</li>
<li>Evaluate the whole file</li>
</ol>
<p>You, as the programmer, have to decide which one to do at any given time. It turns out that the five most popular Clojure editors all have these three commands. I’ve run this by many experienced Clojure programmers and they agree that these are a minimal set.</p>
<p>How do you decide what command is right? My rule is pretty simple: compile the thing you are working on.</p>
<p>If you’re modifying a function, evaluate the function (a top-level form). If you’re moving stuff around the namespace, evaluate the whole file. And if you’re testing out what a single expression does, evaluate that expression.</p>
<p>Those three commands will give you the granularity you need to use 99% of the time. I’ve got <a href="https://purelyfunctional.tv/lesson/compiling-and-executing-code-from-your-clojure-editor/#notes" title="">a lesson on how to evaluate code</a>, which includes the 3 commands for the top-5 editors (check the Notes), which I’ve made free for the time being.</p>
<h2>Quarantine update 😷</h2>
<p>I know a lot of people are going through tougher times than I am. If you, for any reason, can’t afford my courses, and you think the courses will help you, please hit reply and I will set you up. It’s a small gesture I can make, but it might help.</p>
<p>I don’t want to shame you or anybody that we should be using this time to work on our skills. The number one priority is your health and safety. I know I haven’t been able to work very much, let alone learn some new skill. But if learning Clojure is important to you, and you can’t afford it, just hit reply and I’ll set you up. Keeping busy can keep us sane.</p>
<p>Also, if you just want to subscribe for a paid membership, I have opened them back up for the moment. Register <a href="https://purelyfunctional.tv/register/" title="">here</a>.</p>
<p>Stay healthy. Wash your hands. Stay at home. Wear a mask. Take care of loved ones.</p>
<h2>Clojure Challenge 🤔</h2>
<h3>Last week’s challenge</h3>
<p>I’m currently out of town so I haven’t published the submissions for Issue 391. I will do it when I get back.</p>
<p>Please do participate in the discussion on the <a href="https://gist.github.com/ericnormand/1524630ea3d4cadb84c588a19fccea89" title="">gist where the submissions are hosted</a>. It’s active and it’s a great way to get comments on your code.</p>
<h3>This week’s challenge</h3>
<p><strong>Binary search</strong></p>
<p>If I give you a sorted vector of integers, you can search through it quickly using binary search to know if it contains a given number <code>n</code>. Is <code>n</code> right in the middle? If yes, you’re done. If not, then you either have to search the left half or the right half. Since the numbers are sorted, you can check if <code>n</code> is greater than or less than the middle number. You can then recurse down into the appropriate half. Your task is to write this function.</p>
<pre><code>(binary-search 3 [1 2 3]) ;=&gt; true
(binary-search 4 [1 2 5]) ;=&gt; false
(binary-search 10 [1 2 4 5 9 10 11 12]) ;=&gt; true
</code></pre>
<p>You can assume you’re passed a sorted vector.</p>
<p>Thanks to <a href="https://edabit.com/challenge/kfXz49avvohsYSxoe" title="">this site</a> for the challenge idea where it is considered Hard level in Python.</p>
<p>You can also find these same instructions <a href="https://gist.github.com/ericnormand/892bcb31280859727c2375c7d41bea81" title="">here</a>. I might update them to correct errors and clarify the descriptions. That’s also where submissions will be posted. And there’s a great discussion!</p>
<p>As usual, please reply to this email and let me know what you tried. I’ll collect them up and share them in the next issue. If you don’t want me to share your submission, let me know.</p>
<p>Rock on!<br />Eric Normand</p>
</div>
<p>The post <a href="https://purelyfunctional.tv/issues/purelyfunctional-tv-newsletter-392-command-your-repl/" rel="nofollow">PurelyFunctional.tv Newsletter 392: command your repl</a> appeared first on <a href="https://purelyfunctional.tv" rel="nofollow">PurelyFunctional.tv</a>.</p>              </p>
              <p class="meta"><a href="https://purelyfunctional.tv/issues/purelyfunctional-tv-newsletter-392-command-your-repl/">Permalink</a></p>
            </article>
          </section>
          
          <footer id="footer">
            <p>
              Copyright &copy; 2009, Planet Clojure. No rights reserved.
              <br />
              Planet Clojure is maintained by <a href="http://freegeek.in/">Baishamapayan Ghose</a>.
              <br />
              Clojure and the Clojure logo are Copyright &copy; 2008-2009, Rich Hickey.
              <br />
              Theme by <a href="http://brajeshwar.com/">Brajeshwar</a>.
            </p>
          </footer>

        </div>
      </div>

      <div id="sidebar">
        <div id="sidebar-content">
          <section id="search">
	    <form action="http://www.google.com/cse" id="cse-search-box"> 
              <input type="hidden" name="cx" value="013940287744875509343:60ybe0lrjm4" /> 
              <input type="hidden" name="ie" value="UTF-8" /> 
              <input type="text" name="q" class="input-txt" /> 
              <input type="submit" name="sa" value="Search" /> 
            </form> 
          </section>

          <section id="about" class="sidebar-list">
            <h3>About</h3>
            <p>Planet Clojure is a meta blog that collects posts from the blogs of various <a href="http://clojure.org/">Clojure</a> hackers and contributors.</p>
            <p>It is edited by <a href="http://freegeek.in/">Baishampayan Ghose</a> and <a href="http://alexott.net/en/index.html">Alex Ott</a>. Please <a href="http://github.com/ghoseb/planet.clojure">send them a patch</a> if you want your blog to be syndicated here.</p>
          </section>
          
          <section class="sidebar-list">
            <h3>Subscriptions</h3>
            <ul>
                <li>
                  <a href="https://oli.me.uk/" title="Oliver Caldwell's blog">"(ollie {:on :parens})"</a>
                </li>
                <li>
                  <a href="https://corfield.org/" title="Category: Clojure | An Architect's View">"An Architect's View"</a>
                </li>
                <li>
                  <a href="https://cbds.netlify.app/tags/clojure/" title="Clojure on Carsten's blog">"Carsten's data science blog"</a>
                </li>
                <li>
                  <a href="http://clojurelx.blogspot.com/" title="Clojure &amp; lx">"Clojure & lx"</a>
                </li>
                <li>
                  <a href="http://dhruvp.github.io/" title="Dhruv's Blog">"Dhruv's Blog"</a>
                </li>
                <li>
                  <a href="http://digitheadslabnotebook.blogspot.com/search/label/clojure" title="Digithead's Lab Notebook">"Digithead's Lab Notebook"</a>
                </li>
                <li>
                  <a href="http://fdatamining.blogspot.com/search/label/clojure" title="F# and Data Mining">"F# and Data Mining"</a>
                </li>
                <li>
                  <a href="http://gigasquid.github.io//github/" title="Hitchhiker's Guide to Clojure">"Hitchhiker's Guide to Clojure"</a>
                </li>
                <li>
                  <a title="Jack Rusher's Internet Homestead">"Jack Rusher's Journal"</a>
                </li>
                <li>
                  <a href="https://jacobobryant.com" title="Clojure articles from Jacob O'Bryant">"Jacob O'Bryant"</a>
                </li>
                <li>
                  <a href="https://hypirion.com" title="Polymatheia">"Jean Niklas L'orange"</a>
                </li>
                <li>
                  <a href="https://metaljoe.wordpress.com" title="Clojure – John's Reflections">"John's Coding Reflections"</a>
                </li>
                <li>
                  <a href="https://www.oreilly.com/radar" title="Radar">"O'Reilly Radar"</a>
                </li>
                <li>
                  <a class="message" title="internal server error">"O'Reilly blogs"</a>
                </li>
                <li>
                  <a href="http://philcalcado.com/" title="Phil Calçado">"Phil Calçado"</a>
                </li>
                <li>
                  <a href="http://emekamicro.blogspot.com/search/label/Clojure" class="message" title="internal server error">"Programmer[:world]"</a>
                </li>
                <li>
                  <a href="http://thinkrelevance.com/blog/" class="message" title="404: not found">"Relevance Inc.'s blog"</a>
                </li>
                <li>
                  <a href="http://blog.remvee.net/" title="remvee blog">"Remco van 't Veer"</a>
                </li>
                <li>
                  <a href="https://medium.swirrl.com?source=rss----26e0e03e444f---4" title="Swirrl's Blog - Medium">"Swirrl's blog"</a>
                </li>
                <li>
                  <a href="http://techblog.zenrobotics.com/search/label/clojure" title="ZenRobotics R&amp;D Blog">"ZenRobotics R&D Blog"</a>
                </li>
                <li>
                  <a href="http://clojure-and-me.blogspot.com/" title="(+ Clojure me)">(+ clojure me)</a>
                </li>
                <li>
                  <a title="(blog)">(paren)</a>
                </li>
                <li>
                  <a class="message" title="404: not found">040 Code. A developers blog</a>
                </li>
                <li>
                  <a href="https://8thlight.com/blog/" title="8th Light Blog">8thlight Inc.</a>
                </li>
                <li>
                  <a href="https://medium.com/@dave.d.dixon?source=rss-8c37337a7ac1------2" title="Stories by Spark Of Reason on Medium">A Spark of Reason (Dave Dixon)</a>
                </li>
                <li>
                  <a href="https://aws.amazon.com/blogs/compute/" title="AWS Compute Blog">AWS Compute Blog</a>
                </li>
                <li>
                  <a href="http://aaroniba.net/feed/" title="Aaron Iba's Blog">Aaron Iba</a>
                </li>
                <li>
                  <a href="https://www.activestate.com" title="ActiveState">ActiveState</a>
                </li>
                <li>
                  <a href="https://medium.com/adstage-engineering?source=rss----b4e2fd62f213---4" title="AdStage Engineering - Medium">AdStage Engineering @ Medium</a>
                </li>
                <li>
                  <a href="http://tech.adstage.io/" title="AdStage Engineering Blog">AdStage Engineering Blog</a>
                </li>
                <li>
                  <a href="https://adambard.com/blog/" title="Adam Bard Makes Words">Adam Bard</a>
                </li>
                <li>
                  <a href="http://adamsolove.com/" title="Document Function Model - Clojure">Adam C.M. Solove</a>
                </li>
                <li>
                  <a href="https://adamclements.github.io/feed.xml" title="AdamClements">Adam Clements</a>
                </li>
                <li>
                  <a href="http://adam.pohorecki.pl/" title="Category: clojure | Adam Pohorecki">Adam Pohorecki</a>
                </li>
                <li>
                  <a href="http://tankthinks.net" title="Tank Thinks">Adam Tankanow</a>
                </li>
                <li>
                  <a href="http://www.adrianmouat.com/bit-bucket" title="Feeding the Bit Bucket">Adrian Mouat</a>
                </li>
                <li>
                  <a href="http://mowat27.blogspot.com/search/label/clojure" title="coding@mowat27">Adrian Mowat</a>
                </li>
                <li>
                  <a href="https://medium.com/@sfyire?source=rss-c9c34e60b464------2" title="Stories by adrian smith on Medium">Adrian Smith</a>
                </li>
                <li>
                  <a href="https://adzerk.com" title="">Adzerk Blog</a>
                </li>
                <li>
                  <a href="https://agiliway.com" title="Agiliway">Agiliway</a>
                </li>
                <li>
                  <a title="">Aidan Finn</a>
                </li>
                <li>
                  <a href="https://medium.com/@akiroz?source=rss-fb8418b3b76c------2" title="Stories by akiroz on Medium">Akiroz</a>
                </li>
                <li>
                  <a href="http://www.thebusby.com/" title="TheBusby">Alan Busby</a>
                </li>
                <li>
                  <a href="https://alanmarazzi.gitlab.io" title="Alan Marazzi">Alan Marazzi</a>
                </li>
                <li>
                  <a href="https://alejandro.run/" title="(run alejandro)">Alejandro Gómez</a>
                </li>
                <li>
                  <a href="http://AlexBaranosky.github.io/" title="Category: clojure | (elegant coding from a more civilized age)">Alex Baranosky</a>
                </li>
                <li>
                  <a href="https://medium.com/@alexdixon?source=rss-3e5cbb19de3c------2" title="Stories by Alex Dixon on Medium">Alex Dixon</a>
                </li>
                <li>
                  <a href="https://alexeberts.com" title="ClojureScript – Alex Eberts">Alex Eberts</a>
                </li>
                <li>
                  <a href="http://aheusingfeld.github.io/" title="goldstift's blog">Alex Heusingfeld</a>
                </li>
                <li>
                  <a title="">Alex Miller</a>
                </li>
                <li>
                  <a href="http://alexott.blogspot.com/search/label/clojure" title="Alex Ott's blog">Alex Ott</a>
                </li>
                <li>
                  <a href="http://www.bytopia.org" title="Bytopia.org">Alex Yakushev</a>
                </li>
                <li>
                  <a href="https://alexanderoloo.com/" title="Alexander Oloo">Alexander Oloo</a>
                </li>
                <li>
                  <a href="https://medium.com/@alwxdev?source=rss-e1056ae9964------2" title="Stories by Alexander Pantyukhov on Medium">Alexander Pantyukhov</a>
                </li>
                <li>
                  <a href="https://solovyov.net/blog.atom" title="solovyov.net">Alexander Solovyov</a>
                </li>
                <li>
                  <a href="http://blog.alex-turok.com/search/label/clojure" title="Courage">Alexander Turok</a>
                </li>
                <li>
                  <a href="https://grison.me/" title="Stuff and Thoughts on IT Stuff">Alexandre Grison</a>
                </li>
                <li>
                  <a href="https://alfredodinapoli.wordpress.com" title="clojure – Web life between Python and lambda calculus">Alfredo Di Napoli</a>
                </li>
                <li>
                  <a href="http://arohner.blogspot.com/search/label/clojure" title="/dev/rohner">Allen Rohner</a>
                </li>
                <li>
                  <a href="http://blagrants.blogspot.com/search/label/Clojure" title="Blag's bag of rants">Alvaro "Blag" Tejada Galindo</a>
                </li>
                <li>
                  <a href="http://videlalvaro.github.com/" title="Alvaro Videla">Alvaro Videla</a>
                </li>
                <li>
                  <a href="https://blog.ambrosebs.com" title="dissoc">Ambrose Bonnaire-Sergeant</a>
                </li>
                <li>
                  <a href="https://s-expressions.com" title="clojure – s-expressions">Amit Rathore</a>
                </li>
                <li>
                  <a href="http://amsclj.nl" title="Amsterdam Clojurians Meetup">Amsterdam Clojurians Meetup</a>
                </li>
                <li>
                  <a href="https://andrearichiardi.com/" title="Programming Clojure, ClojureScript and Node.js.">Andrea Richiardi</a>
                </li>
                <li>
                  <a href="http://andrewberls.com" title="Andrew Berls">Andrew Berls</a>
                </li>
                <li>
                  <a href="https://brehaut.net" title="A Lazy Sequence">Andrew Brehaut</a>
                </li>
                <li>
                  <a href="https://blog.andrewvc.com/" title="Andrew Cholakian’s Blog">Andrew Cholakian</a>
                </li>
                <li>
                  <a href="http://git.slothrop.net" title="Some Clojure Projects">Andrew Cowper</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Andrew Gwozdziewycz</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Andrew Hobden</a>
                </li>
                <li>
                  <a href="https://amontalenti.com" title="Andrew Montalenti">Andrew Montalenti</a>
                </li>
                <li>
                  <a href="http://www.theatticlight.net/" title="Andrews Website Feed">Andrew Stine</a>
                </li>
                <li>
                  <a href="http://blog.mishkovskyi.net/" title="(into blog (filter tech? thoughts))">Andrii Mishkovskyi</a>
                </li>
                <li>
                  <a href="https://grumpyhacker.com/" title="Grumpy Hacker">Andy Chambers</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Anna Pawlicka</a>
                </li>
                <li>
                  <a href="https://www.anthony-galea.com/categories/clojure/" title="clojure on Anthony Galea">Anthony Galea</a>
                </li>
                <li>
                  <a href="http://astashov.github.io/" title="Anton Astashov's blog">Anton Astashov</a>
                </li>
                <li>
                  <a href="https://programmingzen.com" title="Programming Zen">Antonio Cangiano</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Antonio Terreno</a>
                </li>
                <li>
                  <a href="http://github.com/dylang/node-rss" title="anmonteiro">António Nuno Monteiro</a>
                </li>
                <li>
                  <a href="http://appliedscience.studio/articles" title="Applied Science">Applied Science blog</a>
                </li>
                <li>
                  <a href="https://medium.com/appsflyer?source=rss----2736d8c2498d---4" title="AppsFlyer - Medium">AppsFlyer</a>
                </li>
                <li>
                  <a href="http://arachne-framework.org/posts" title="Arachne">Arachne Framework</a>
                </li>
                <li>
                  <a href="https://arcadia-unity.tumblr.com/" title="Arcadia">Arcadia</a>
                </li>
                <li>
                  <a href="http://arcanesentiment.blogspot.com/" title="Arcane Sentiment">Arcane Sentiment</a>
                </li>
                <li>
                  <a href="http://aria42.com" title="">Aria Haghighi</a>
                </li>
                <li>
                  <a href="http://loganis-data-science.blogspot.com/search/label/Clojure" title="Loganis - Data Science - Λογανυς">Arnold Matyasi</a>
                </li>
                <li>
                  <a href="https://endlessparentheses.com/?source=rss" title="Endless Parentheses">Artur Malabarba</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Ashton Kemerling</a>
                </li>
                <li>
                  <a href="https://asimjalis.github.io/" title="Asim Jalis">Asim Jalis</a>
                </li>
                <li>
                  <a href="http://astrecipes.net/" title="AstRecipes">AstRecipes</a>
                </li>
                <li>
                  <a href="https://kaygun.tumblr.com/" title="Atabey Kaygun">Atabey Kaygun</a>
                </li>
                <li>
                  <a href="http://community.ative.dk/blogs/ative/archive/tags/clojure/default.aspx" title="Ative at Work : clojure">Ative at Work</a>
                </li>
                <li>
                  <a href="https://blog.developer.atlassian.com" title="Atlassian Developer Blog">Atlassian Developers Blog</a>
                </li>
                <li>
                  <a href="https://spin.atomicobject.com" title="Atomic Spin">Atomic Spin</a>
                </li>
                <li>
                  <a title="August Lilleaas' blog">August Lilleaas</a>
                </li>
                <li>
                  <a href="https://blog.avisi.nl" title="Avisi Blog">Avisi</a>
                </li>
                <li>
                  <a href="https://bfontaine.net/blog/" title="Baptiste Fontaine’s Blog">Baptiste Fontaine</a>
                </li>
                <li>
                  <a href="https://blog.beanstalkapp.com/" title="Beanstalk">Beanstalk</a>
                </li>
                <li>
                  <a href="https://benatkin.com" title="clojure – Benjamin Atkin">Ben Atkin</a>
                </li>
                <li>
                  <a href="http://pixelmachine.org" title="pixelmachine: clojure desk">Ben Hughes</a>
                </li>
                <li>
                  <a title="">Ben Kamphaus</a>
                </li>
                <li>
                  <a href="https://www.benrady.com/" title="Radyology">Ben Rady</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Ben Sima</a>
                </li>
                <li>
                  <a href="https://bsless.github.io/" title="bsless">Ben Sless</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Bendyworks</a>
                </li>
                <li>
                  <a href="http://benedekfazekas.github.io" title="Of Herbs and Stewed Rabbit">Benedek Fazekas</a>
                </li>
                <li>
                  <a href="ios-app://305343404/tumblr/x-callback-url/blog?blogName=bbrinck&amp;postID=133112722153" class="message" title="internal server error">Benjamin Brinckerhoff</a>
                </li>
                <li>
                  <a href="https://betweentwoparens.com" title="Between Two Parens RSS Feed">Between Two Parens</a>
                </li>
                <li>
                  <a title="">Big Astronaut</a>
                </li>
                <li>
                  <a href="http://1034.node7.isx.dk" title="BIG SAFARI">Big Safari</a>
                </li>
                <li>
                  <a href="https://blog.bigml.com" title="The Official Blog of BigML.com">BigML.com</a>
                </li>
                <li>
                  <a href="https://www.birkey.co/" title="BirkeyCo">Birkey Consulting</a>
                </li>
                <li>
                  <a href="http://blakesmith.me" title="create. code. learn.">Blake Smith</a>
                </li>
                <li>
                  <a href="https://bleu-barbeau.com/" title="Bleu Barbeau - The world in an atom">Bleu Barbeau - The world in an atom</a>
                </li>
                <li>
                  <a href="http://bobnadler.com/" title="Bob Nadler, Jr.">Bob Nadler</a>
                </li>
                <li>
                  <a href="https://medium.com/@puppybits?source=rss-dc239c658997------2" title="Stories by Bobby @ fiskal.app on Medium">Bobby Schultz</a>
                </li>
                <li>
                  <a href="http://blog.bonnieeisenman.com" title="Bonnie Eisenman">Bonnie Eisenman</a>
                </li>
                <li>
                  <a href="https://bcbio.wordpress.com" title="clojure – Blue Collar Bioinformatics">Brad Chapman</a>
                </li>
                <li>
                  <a href="https://www.bradcypert.com" title="Brad Cypert">Brad Cypert</a>
                </li>
                <li>
                  <a href="http://blog.bradlucas.com/" title="Brad Lucas' Blog - Mostly about programming, Clojure and other interests">Brad Lucas</a>
                </li>
                <li>
                  <a href="http://brandonbloom.github.io/" title="You work for me, Computer.">Brandon Bloom</a>
                </li>
                <li>
                  <a href="https://jobs.braveclojure.com" title="Brave Clojure Jobs">Brave Clojure Jobs</a>
                </li>
                <li>
                  <a href="http://threebrothers.org/brendan/" title="Quod erat faciendum">Brendan Ribera</a>
                </li>
                <li>
                  <a href="http://sprungcanary.net/" title="Sprung Canary">Bret Young</a>
                </li>
                <li>
                  <a href="https://befuddled.dev/" title="BEFUDDLED·DEV">Brian Carper</a>
                </li>
                <li>
                  <a href="https://blog.mediocregopher.com/" title="Mediocre Blog">Brian Picciano</a>
                </li>
                <li>
                  <a href="http://www.50ply.com/" title="50Ply Blog">Brian Taylor</a>
                </li>
                <li>
                  <a href="http://bridgetconsulting.com" title="Clojure – Bridget">Bridget Hillyer</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Brittany Martin</a>
                </li>
                <li>
                  <a href="https://otfrom.wordpress.com" title="clojure – Wifi and Coffee">Bruce Durling</a>
                </li>
                <li>
                  <a href="http://rigsomelight.com" title="Bruce Hauman's Blog">Bruce Hauman</a>
                </li>
                <li>
                  <a href="http://blog.brunobonacci.com//" title="Bits and pieces">Bruno Bonacci</a>
                </li>
                <li>
                  <a href="http://brunov.org" title="Bruno Vecchi - Clojure">Bruno Vecchi</a>
                </li>
                <li>
                  <a title="Random.next()">Bryan Gilbert</a>
                </li>
                <li>
                  <a href="https://medium.com/building-nubank?source=rss----472303f1ec06---4" title="Building Nubank - Medium">Building Nubank</a>
                </li>
                <li>
                  <a href="http://www.ccri.com" title="CCRi">CCRi</a>
                </li>
                <li>
                  <a href="http://getctx.io/blog/" title="clojure - ctx search">CTX Blog</a>
                </li>
                <li>
                  <a href="https://camsaul.com/" title="camsaul.com">Cam Saul</a>
                </li>
                <li>
                  <a href="https://cambium.consulting/articles/" title="Articles - Cambium Consulting">Cambium Consulting</a>
                </li>
                <li>
                  <a href="https://camdez.com/tags/clojure/" title="Clojure on camdez">Cameron Desautels</a>
                </li>
                <li>
                  <a href="http://uydurmalar.blogspot.com/" title="losing and finding the donkey">Can Candan</a>
                </li>
                <li>
                  <a href="https://blog.carbonfive.com" title="Blog by Carbon Five">Carbon Five</a>
                </li>
                <li>
                  <a href="http://gigasquid.github.io/" title="Squid's Blog">Carin Meier</a>
                </li>
                <li>
                  <a href="http://localhost:4000" title="CodeHopper -- Software done right">Carlo Sciolla</a>
                </li>
                <li>
                  <a href="https://carmen.la/" title="Carmen La">Carmen La</a>
                </li>
                <li>
                  <a href="https://carouselapps.com" class="message" title="internal server error">Carousel Apps</a>
                </li>
                <li>
                  <a href="http://blog.carsoncheng.ca/search/label/Clojure" title="Propositional Content Encode">Carson Cheng</a>
                </li>
                <li>
                  <a href="http://www.cassiel.com" title="Clojure – cassiel">Cassiel</a>
                </li>
                <li>
                  <a href="http://www.chadbraunduin.com/" title="Chad Braun-Duin">Chad Braun-Duin</a>
                </li>
                <li>
                  <a href="https://chariotsolutions.com" title="Chariot Solutions">Chariot Solutions</a>
                </li>
                <li>
                  <a href="https://cemerick.com" title="Clojure – cemerick">Chas Emerick</a>
                </li>
                <li>
                  <a href="https://cheesecakelabs.com" title="Blog – Cheesecake Labs">Cheesecake Labs</a>
                </li>
                <li>
                  <a href="https://medium.com/@chris_betz?source=rss-c0e896b8c0ea------2" title="Stories by Dr. Christian Betz on Medium">Chris Betz</a>
                </li>
                <li>
                  <a href="https://cb.codes" class="message" title="404: not found">Chris Bui</a>
                </li>
                <li>
                  <a href="https://medium.com/@chrisdaviesgeek?source=rss-1dcad496b8a8------2" title="Stories by Chris Davies on Medium">Chris Davies</a>
                </li>
                <li>
                  <a href="http://literateprogrammer.blogspot.com/" title="the literate programmer">Chris Ford</a>
                </li>
                <li>
                  <a href="http://chris-granger.com/" title="chris-granger.com">Chris Granger</a>
                </li>
                <li>
                  <a href="http://mytediousblog.blogspot.com/search/label/clojure" title="My Tedious Blog">Chris Jenkins</a>
                </li>
                <li>
                  <a href="http://blog.kilosecond.com/" title="Category: clojure | Kilosecond Blog">Chris Shea</a>
                </li>
                <li>
                  <a href="https://medium.com/@chris.shellenbarger?source=rss-92f630fdce98------2" title="Stories by Chris Shellenbarger on Medium">Chris Shellenbarger</a>
                </li>
                <li>
                  <a href="http://minley.org" title="minley.org">Chris Wilson</a>
                </li>
                <li>
                  <a href="https://blog.chriswoodford.ca" title="Hacksonomy">Chris Woodford</a>
                </li>
                <li>
                  <a href="https://blog.cfelde.com" title="ClojureScript – Blog of Christian Felde">Christian Felde</a>
                </li>
                <li>
                  <a href="https://whilo.github.io/" title="(replicate thoughts)">Christian Weilbach</a>
                </li>
                <li>
                  <a href="http://clj-me.cgrand.net" title="Clojure and me">Christophe Grand</a>
                </li>
                <li>
                  <a href="http://kuriqoo.blogspot.com/search/label/clojure" title="Computing for fun">Christophe Verré</a>
                </li>
                <li>
                  <a href="http://christophermaier.name/" class="message" title="404: not found">Christopher Maier</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Christopher Small</a>
                </li>
                <li>
                  <a href="https://circleci.com/blog/" title="The CircleCI Blog Feed - CircleCI">CircleCI</a>
                </li>
                <li>
                  <a href="https://blog.doppioslash.com/" title="clojure - Recursive Thoughts">Claudia Doppioslash</a>
                </li>
                <li>
                  <a href="https://clivetong.wordpress.com" title="Thirty years tapping a keyboard">Clive Tong</a>
                </li>
                <li>
                  <a href="https://clojure-art-group.tumblr.com/" title="Untitled">Clojure Art Group Berlin</a>
                </li>
                <li>
                  <a href="http://clojure-goes-fast.com" title="Clojure Goes Fast">Clojure Goes Fast</a>
                </li>
                <li>
                  <a href="https://lispjobs.wordpress.com" title="clojure – Lispjobs">Clojure Jobs</a>
                </li>
                <li>
                  <a href="http://reactiveclojure.blogspot.com/" title="Clojure Reactive Programming">Clojure Reactive Programming</a>
                </li>
                <li>
                  <a href="https://clojuresync.com" title="Clojure SYNC">Clojure SYNC News</a>
                </li>
                <li>
                  <a href="https://clojurestudydc.wordpress.com" title="Clojure Study Group DC">Clojure Study Group DC</a>
                </li>
                <li>
                  <a href="https://us19.campaign-archive.com/feed?u=f5dea183eae58baf7428a4425&amp;id=ef5512dc35" title="Clojure Weekly Archive Feed">Clojure Weekly</a>
                </li>
                <li>
                  <a href="https://channel9.msdn.com/Tags/clojure" title="Channel 9 - Entries tagged with Clojure">Clojure at Channel9@MSDN</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Clojure at IBM developerWorks</a>
                </li>
                <li>
                  <a href="https://www.infoq.com" title="InfoQ">Clojure at InfoQ</a>
                </li>
                <li>
                  <a href="http://clojuredatascience.com/" title="Clojure for Data Science">Clojure for Data Science</a>
                </li>
                <li>
                  <a href="https://clojure-lab.tumblr.com/" title="Untitled">Clojure lab</a>
                </li>
                <li>
                  <a href="https://medium.com/clojure-on-the-beam?source=rss----4aa9efa6c524---4" title="Clojure on the BEAM - Medium">Clojure on the BEAM</a>
                </li>
                <li>
                  <a href="https://clojure.org" title="Clojure News">Clojure.org</a>
                </li>
                <li>
                  <a href="http://clojure-gsoc.org//" class="message" title="internal server error">Clojure/GSoC</a>
                </li>
                <li>
                  <a href="http://2017.clojurewest.org" title="Clojure/west">Clojure/West Conference</a>
                </li>
                <li>
                  <a href="http://clojure.com/blog/" title="Clojure/core Blog">Clojure/core</a>
                </li>
                <li>
                  <a href="http://clojureforscience.novonon.com" title="Clojure: For Science!">Clojure: For Science!</a>
                </li>
                <li>
                  <a href="https://clojure.livejournal.com/" title="clojure">Clojure@LJ</a>
                </li>
                <li>
                  <a href="http://clojureclr.blogspot.com/" title="ClojureCLR">ClojureCLR</a>
                </li>
                <li>
                  <a href="https://clojuredocs.wordpress.com" title="Clojure – The ClojureDocs Blog">ClojureDocs</a>
                </li>
                <li>
                  <a href="https://clojurescript.org" title="ClojureScript News">ClojureScript News</a>
                </li>
                <li>
                  <a href="http://clojurescriptmadeeasy.com/" title="Clojurescript Made Easy">Clojurescript Made Easy</a>
                </li>
                <li>
                  <a href="https://www.clojuriststogether.org/" title="Clojurists Together">Clojurists Together</a>
                </li>
                <li>
                  <a href="https://codahale.com//" title="codahale.com">Coda Hale</a>
                </li>
                <li>
                  <a href="http://www.codeadventurer.com/" title="Category: clojure | Code Adventurer">Code Adventurer</a>
                </li>
                <li>
                  <a href="http://blog.codeabout.info/search/label/clojure" title="Codeabout">Codeabout</a>
                </li>
                <li>
                  <a href="https://codurance.com/atom.xml" title="Codurance">Codurance</a>
                </li>
                <li>
                  <a href="https://www.cognitect.com/cognicast/" title="Cognicast">Cognicast</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Cognitect</a>
                </li>
                <li>
                  <a href="https://medium.com/@softwarecf?source=rss-b7e8637b2c32------2" title="Stories by Colin Fallon on Medium">Colin Fallon</a>
                </li>
                <li>
                  <a href="https://www.colinsteele.org/" title="Colin Steele's Blog">Colin Steele</a>
                </li>
                <li>
                  <a href="https://engineering.collbox.co/tags/clojure/" title="Clojure on CollBox Engineering">CollBox Engineering</a>
                </li>
                <li>
                  <a href="https://colourcoding.net" title="Colour Coding">Colour Coding</a>
                </li>
                <li>
                  <a href="http://conan.is/" title="Conan Is Blogging">Conan Is Blogging</a>
                </li>
                <li>
                  <a href="http://ecmendenhall.github.io/blog/" title="Category: Clojure | Connor Mendenhall">Connor Mendenhall</a>
                </li>
                <li>
                  <a href="https://www.contentreich.de" title="CONTENTREICH">Contentreich</a>
                </li>
                <li>
                  <a href="https://juliangamble.com/blog" class="message" title="internal server error">Cool Pacific</a>
                </li>
                <li>
                  <a href="https://corgibytes.com/" title="Corgibytes">Corgibytes</a>
                </li>
                <li>
                  <a href="https://epiccastle.io/blog/" title="Epiccastle Blog">Crispin Wellington</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Csaba Okrona</a>
                </li>
                <li>
                  <a href="https://curiousprogrammer.net" title="Curious (Clojure) Programmer">Curious (Clojure) Programmer</a>
                </li>
                <li>
                  <a href="http://slyrus.github.com/" title="Cyrus Harmon">Cyrus Harmon</a>
                </li>
                <li>
                  <a class="message" title="410: gone">DZone</a>
                </li>
                <li>
                  <a href="http://dailytechvideo.com" title="Clojure – Daily Tech Video">Daily Tech Video (Clojure)</a>
                </li>
                <li>
                  <a href="http://www.dalnefre.com/wp" title="Clojure – It's Actors All The Way Down">Dale Schumacher</a>
                </li>
                <li>
                  <a href="http://damionjunk.com/tags/clojure/" title="Clojure on (:damion @world-state)">Damion Junk</a>
                </li>
                <li>
                  <a href="http://danboykis.com/" title="Dan's Thoughts">Dan Boykis</a>
                </li>
                <li>
                  <a href="https://danielcompton.net" title="Daniel Compton">Daniel Compton</a>
                </li>
                <li>
                  <a href="http://nounsvsverbs.blogspot.com/search/label/clojure" title="Nouns vs. Verbs">Daniel Glauser</a>
                </li>
                <li>
                  <a href="http://www.flyingmachinestudios.com/" title="Flying Machine Studios">Daniel Higginbotham</a>
                </li>
                <li>
                  <a href="https://dpritchett.net/" title="Daniel Pritchett">Daniel J. Pritchett</a>
                </li>
                <li>
                  <a href="http://blog.danieljanus.pl" title="code · words · emotions: Daniel Janus’s blog">Daniel Janus</a>
                </li>
                <li>
                  <a href="https://medium.com/@daniel.oliver.king?source=rss-8dad49c4d059------2" title="Stories by Daniel King on Medium">Daniel King</a>
                </li>
                <li>
                  <a href="https://danlebrero.com" title="Daniel Lebrero Berna Blog">Daniel Lebrero</a>
                </li>
                <li>
                  <a href="https://metaphysicaldeveloper.wordpress.com" title="clojure – Metaphysical Developer">Daniel Ribeiro</a>
                </li>
                <li>
                  <a href="http://spector.io/atom.xml" title="Daniel Spector">Daniel Spector</a>
                </li>
                <li>
                  <a href="http://danielsz.github.io" title="Perfumed Nightmare - Clojure">Daniel Szmulewicz</a>
                </li>
                <li>
                  <a href="https://medium.com/@darioghilardi?source=rss-46f08dda19fe------2" title="Stories by Dario Ghilardi on Medium">Dario Ghilardi</a>
                </li>
                <li>
                  <a href="http://darrenknewton.com" title="Miscellanea">Darren Newton</a>
                </li>
                <li>
                  <a href="https://blog.datomic.com/" class="message" title="403: forbidden">Datomic</a>
                </li>
                <li>
                  <a href="https://blog.datopia.io/" title="Datopia">Datopia</a>
                </li>
                <li>
                  <a href="https://blog.davemartin.me/" class="message" title="duplicate subscription: https://clojure-conundrums.co.uk/index.xml">Dave Martin</a>
                </li>
                <li>
                  <a href="http://www.upgradingdave.com/" title="Upgrading Dave">Dave Paroulek</a>
                </li>
                <li>
                  <a class="message" title="404: not found">David Cabana</a>
                </li>
                <li>
                  <a href="https://clojure-conundrums.co.uk/index.xml" title="Clojure Conundrums">David Martin</a>
                </li>
                <li>
                  <a href="https://david-mcneil.com/" title="(david-mcneil.com :blog)">David McNeil</a>
                </li>
                <li>
                  <a href="https://dvcrn.github.io/" title="David Mohl">David Mohl</a>
                </li>
                <li>
                  <a href="http://swannodette.github.com" title="dosync">David Nolen</a>
                </li>
                <li>
                  <a href="http://www.coconut-palm-software.com/bliki/" title="Data in Motion blog">David Orme</a>
                </li>
                <li>
                  <a href="https://owensd.io" title="owensd.io">David Owens II</a>
                </li>
                <li>
                  <a href="https://blog.goodstuff.im" title="DPP's Blog">David Pollak</a>
                </li>
                <li>
                  <a href="https://medium.com/@davidrupp?source=rss-2b402299ecf6------2" title="Stories by David Rupp on Medium">David Rupp</a>
                </li>
                <li>
                  <a href="http://davidrupp.blogspot.com/search/label/clojure" title="David Rupp's Blog">David Rupp</a>
                </li>
                <li>
                  <a class="message" title="404: not found">David Soria Parra</a>
                </li>
                <li>
                  <a href="http://debasishg.blogspot.com/" title="Ruminations of a Programmer">Debasish Ghosh</a>
                </li>
                <li>
                  <a href="http://www.deepbluelambda.org/" title="Deep Blue Lambda">Deep Blue Lambda</a>
                </li>
                <li>
                  <a href="https://medium.com/degree9/tagged/clojure?source=rss----b6c2485247e4--clojure" title="Clojure in degree9 on Medium">Degree9</a>
                </li>
                <li>
                  <a href="https://www.democracy.works/blog/" title="Blog - Democracy Works">Democracy Works</a>
                </li>
                <li>
                  <a href="https://www.demystifyfp.com/clojure/" title="Clojures on Demystify FP">Demystify FP</a>
                </li>
                <li>
                  <a href="http://www.plusastra.com/search/label/clojure" title="Plus Astra">Denis Fuenzalida on PlusAstra</a>
                </li>
                <li>
                  <a href="http://cataclysmicmutation.com/" title="Cataclysmic Mutation">Deon Garrett</a>
                </li>
                <li>
                  <a href="https://www.deps.co/tags/clojure/" title="Clojure on Deps">Deps</a>
                </li>
                <li>
                  <a class="message" title="http status 503">Dev + Ops at Otto.de</a>
                </li>
                <li>
                  <a href="https://www.devcycle.co.uk/" title="DevCycle">DevCycle</a>
                </li>
                <li>
                  <a href="https://devender.me" title="clojure – Devender's Musings">Devender Gollapally</a>
                </li>
                <li>
                  <a href="http://blog.dhananjaynene.com/" title="/var/log/mind">Dhananjay Nene</a>
                </li>
                <li>
                  <a href="https://diegobasch.com" title="Diego Basch">Diego Basch</a>
                </li>
                <li>
                  <a href="http://www.dillonforrest.com/startup" title="Dillon's Startup Journey">Dillon Forrest</a>
                </li>
                <li>
                  <a href="https://yogthos.net/" title="(iterate think thoughts)">Dmitri Sotnikov</a>
                </li>
                <li>
                  <a href="http://blog.mitechki.net/search/label/clojure" title="Angry UNIXoid’s Humble Abode">Dmitriy Kropivnitskiy</a>
                </li>
                <li>
                  <a href="http://dimagog.github.io" title="Dimagog Blog">Dmitry Kakurin</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Dom Kiva-Meyer</a>
                </li>
                <li>
                  <a href="https://taylodl.wordpress.com" title="clojure – @taylodl's getting IT done">Don Taylor</a>
                </li>
                <li>
                  <a href="https://drknucklehead.wordpress.com" title="Clojure – Dr. Knucklehead's Blog">Dr. Knucklehead</a>
                </li>
                <li>
                  <a href="http://nils-blum-oeste.net" title="Dr. Nils Blum-Oeste">Dr. Nils Blum-Oeste</a>
                </li>
                <li>
                  <a href="http://dragan.rocks/" title="Dragan Djuric">Dragan Djuric</a>
                </li>
                <li>
                  <a class="message" title="no data">Dreamtime Circles</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Drew Olson</a>
                </li>
                <li>
                  <a href="https://drewverlee.github.io/" title="The Artificery">Drew Verlee</a>
                </li>
                <li>
                  <a href="http://carpathia.blogspot.com/" title="Carpathian Cloud">Edgar Gonçalves</a>
                </li>
                <li>
                  <a href="https://edwardkenworthy.wordpress.com" title="Clojure – edward kenworthy">Edward Kenworthy</a>
                </li>
                <li>
                  <a href="https://elangocheran.com" title="clojure – Sequenced Thoughts from C/S">Elango Cheran</a>
                </li>
                <li>
                  <a href="https://eli.thegreenplace.net/" title="Eli Bendersky's website">Eli Bendersky</a>
                </li>
                <li>
                  <a href="http://eli.naeher.name/" title="eli.naeher.name (Clojure-related posts)">Eli Naeher</a>
                </li>
                <li>
                  <a href="https://blog.engineyard.com" class="message" title="404: not found">Engine Yard</a>
                </li>
                <li>
                  <a href="http://epistemologicalengineering.blogspot.com/" title="Epistemological Engineering">Epistemological Engineering</a>
                </li>
                <li>
                  <a href="https://ericlavigne.wordpress.com" title="Eric Lavigne">Eric Lavigne</a>
                </li>
                <li>
                  <a href="http://elegoff.blogspot.com/search/label/clojure" title="Eric Le Goff's blog">Eric Le Goff</a>
                </li>
                <li>
                  <a href="http://writingcoding.blogspot.com/search/label/clojure" title="Writing/Coding">Eric Rochester</a>
                </li>
                <li>
                  <a href="http://ericsomdahl.github.io" title="(defthoughts)">Eric Somdahl</a>
                </li>
                <li>
                  <a href="http://slipset.github.io/" title="Erik Assum">Erik Assum</a>
                </li>
                <li>
                  <a href="https://medium.com/@ertu.ctn?source=rss-4a9faeeccbe4------2" title="Stories by Ertuğrul Çetin on Medium">Ertuğrul Çetin</a>
                </li>
                <li>
                  <a href="http://ethanfast.com" class="message" title="404: not found">Ethan Fast</a>
                </li>
                <li>
                  <a href="http://2017.euroclojure.org" title="EuroClojure">Euroclojure</a>
                </li>
                <li>
                  <a href="http://blog.mezeske.com" title="clojure – Mezeskedonia">Evan Mezeske</a>
                </li>
                <li>
                  <a href="https://www.exoscale.com/syslog/" title="exoscale syslog">Exoscale Blog</a>
                </li>
                <li>
                  <a href="http://www.exampler.com/blog" title="Exploration Through Example">Exploration Through Example</a>
                </li>
                <li>
                  <a href="http://kimavcrp.blogspot.com/search/label/clojure" title="Exploring the programming world">Exploring the programming world</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Factual dev blog</a>
                </li>
                <li>
                  <a href="http://www.falkoriemenschneider.de" title="Clojure">Falko Riemenschneider</a>
                </li>
                <li>
                  <a href="https://tomassetti.me" title="Federico Tomassetti – Software Architect">Federico Tomassetti</a>
                </li>
                <li>
                  <a href="http://ubercode.de" title="ubercode">Felix Dahlke</a>
                </li>
                <li>
                  <a href="http://cupofjava.de/" title="Category: clojure | Cup of Java">Felix Müller</a>
                </li>
                <li>
                  <a href="https://fenrock.wordpress.com" title="A Blog from Fenrock">Fenrock</a>
                </li>
                <li>
                  <a href="http://fhur.github.io/" title="fernandohur's blog">Fernando Hurtado</a>
                </li>
                <li>
                  <a href="http://fixitwithcode.com" title="Thoughts from the Couch">Fix it with code</a>
                </li>
                <li>
                  <a href="http://flowa.fi" class="message" title="404: not found">Flowa</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Frankie Sardo</a>
                </li>
                <li>
                  <a title="">Franklin Chen</a>
                </li>
                <li>
                  <a href="http://fgiasson.com/blog" title="Clojure – Frederick Giasson">Frederick Giasson</a>
                </li>
                <li>
                  <a href="http://www.lexicallyscoped.com/" title="Lexically scoped">Fredrik Dyrkell</a>
                </li>
                <li>
                  <a href="https://functionalbytes.nl/" title="English posts of Functional Bytes - Clojure en Java specialist">Functional Bytes</a>
                </li>
                <li>
                  <a href="https://clojuredesign.club/" title="Functional Design in Clojure">Functional Design in Clojure podcast</a>
                </li>
                <li>
                  <a href="https://www.functionalgeekery.com" title="Functional Geekery">Functional Geekery</a>
                </li>
                <li>
                  <a href="https://medium.com/@functionalhuman?source=rss-5f948efd4b3a------2" title="Stories by Functional Human on Medium">Functional Human</a>
                </li>
                <li>
                  <a href="https://functionaljobs.com/" class="message" title="internal server error">Functional Jobs</a>
                </li>
                <li>
                  <a href="http://functionaltalks.org/" title="FunctionalTalks.org">Functional Talks</a>
                </li>
                <li>
                  <a href="https://functional.works-hub.com/learn/" title="Functional Works">Functional Works</a>
                </li>
                <li>
                  <a href="http://www.futurile.net/" title="Futurile">Futurile</a>
                </li>
                <li>
                  <a href="https://gal.dolber.com/" title="(shuffle thoughts)">Gal Dolber</a>
                </li>
                <li>
                  <a href="http://garajeando.blogspot.com/search/label/Clojure" title="Garajeando">Garajeando</a>
                </li>
                <li>
                  <a href="https://gtrak.wordpress.com" class="message" title="410: gone">Gary Trakhman</a>
                </li>
                <li>
                  <a href="https://teamgaslight.com/blog" class="message" title="no data">Gaslight</a>
                </li>
                <li>
                  <a href="http://www.machinelake.com" title="Play with the Machine">Gavin McGovern</a>
                </li>
                <li>
                  <a href="https://itrevolution.com" title="IT Revolution">Gene Kim / IT Revolution</a>
                </li>
                <li>
                  <a href="https://funclojure.tumblr.com/" title="clojure">Gerrit Jansen van Vuuren</a>
                </li>
                <li>
                  <a href="http://fsteeg.com/tags/name" title="Geschreibsel">Geschreibsel</a>
                </li>
                <li>
                  <a href="https://thegeez.github.com/" title="thegeez blog">Gijs Stuurman</a>
                </li>
                <li>
                  <a href="http://gilesbowkett.blogspot.com/" title="Giles Bowkett">Giles Bowkett</a>
                </li>
                <li>
                  <a href="http://blog.glenjamin.co.uk" title="Coding through the Glen - clojure">Glen Mailer</a>
                </li>
                <li>
                  <a href="https://orthogonal.me" title="Clojure – The Occasional Blogger">Glen Stampoultzis</a>
                </li>
                <li>
                  <a href="https://glennengstrand.info/blog" title="clojure – Glenn Engstrand">Glenn Engstrand</a>
                </li>
                <li>
                  <a href="http://patterngazer.blogspot.com/search/label/clojure" title="Being an apprentice software craftsman">Globulon</a>
                </li>
                <li>
                  <a href="http://goose.haus/" title="Goose Haus">Goose Haus</a>
                </li>
                <li>
                  <a href="https://www.wisdomandwonder.com" title="Clojure – Wisdom And Wonder">Grant Rettke</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Greg Hawkins</a>
                </li>
                <li>
                  <a href="https://www.greghendershott.com/tags/Clojure.rss.xml" title="Posts tagged &quot;Clojure&quot;">Greg Hendershott</a>
                </li>
                <li>
                  <a href="http://gregosuri.com/" title="Greg Osuri">Greg Osuri</a>
                </li>
                <li>
                  <a href="http://gphil.net" title="gphil's blog - Posts tagged clojure">Greg Phillips</a>
                </li>
                <li>
                  <a href="https://www.taoeffect.com/blog" title="Tao Effect Blog">Greg Slepak</a>
                </li>
                <li>
                  <a href="http://guilespi.github.com/" title="Interrupted - Clojure">Guillermo Winkler</a>
                </li>
                <li>
                  <a href="https://tech.hbc.com/" title="HBC Tech">HBC Tech</a>
                </li>
                <li>
                  <a href="http://http-kit.org" class="message" title="no data">HTTP Kit</a>
                </li>
                <li>
                  <a href="https://hackaday.com" title="clojure – Hackaday">Hackaday</a>
                </li>
                <li>
                  <a href="https://www.recurse.com/blog" title="The Recurse Center Blog">Hacker School</a>
                </li>
                <li>
                  <a href="http://github.com/dylang/node-rss" title="Hacker Noon">Hackernoon</a>
                </li>
                <li>
                  <a href="https://hamishrickerby.com" title="Hamish Rickerby">Hamish Rickerby</a>
                </li>
                <li>
                  <a href="http://netzhansa.blogspot.com/search/label/clojure" title="netzhansa">Hans Hübner</a>
                </li>
                <li>
                  <a href="https://hashrocket.com/blog.rss" title="Hashrocket">Hashrocket</a>
                </li>
                <li>
                  <a href="https://medium.com/helpshift-engineering?source=rss----3229f31ca4f4---4" title="helpshift-engineering - Medium">Helpshift Engineering Blog</a>
                </li>
                <li>
                  <a href="http://www.prodevtips.com" title="ProDevTips – Web Development Tutorials">Henrik Sarvell</a>
                </li>
                <li>
                  <a href="http://widdindustries.com/" title="Henry Widd’s Blog | Clojure">Henry Widd</a>
                </li>
                <li>
                  <a href="http://thinkrevoactevo.blogspot.com/search/label/clojure" title="Think revo, act evo">Herwig Hochleitner</a>
                </li>
                <li>
                  <a href="http://heuristic-fencepost.blogspot.com/" title="Heuristic Fencepost">Heuristic Fencepost</a>
                </li>
                <li>
                  <a href="http://blog.hdurer.net" title="Holger's Blog">Holger Durer</a>
                </li>
                <li>
                  <a href="http://blog.find-method.de/" title="Not lost but found">Holger Schauer</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Homegrown Labs</a>
                </li>
                <li>
                  <a href="https://honza.ca" title="Honza Pokorny - Thoughts on web development">Honza Pokorny</a>
                </li>
                <li>
                  <a href="https://medium.com/@hlship?source=rss-858d614db402------2" title="Stories by Howard M. Lewis Ship on Medium">Howard M. Lewis Ship</a>
                </li>
                <li>
                  <a href="http://codemeself.blogspot.com/search/label/clojure" title="code me self">Hubert Iwaniuk</a>
                </li>
                <li>
                  <a href="https://mrhaki.blogspot.com/search/label/Clojure" title="Messages from mrhaki">Hubert Klein Ikkink</a>
                </li>
                <li>
                  <a href="http://hueypetersen.com/" title="hueypetersen.com">Huey Petersen</a>
                </li>
                <li>
                  <a href="http://hugoduncan.org/tags/clojure/" title="pelure">Hugo Duncan</a>
                </li>
                <li>
                  <a href="https://labs.ig.com/blogrss.xml" title="">IG Labs</a>
                </li>
                <li>
                  <a href="https://ianeslick.com" title="clojure – Frumious Abstractions">Ian Eslick</a>
                </li>
                <li>
                  <a href="http://ianp.org/" title="Category: Clojure | Digital Magpie">Ian Phillips</a>
                </li>
                <li>
                  <a href="http://www.rumford.name/" title="An Ostler in IT">Ian Rumford</a>
                </li>
                <li>
                  <a href="http://brownsofa.org/" title="Category: clojure | Brownsofa">Ian Truslove</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Ignacio Thayer</a>
                </li>
                <li>
                  <a href="http://specious.github.io/blog/" title="A blog by Ildar Sagdejev">Ildar Sagdejev</a>
                </li>
                <li>
                  <a href="android-app://com.medium.reader/https/medium.com/ilya-sterin" title="">Ilya Sterin</a>
                </li>
                <li>
                  <a href="https://jng.imagine27.com" class="message" title="internal server error">Imagine27</a>
                </li>
                <li>
                  <a href="http://immutant.org/" title="Immutant">Immutant</a>
                </li>
                <li>
                  <a href="https://data-sorcery.org" title="Data Sorcery with Clojure">Incanter: Data Sorcery with Clojure</a>
                </li>
                <li>
                  <a href="http://increasinglyfunctional.com/" title="Increasingly Functional">Increasingly Functional - Joshua Miller</a>
                </li>
                <li>
                  <a href="http://blog.isabel-drost-fromm.de/" title="Inductive Bias (Posts about clojure)">Inductive Bias</a>
                </li>
                <li>
                  <a href="http://ingesolvoll.github.io/" title="Inge Solvoll's Blog">Inge Solvoll</a>
                </li>
                <li>
                  <a href="http://insideclojure.org" title="Inside Clojure">Inside Clojure</a>
                </li>
                <li>
                  <a href="https://inside.unbounce.com" title="clojure – Inside Unbounce">Inside Unbounce</a>
                </li>
                <li>
                  <a href="http://www.inerciasensorial.com.br" title="Clojure – Inércia Sensorial">Inércia Sensorial</a>
                </li>
                <li>
                  <a href="http://isaaccambron.com/blog" title="Isaac Cambron">Isaac Cambron</a>
                </li>
                <li>
                  <a href="http://blog.isaachodes.io" title="Notes">Isaac Hodes</a>
                </li>
                <li>
                  <a href="https://grishaev.me/" title="Ivan Grishaev's blog">Ivan Grishaev</a>
                </li>
                <li>
                  <a href="http://clojurestuff.blogspot.com/" title="Clojure stuff">Ivan Schütz</a>
                </li>
                <li>
                  <a href="https://medium.com/makimo-tech-blog/tagged/lisp?source=rss----98fc48642ba7--lisp" title="Lisp in Makimo Tech Blog on Medium">Iwo Herka @ Makimo Tech Blog</a>
                </li>
                <li>
                  <a href="https://flexpoint.tech" title="Clojure – J. Pablo Fernández">J. Pablo Fernández</a>
                </li>
                <li>
                  <a href="ios-app://305343404/tumblr/x-callback-url/blog?blogName=jrheard&amp;postID=40024238467" class="message" title="http status 503">JR Heard</a>
                </li>
                <li>
                  <a href="https://medium.com/@jaceklaskowski?source=rss-df186e1cd0c2------2" title="Stories by Jacek Laskowski on Medium">Jacek Laskowski</a>
                </li>
                <li>
                  <a href="https://medium.com/@jacekschae?source=rss-17bb93fc3bc7------2" title="Stories by Jacek Schae on Medium">Jacek Schae</a>
                </li>
                <li>
                  <a href="https://jackdschultz.com" title="Jack Schultz">Jack Schultz</a>
                </li>
                <li>
                  <a href="https://chopmode.wordpress.com" title="clojure – chop-mode">Jacob Poulsgaard Tjørnholm</a>
                </li>
                <li>
                  <a href="https://jakemccrary.com/" title="Jake McCrary">Jake McCrary</a>
                </li>
                <li>
                  <a href="https://blog.jakuba.net/" class="message" title="404: not found">Jakub Arnold</a>
                </li>
                <li>
                  <a href="https://theholyjava.wordpress.com" title="clojure – Holy on Dev">Jakub Holý</a>
                </li>
                <li>
                  <a href="http://www.devstopfix.com/" title="Devstopfix">James Every</a>
                </li>
                <li>
                  <a title="Yo! Briefcase: clojure">James Hughes</a>
                </li>
                <li>
                  <a href="https://medium.com/@jamesleonis?source=rss-a158656a3960------2" title="Stories by James Leonis on Medium">James Leonis</a>
                </li>
                <li>
                  <a title="Boolean Knot - Blog">James Reeves</a>
                </li>
                <li>
                  <a href="https://www.kartar.net/" title="Kartar.Net">James Turnbull</a>
                </li>
                <li>
                  <a href="https://www.jamesward.com" class="message" title="404: not found">James Ward</a>
                </li>
                <li>
                  <a href="https://scattered-thoughts.net/" title="Scattered Thoughts">Jamie Brandon</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Jamie Ingilby</a>
                </li>
                <li>
                  <a href="https://jan.rychter.com/enblog/" title="Jan Rychter: Blog [EN]">Jan Rychter</a>
                </li>
                <li>
                  <a href="https://koodo.wordpress.com" title="Clojure – Code and stuff">Janne Lemmetti</a>
                </li>
                <li>
                  <a href="http://blog.lobberecht.com/search/label/clojure" title="Jared's WebLog">Jared Lobberecht</a>
                </li>
                <li>
                  <a href="http://jarrodctaylor.com" title="JarrodCTaylor">Jarrod C Taylor</a>
                </li>
                <li>
                  <a href="http://jasonaeschliman.blogspot.com/search/label/clojure" title="_">Jason Aeschliman</a>
                </li>
                <li>
                  <a href="https://dataissexy.wordpress.com" title="Clojure – Jason Bell">Jason Bell</a>
                </li>
                <li>
                  <a href="https://jasonrudolph.com/" title="Jason Rudolph">Jason Rudolph</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Jason Webb</a>
                </li>
                <li>
                  <a href="http://w01fe.com" title="w01fe">Jason Wolfe</a>
                </li>
                <li>
                  <a href="https://jatinpuri.com" class="message" title="internal server error">Jatin Puri</a>
                </li>
                <li>
                  <a title="Java Code Geeks">Java Code Geeks</a>
                </li>
                <li>
                  <a href="https://dzone.com/java-jdk-development-tutorials-tools-news" title="DZone Java Zone">Javalobby</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Jay Fields</a>
                </li>
                <li>
                  <a href="https://www.jayway.com/" title="Jayway">Jayway team</a>
                </li>
                <li>
                  <a href="http://jneen.net/" title="Things I Remember to Write Down">Jeanine Adkisson</a>
                </li>
                <li>
                  <a href="https://blog.jeaye.com//" title="Jeaye’s Blog">Jeaye Wilkerson</a>
                </li>
                <li>
                  <a href="http://www.fatvat.co.uk/" title="Fatvat">Jeff Foster</a>
                </li>
                <li>
                  <a href="https://toinfinity.wordpress.com" title="Clojure – Infinity: Easier Than You Think. Infinitely.">Jeff Gortatowsky</a>
                </li>
                <li>
                  <a href="http://jeroenvloothuis.blogspot.com/search/label/clojure" title="Jeroen Vloothuis">Jeroen Vloothuis</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Jessica Kerr</a>
                </li>
                <li>
                  <a href="http://www.mkrrf-it.com/blogs-of-jiawei-zhao/" title="Blogs of Jiawei Zhao | MKRRF IT">Jiawei Zhao</a>
                </li>
                <li>
                  <a href="http://www.clojure.net" title="A Clojure Story">Jim Duey</a>
                </li>
                <li>
                  <a href="http://jirka.marsik.me/" title="The Personal Blog of Jirka Maršík">Jirka Maršík</a>
                </li>
                <li>
                  <a href="https://joelholder.com" title="Joel Holder's Code Compendium">Joel Holder</a>
                </li>
                <li>
                  <a href="https://j19sch.github.io/" title="Joep Schuurkes (Posts about clojure)">Joep Schuurkes</a>
                </li>
                <li>
                  <a href="https://joeygibson.com" title="clojure – Joey Gibson's Blog">Joey Gibson</a>
                </li>
                <li>
                  <a href="https://jstaffans.github.io/" title="Johannes Staffans">Johannes Staffans</a>
                </li>
                <li>
                  <a href="https://medium.com/@biesnecker?source=rss-42c1e32960f9------2" title="Stories by John Biesnecker on Medium">John Biesnecker</a>
                </li>
                <li>
                  <a href="http://elhumidor.blogspot.com/search/label/clojure" title="El Humidor">John Hume</a>
                </li>
                <li>
                  <a href="https://www.duelinmarkers.com/" title="duelinmarkers.com">John Hume</a>
                </li>
                <li>
                  <a href="http://johnj.com" title="John Jacobsen">John Jacobsen</a>
                </li>
                <li>
                  <a href="http://jondotcomdotorg.net" title="clojure – jon.com.org.net">Jon Bristow</a>
                </li>
                <li>
                  <a href="http://www.pitheringabout.com" class="message" title="no data">Jon Pither</a>
                </li>
                <li>
                  <a href="https://jon.is.emotionull.com/" class="message" title="404: not found">Jon Romero</a>
                </li>
                <li>
                  <a href="https://jdevuyst.blogspot.com/" title="Jonas De Vuyst’s Blog">Jonas De Vuyst</a>
                </li>
                <li>
                  <a href="http://jonase.github.io" title="nil/recur">Jonas Enlund</a>
                </li>
                <li>
                  <a href="http://blog.jonharrington.org/" title="clojure - Jonathan Harrington">Jonathan Harrington</a>
                </li>
                <li>
                  <a href="https://www.eigenbahn.com/" title="Eigenbahn blog">Jordan Besly</a>
                </li>
                <li>
                  <a href="https://jorin.me/" title="Jorin's Logbook">Jorin Vogel</a>
                </li>
                <li>
                  <a href="http://josf.info/" title="Category: clojure | josf.info">Joseph Fahey</a>
                </li>
                <li>
                  <a href="http://blog.josephwilk.net/" title="Category: clojure | Joseph Wilk">Joseph Wilk</a>
                </li>
                <li>
                  <a href="https://medium.com/@jmglov?source=rss-29ada43ee630------2" title="Stories by Josh Glover on Medium">Josh Glover</a>
                </li>
                <li>
                  <a href="https://lionfacelemonface.wordpress.com" title="clojure – jjmojojjmojo: In Effect">Josh Johnson</a>
                </li>
                <li>
                  <a href="https://joshuadavey.com/" class="message" title="404: not found">Joshua Davey</a>
                </li>
                <li>
                  <a href="http://blog.wagjo.com" title="Jozef Wagner's Blog">Jozef Wagner</a>
                </li>
                <li>
                  <a href="http://tangrammer.github.io/" title="on the clojure move">Juan Antonio Ruz</a>
                </li>
                <li>
                  <a href="http://deraen.github.io/" title="Deraen's blog">Juho Teperi</a>
                </li>
                <li>
                  <a href="https://jukkaz.wordpress.com" title="clojure – Jukka Zitting">Jukka Zitting</a>
                </li>
                <li>
                  <a href="http://justforfn.blogspot.com/" title="just for fn">Just For Fn</a>
                </li>
                <li>
                  <a href="http://justinhj.github.io/" title="Functional[Justin]">Justin Heyes-Jones</a>
                </li>
                <li>
                  <a href="https://jkkramer.wordpress.com" title="Clojure – Justin Kramer">Justin Kramer</a>
                </li>
                <li>
                  <a href="https://medium.com/@kari.marttila?source=rss-817417aca5da------2" title="Stories by Kari Marttila on Medium">Kari Marttila</a>
                </li>
                <li>
                  <a href="http://tirkarthi.github.io" title="A Technical Blog on Clojure">Karthikeyan S</a>
                </li>
                <li>
                  <a href="http://keechma.com/news/" title="Keechma News">Keechma News</a>
                </li>
                <li>
                  <a href="https://keminglabs.com/" title="Keming Labs blog">Keming Labs</a>
                </li>
                <li>
                  <a href="http://def-learn.blogspot.com/search/label/clojure" title="(def-learn something)">Kevin Hostelley</a>
                </li>
                <li>
                  <a href="https://kevinlynagh.com/" title="Kevin Lynagh's website">Kevin Lynagh</a>
                </li>
                <li>
                  <a href="http://kieranbrowne.com/" title="Kieran Browne">Kieran Browne</a>
                </li>
                <li>
                  <a href="https://malagastockholm.wordpress.com" title="clojure – A Computer Sciences Engineer living in Stockholm">Kiko Fernandez</a>
                </li>
                <li>
                  <a href="http://controlroom.blogspot.com/search/label/clojure" title="Control Room">Kirby Urner</a>
                </li>
                <li>
                  <a href="https://engineering.klarna.com/tagged/clojure?source=rss----86090d14ab52--clojure" title="Clojure in Klarna Engineering on Medium">Klarna Engineering Blog</a>
                </li>
                <li>
                  <a href="http://squirrel.pl/blog" title="Clojure – Konrad Garus">Konrad Garus</a>
                </li>
                <li>
                  <a href="http://blog.khinsen.net/index.html" title="Konrad Hinsen's Blog: Konrad Hinsen's Blog">Konrad Hinsen</a>
                </li>
                <li>
                  <a href="http://konradkuehne.com/" title="Konrad Kühne">Konrad Kühne</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Kontor Engineering Blog</a>
                </li>
                <li>
                  <a href="http://blog.korny.info" title="Korny's Blog">Kornelis Sietsma</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Kototama</a>
                </li>
                <li>
                  <a href="https://medium.com/@kovasb?source=rss-6a46aa51e2fd------2" title="Stories by Kovas Boguta on Medium">Kovas Boguta</a>
                </li>
                <li>
                  <a href="http://blog.jenkster.com" title="Kris Jenkins' Blog">Kris Jenkins</a>
                </li>
                <li>
                  <a href="https://clojure.wladyka.eu/posts/" title="Posts on Clojure Blog">Krzysztof Wladyka</a>
                </li>
                <li>
                  <a href="https://kukuruku.co/" title="Kukuruku Hub">Kukuruku</a>
                </li>
                <li>
                  <a href="http://asymmetrical-view.com/" title="Kyle Burton">Kyle Burton</a>
                </li>
                <li>
                  <a href="https://kylecordes.com" title="clojure – Kyle Cordes">Kyle Cordes</a>
                </li>
                <li>
                  <a href="http://aphyr.com/" title="Aphyr: Clojure">Kyle Kingsbury</a>
                </li>
                <li>
                  <a href="https://zirkonit.svbtle.com" title="Kyle Nowak">Kyle Nowak</a>
                </li>
                <li>
                  <a href="http://www.lab49.com" title="Lab49">Lab49</a>
                </li>
                <li>
                  <a href="https://lambdaisland.com/blog" title="Lambda Island Blog">Lambda Island Blog</a>
                </li>
                <li>
                  <a href="https://lambdaisland.com/" title="Lambda Island">Lambda Island Freebies</a>
                </li>
                <li>
                  <a href="https://www.lambdacat.com/" title="clojure - LambdaCat">LambdaCat</a>
                </li>
                <li>
                  <a class="message" title="404: not found">LambdaX Blog</a>
                </li>
                <li>
                  <a href="https://lambdaforge.io/" title="lambdaforge.io">Lambdaforge Blog</a>
                </li>
                <li>
                  <a href="https://humorless.github.io/" title="Let over map merge">Laurence Chen</a>
                </li>
                <li>
                  <a href="https://blog.laurentcharignon.com/" title="Laurent Charignon">Laurent Charignon</a>
                </li>
                <li>
                  <a href="http://www.lauripesonen.com/" title="Lauri Pesonen">Lauri Pesonen</a>
                </li>
                <li>
                  <a href="https://leandromoreira.com" title="clojure – Leandro Moreira">Leandro Moreira</a>
                </li>
                <li>
                  <a href="http://www.learningclojure.com/" title="Learning Clojure">Learning Clojure</a>
                </li>
                <li>
                  <a title="">Lee Hinman</a>
                </li>
                <li>
                  <a href="http://leeorengel.com" title="clojure – Leeor Engel">Leeor Engel</a>
                </li>
                <li>
                  <a href="http://langnostic.inaimathi.ca" title="Language Agnostic">Leo Zovic</a>
                </li>
                <li>
                  <a href="http://www.leonardoborges.com/writings/" class="message" title="404: not found">Leonardo Borges</a>
                </li>
                <li>
                  <a href="https://leonid.shevtsov.me/" title="Leonid Shevtsov">Leonid Shevtsov</a>
                </li>
                <li>
                  <a href="https://levelup.gitconnected.com?source=rss----5517fd7b58a6---4" title="Level Up Coding - Medium">Level Up Coding</a>
                </li>
                <li>
                  <a href="http://blog.licenser.net/" class="message" title="404: not found">Lice!</a>
                </li>
                <li>
                  <a href="https://lispchronicles.wordpress.com" title="Lisp Chronicles">Lisp Chronicles</a>
                </li>
                <li>
                  <a href="https://lispcast.com" title="LispCast">LispCast</a>
                </li>
                <li>
                  <a href="http://logaan.github.io" title="Logan Campbell">Logan Campbell</a>
                </li>
                <li>
                  <a href="http://loganlinn.com/" title="Category: clojure | loganlinn.log">Logan Linn</a>
                </li>
                <li>
                  <a href="http://www.eventbrite.com/org/2086345901" title="Events organized by London Clojurians">London Clojurian Events</a>
                </li>
                <li>
                  <a href="http://lbradstreet.github.io/" title="Lucas Bradstreet">Lucas Bradstreet</a>
                </li>
                <li>
                  <a href="http://highorderdysfunctions.blogspot.com/" title="High order disfunctions - Disfunzioni di ordine superiore">Luciano Capitanio</a>
                </li>
                <li>
                  <a href="http://lukevanderhart.com/" title="Luke VanderHart">Luke VanderHart</a>
                </li>
                <li>
                  <a href="https://medium.com/@lumberdev?source=rss-21ce964c0c------2" title="Stories by Lumber Dev on Medium">Lumber Dev</a>
                </li>
                <li>
                  <a href="https://www.mxmmz.nl" title="MxMMz">Maarten Metz</a>
                </li>
                <li>
                  <a href="http://analyticbastard.github.io" title="The Analytic Bastard">Machinomics</a>
                </li>
                <li>
                  <a href="http://rundis.github.io/blog" title="The Rundis Blog">Magnus Rundberget</a>
                </li>
                <li>
                  <a href="http://norgat.blogspot.com/search/label/Clojure" title="Norgat blog">Maksim Karandashov</a>
                </li>
                <li>
                  <a href="http://blog.malcolmsparks.com" class="message" title="internal server error">Malcolm Sparks</a>
                </li>
                <li>
                  <a href="https://www.lambda-land.com/" title="Λambda Λand - RSS feed">Manuel Paccagnella</a>
                </li>
                <li>
                  <a href="https://www.manueluberti.eu" title="Manuel Uberti">Manuel Uberti</a>
                </li>
                <li>
                  <a href="http://entxtech.blogspot.com/" title="Marc's Tech">Marc Limotte</a>
                </li>
                <li>
                  <a href="http://ku1ik.com/" title="Odes of the Occult">Marcin Kulik</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Marco Munizaga</a>
                </li>
                <li>
                  <a href="http://www.marcoyuen.com/" title="Marco Yuen">Marco Yuen</a>
                </li>
                <li>
                  <a href="http://xivilization.net/~marek/blog/" title="Category: Clojure | The Hyperpessimist">Marek Kubica</a>
                </li>
                <li>
                  <a href="http://mneise.github.io" title="My Dev Blog">Maria Geller</a>
                </li>
                <li>
                  <a href="http://blog.maio.cz/search/label/clojure" title="Marian Schubert">Marian Schubert</a>
                </li>
                <li>
                  <a href="https://markbastian.github.io" title="(conj community thoughts)">Mark Bastian</a>
                </li>
                <li>
                  <a href="https://www.compoundtheory.com" title="Clojure – Compound Theory">Mark Mandel</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Mark McGranaghan</a>
                </li>
                <li>
                  <a href="http://www.markhneedham.com/blog" title="Mark Needham">Mark Needham</a>
                </li>
                <li>
                  <a href="https://markhneedham.com/blog/" title="Mark Needham">Mark Needham</a>
                </li>
                <li>
                  <a href="https://clojure-yap.blogspot.com/" title="Clojure Yap">Mark Nutter</a>
                </li>
                <li>
                  <a href="http://mark.reid.name" title="Inductio Ex Machina">Mark Reid</a>
                </li>
                <li>
                  <a href="http://code-and-cocktails.heroku.com/" title="Code And Cocktails">Mark Simpson</a>
                </li>
                <li>
                  <a title="">Mark Watson</a>
                </li>
                <li>
                  <a href="https://medium.com/@mhjort?source=rss-e0b1c3aeb27d------2" title="Stories by Markus Hjort on Medium">Markus Hjort</a>
                </li>
                <li>
                  <a href="http://blog.platypope.org/" title="platypope.org / blog / syndicate">Marshall Bockrath-Vandegrift</a>
                </li>
                <li>
                  <a href="http://www.spyfoos.com/" title="The Limiting Factor">Martin Clausen</a>
                </li>
                <li>
                  <a href="http://martin.janiczek.cz" title="Martin Janiczek">Martin Janiczek</a>
                </li>
                <li>
                  <a href="https://www.martinklepsch.org/" title="Martin Klepsch">Martin Klepsch</a>
                </li>
                <li>
                  <a href="http://martintrojer.github.io" title="Martin's Blog - Clojure">Martin Trojer</a>
                </li>
                <li>
                  <a href="https://maryrosecook.com/" title="Mary Rose Cook">Mary Rose Cook</a>
                </li>
                <li>
                  <a href="http://www.mase.io/" title="mase.io">Mason Browne</a>
                </li>
                <li>
                  <a href="https://masondesu.com/" title="masondesu.com">Mason Stewart</a>
                </li>
                <li>
                  <a href="https://mcorbin.fr" title="(mcorbin.fr)">Mathieu Corbin</a>
                </li>
                <li>
                  <a href="http://adereth.github.io/" title="adereth">Matt Adereth</a>
                </li>
                <li>
                  <a href="http://notesonclojure.blogspot.com/" title="Notes on Clojure">Matt Clark</a>
                </li>
                <li>
                  <a href="http://blog.mattgauger.com/" title="Matt Gauger">Matt Gauger</a>
                </li>
                <li>
                  <a href="http://mattgreer.org" title="Matt Greer">Matt Greer</a>
                </li>
                <li>
                  <a href="http://mattyw.github.io/" title="Category: clojure | mattyw">Matt Williams</a>
                </li>
                <li>
                  <a href="https://matthewdowney.github.io/" title="Matthew Downey">Matthew Downey</a>
                </li>
                <li>
                  <a href="http://sapient-pair.com/blog/tag/clojure/" title="Sapient Pair - Tagged: clojure">Matthew Phillips</a>
                </li>
                <li>
                  <a href="https://matthiasnehlsen.com" title="Matthias Nehlsen">Matthias Nehlsen</a>
                </li>
                <li>
                  <a href="http://mattyjwilliams.blogspot.com/search/label/clojure" title="mattyw">Matty Williams</a>
                </li>
                <li>
                  <a href="https://maurits.wordpress.com" title="Clojure – Maurits thinks aloud">Maurits Rijk</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Max Gonzih</a>
                </li>
                <li>
                  <a href="http://maxprokopiev.com/" title="">Max Prokopiev</a>
                </li>
                <li>
                  <a href="https://maxweber.github.io/" title="The blog of Max Weber">Max Weber</a>
                </li>
                <li>
                  <a href="http://engineering.mayvenn.com" title="">Mayvenn Engineering blog</a>
                </li>
                <li>
                  <a href="http://diogo149.github.com/" title="Me vs NP">Me vs NP</a>
                </li>
                <li>
                  <a href="http://kotka.de/blog/index.html" title="Kotka">Meikel Brandmeyer</a>
                </li>
                <li>
                  <a href="http://metaredux.com/" title="Meta Redux">Meta Redux</a>
                </li>
                <li>
                  <a href="https://medium.com/@metabase?source=rss-d8cd1c2343d5------2" title="Stories by Metabase on Medium">Metabase</a>
                </li>
                <li>
                  <a href="http://tech.metail.com" title="Clojure – Metail Tech">Metail Tech</a>
                </li>
                <li>
                  <a href="http://metosin.fi/" title="Metosin">Metosin</a>
                </li>
                <li>
                  <a href="http://michaelalynmiller.com/" title="Michael Alyn Miller">Michael Alyn Miller</a>
                </li>
                <li>
                  <a href="http://bad-concurrency.blogspot.com/" title="Bad Concurrency">Michael Barker</a>
                </li>
                <li>
                  <a href="http://mcohen01.github.com" class="message" title="404: not found">Michael Cohen</a>
                </li>
                <li>
                  <a href="ios-app://305343404/tumblr/x-callback-url/blog?blogName=michaeldrogalis&amp;postID=65274692089" class="message" title="404: not found">Michael Drogalis</a>
                </li>
                <li>
                  <a href="http://michaeldrogalis.github.io/" title="Michael Drogalis">Michael Drogalis</a>
                </li>
                <li>
                  <a href="http://mwfogleman.github.io/" title="rejoyce">Michael Fogleman</a>
                </li>
                <li>
                  <a href="http://blog.fogus.me" title="Send More Paramedics">Michael Fogus</a>
                </li>
                <li>
                  <a href="http://www.michaelharrison.ws/weblog" title="clojure – goodmike blogs here">Michael Harrison</a>
                </li>
                <li>
                  <a title="">Michael Kohl</a>
                </li>
                <li>
                  <a href="http://michakurt.blogspot.com/search/label/clojure" title="mk">Michael Krause</a>
                </li>
                <li>
                  <a href="https://michaelochurch.wordpress.com" title="Michael O. Church">Michael O. Church</a>
                </li>
                <li>
                  <a href="http://thornydev.blogspot.com/" title="ThornyDev">Michael Peterson</a>
                </li>
                <li>
                  <a href="http://michaelrbernste.in" title="michaelrbernste.in">Michael Robert Bernstein</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Michael Schneider</a>
                </li>
                <li>
                  <a href="https://cwithmichael.com/" title="Insomnia and *nix">Michael Terrell</a>
                </li>
                <li>
                  <a href="http://lewandowski.io/" title="Craftsmanship Archives">Michał Lewandowski</a>
                </li>
                <li>
                  <a href="https://hircus.wordpress.com" title="Clojure – Intuitionistically Uncertain">Michel Alexandre Salim</a>
                </li>
                <li>
                  <a href="http://blog.michielborkent.nl/" title="REPL adventures">Michiel Borkent</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Mihnea Dobrescu-Balaur</a>
                </li>
                <li>
                  <a href="http://turkia.github.io/" title="Mika's Clojure">Mika Turkia</a>
                </li>
                <li>
                  <a href="https://clojurefun.wordpress.com" title="Creative Clojure">Mike Anderson</a>
                </li>
                <li>
                  <a href="http://blog.fikesfarm.com/" title="FikesFarm Blog">Mike Fikes</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Mike Harris</a>
                </li>
                <li>
                  <a href="https://www.mikeivanov.com/" title="connecting the dots . . .">Mike Ivanov</a>
                </li>
                <li>
                  <a href="http://inchingforward.blogspot.com/search/label/clojure" title="Inching Forward">Mike Janger</a>
                </li>
                <li>
                  <a href="http://blog.mired.org/search/label/clojure" title="Mired in code">Mike Meyer</a>
                </li>
                <li>
                  <a href="https://blog.dottedmag.net/tagged/clojure?source=rss----68128df85fd5--clojure" class="message" title="404: not found">Mikhail Gusarov</a>
                </li>
                <li>
                  <a href="http://clojurewise.blogspot.com/" title="ClojureWise">Miki Tebeka</a>
                </li>
                <li>
                  <a href="http://blog.milehighcode.com/search/label/clojure" title="Mile High Code">Mile High Code</a>
                </li>
                <li>
                  <a href="https://mindbat.com" title="Mindbat">Mindbat</a>
                </li>
                <li>
                  <a href="http://www.modulolotus.net" title="Modulo Lotus">Modulo Lotus</a>
                </li>
                <li>
                  <a href="https://mooistudios.com" title="Mooi Studios">Mooi Studios</a>
                </li>
                <li>
                  <a href="http://blog.morphism.com/" title="Morphism Blog">Morphism Labs News</a>
                </li>
                <li>
                  <a href="https://mostlylazy.com" title="Mostly λazy…a Clojure podcast">Mostly λazy…a Clojure podcast</a>
                </li>
                <li>
                  <a href="http://clojurian.blogspot.com/" title="Musings on Clojure">Musings on Clojure</a>
                </li>
                <li>
                  <a href="http://clojurist.blogspot.com/" title="Welcome to Clojuric Park">Naren Arya</a>
                </li>
                <li>
                  <a href="https://blogs.oracle.com/nashorn/compendium/rss" class="message" title="internal server error">Nashorn JavaScript Project</a>
                </li>
                <li>
                  <a href="http://eigenjoy.com" class="message" title="no data">Nate Murray</a>
                </li>
                <li>
                  <a href="http://wildermuthn.github.com" title="wildermuthn">Nate Wildermuth</a>
                </li>
                <li>
                  <a href="http://nathanmarz.com/blog/" title="thoughts from the red planet">Nathan Marz</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Neale Swinnerton</a>
                </li>
                <li>
                  <a href="http://nelsonmorris.net/" title="Nelson Morris">Nelson Morris</a>
                </li>
                <li>
                  <a href="https://nervous.io" class="message" title="internal server error">Nervous Systems</a>
                </li>
                <li>
                  <a href="http://blog.ndk.io" title="Nicholas Kariniemi">Nicholas Kariniemi</a>
                </li>
                <li>
                  <a href="http://www.arachnid.co.nz/blog" title="Arachnid Studios Clojure Blog.">Nick Jones Clojure Blog</a>
                </li>
                <li>
                  <a class="message" title="403: forbidden">Nick Mudge</a>
                </li>
                <li>
                  <a href="http://www.niclas-meier.de/www.niclas-meier.de/" title="byte bohemian">Niclas Meier</a>
                </li>
                <li>
                  <a href="http://whollyweirdwyrd.blogspot.com/search/label/clojure" title="Mu">Nicolas Buduroi</a>
                </li>
                <li>
                  <a href="http://www.chaomancy.com/blog/" title="Chaomancy - Clojure">Nicolas Duchenne</a>
                </li>
                <li>
                  <a href="https://blog.frankel.ch/" title="A Java geek">Nicolas Fränkel</a>
                </li>
                <li>
                  <a href="http://blog.nberger.com.ar/" title="Category: clojure | Nico is blogging">Nicolás Berger</a>
                </li>
                <li>
                  <a href="http://nbeloglazov.com" title="nbeloglazov blog">Nikita Beloglazov</a>
                </li>
                <li>
                  <a href="https://tonsky.me/" title="tonsky.me">Nikita Prokopov</a>
                </li>
                <li>
                  <a href="https://deltadata.wordpress.com" title="clojure – Delta Data">Nikola Peric</a>
                </li>
                <li>
                  <a href="https://nikola.plejic.com/" title="Nikola Plejić">Nikola Plejić</a>
                </li>
                <li>
                  <a href="https://s01blog.wordpress.com" title="clojure">Nikos Karagiannakis</a>
                </li>
                <li>
                  <a href="http://numergent.com/" title="Numergent">Numergent</a>
                </li>
                <li>
                  <a href="http://nakkaya.com" title="An explorer's log">Nurullah Akkaya</a>
                </li>
                <li>
                  <a class="message" title="internal server error">O! Mr Speaker!</a>
                </li>
                <li>
                  <a href="http://osv-io.github.io//github/" title="Category: Clojure | OSv Blog">OSv</a>
                </li>
                <li>
                  <a href="https://olabini.se/blog" title="Ola Bini: Programming Language Synchronicity">Ola Bini</a>
                </li>
                <li>
                  <a href="https://www.olindata.com/en/404-page-not-found" class="message" title="internal server error">OlinData</a>
                </li>
                <li>
                  <a href="https://tech.labs.oliverwyman.com" title="Blog Posts – Oliver Wyman Digital: Engineering">Oliver Wyman</a>
                </li>
                <li>
                  <a href="http://onbeyondlambda.blogspot.com/" title="On Beyond Lambda">On Beyond Lambda</a>
                </li>
                <li>
                  <a href="https://blog.ona.io" title="Ona Blog">Ona Blog</a>
                </li>
                <li>
                  <a href="http://www.onyxplatform.org/" title="The Onyx Platform">Onyx Platform</a>
                </li>
                <li>
                  <a href="http://www.opensourcery.co.za/" title="Open Sourcery">Open Sourcery</a>
                </li>
                <li>
                  <a href="http://blog.oskarth.com" title="Oskar Thorén - clojure">Oskar Thorén</a>
                </li>
                <li>
                  <a href="https://oskarth.com/tags/clojure/" title="Clojure on OSKAR">Oskar Thorén</a>
                </li>
                <li>
                  <a href="https://wickstrom.tech/" title="Oskar Wickström">Oskar Wickström</a>
                </li>
                <li>
                  <a href="https://otavio.dev" title="O. Valadares' Blog">Otavio Valadares</a>
                </li>
                <li>
                  <a href="http://owenrh.me.ukk/" title="Owen Rees-Hayward: Software Developer, Software Architect, Spark Certified Developer, Big Data Engineer - Bristol">Owen Rees-Hayward</a>
                </li>
                <li>
                  <a href="https://oxfordknight.co.uk" title="Blog – Oxford Knight">Oxford Knight</a>
                </li>
                <li>
                  <a href="http://palletops.com/" title="Pallet, DevOps for the JVM">Pallet blog</a>
                </li>
                <li>
                  <a href="http://blog.paralleluniverse.co/" title="Parallel Universe Blog">Parallel Universe blog</a>
                </li>
                <li>
                  <a href="http://nklein.com" title="nklein software">Patrick Stein</a>
                </li>
                <li>
                  <a href="http://pmbauer.github.io" title="(def title nil)">Paul Bauer</a>
                </li>
                <li>
                  <a href="http://thesoftwaresimpleton.com" title="Paul Cowan">Paul Cowan</a>
                </li>
                <li>
                  <a href="http://gearon.blogspot.com/" title="Working notes">Paul Gearon</a>
                </li>
                <li>
                  <a href="https://www.pgrs.net/" title="Paul Gross’s Blog">Paul Gross</a>
                </li>
                <li>
                  <a href="http://oobaloo.co.uk" title="pingles">Paul Ingles</a>
                </li>
                <li>
                  <a href="https://www.quantisan.com/" title="Paul Lam. Software engineering manager for data-driven social enterprises. - clojure">Paul Lam</a>
                </li>
                <li>
                  <a href="http://www.paullegato.com" title="Paul Legato » clojure">Paul Legato</a>
                </li>
                <li>
                  <a href="http://earthly-powers.blogspot.com/search/label/clojure" title="Earthly Powers">Paul Sandoz</a>
                </li>
                <li>
                  <a href="http://paul.stadig.name/search/label/clojure" title="Paul Stadig">Paul Stadig</a>
                </li>
                <li>
                  <a href="http://www.pauldee.org/blog" class="message" title="no data">Paul deGrandis</a>
                </li>
                <li>
                  <a href="https://paulosuzart.github.io" title="Paulo Suzart">Paulo Suzart</a>
                </li>
                <li>
                  <a href="https://pawelgrzybek.com/" title="pawelgrzybek.com">Pawel Grzybek</a>
                </li>
                <li>
                  <a href="ios-app://305343404/tumblr/x-callback-url/blog?blogName=intothewebs&amp;postID=45073028163" title="">Pedro Mendez Calção</a>
                </li>
                <li>
                  <a href="https://medium.com/@donbonifacio?source=rss-4e40e0107778------2" title="Stories by Pedro Pereira Santos on Medium">Pedro Pereira Santos</a>
                </li>
                <li>
                  <a href="http://pelle.github.com" title="Adventures in Clojure and Datomic">Pelle Brændgaard</a>
                </li>
                <li>
                  <a href="http://pepijndevos.nl/" title="Wishful Coding">Pepijn de Vos</a>
                </li>
                <li>
                  <a href="https://perkss.github.io/#/clojure" title="The Perks of Computer Science">Perkss</a>
                </li>
                <li>
                  <a href="https://pettomato.tumblr.com/" title="pettomato">Pet Tomato</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Pete Keen</a>
                </li>
                <li>
                  <a href="http://pchristensen.com/blog" title="Clojure – Peter Christensen">Peter Christensen</a>
                </li>
                <li>
                  <a href="http://blog.podsnap.com/" title="podsnap - clojure">Peter Fraenkel</a>
                </li>
                <li>
                  <a href="https://technomancy.us/" title="Technomancy">Phil Hagelberg</a>
                </li>
                <li>
                  <a href="http://philipp.meier.name/" class="message" title="internal server error">Philipp Meier</a>
                </li>
                <li>
                  <a href="http://www.russet.org.uk/blog" title="An Exercise in Irrelevance">Phillip Lord</a>
                </li>
                <li>
                  <a href="https://spootnik.org/index.xml" title="Spootnik.org">Pierre-Yves Ritschard</a>
                </li>
                <li>
                  <a href="https://medium.com/pisanoeng?source=rss----40ed638f2704---4" title="pisanoeng - Medium">Pisano Engineering</a>
                </li>
                <li>
                  <a class="message" title="http status 520">Pluralsight</a>
                </li>
                <li>
                  <a href="http://practical.li/" title="Practicalli">Practicalli</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Pramode C.E</a>
                </li>
                <li>
                  <a href="http://overtone-recipes.github.io//" title="">Programming music with Clojure</a>
                </li>
                <li>
                  <a href="https://blog.project-fifo.net" title="Project-FiFo Blog">Project-FiFo</a>
                </li>
                <li>
                  <a href="https://farenda.com" title="Clojure – Programming for fun and profit">Przemysław Wojnowski</a>
                </li>
                <li>
                  <a href="https://puppet.com" title="Puppet.com Blog RSS Feed">Puppet Labs</a>
                </li>
                <li>
                  <a href="https://purelyfunctional.tv" title="PurelyFunctional.tv">PurelyFunctional.tv Clojure articles</a>
                </li>
                <li>
                  <a href="https://www.pushtechnology.com" title="Developer Blog – Push Technology">Push Technology</a>
                </li>
                <li>
                  <a href="https://blog.rjmetrics.com" title="The Data Point">RJMetrics</a>
                </li>
                <li>
                  <a href="https://emnh.github.io/rts-blog/" title="">RTS Blog</a>
                </li>
                <li>
                  <a href="https://developer.rackspace.com" title="Rackspace Developer Portal">Rackspace Developer Blog</a>
                </li>
                <li>
                  <a href="ios-app://305343404/tumblr/x-callback-url/blog?blogName=rafaelchacon&amp;postID=19069499949" class="message" title="http status 504">Rafael Chacón</a>
                </li>
                <li>
                  <a href="https://www.spacjer.com/" title="Rafal Spacjer blog">Rafal Spacjer</a>
                </li>
                <li>
                  <a href="https://rafalcieslak.svbtle.com" title="Exceptional Mirrors">Rafał Cieślak</a>
                </li>
                <li>
                  <a href="http://ragnard.github.io/" title="Ragnar Dahlén">Ragnar Dahlén</a>
                </li>
                <li>
                  <a href="http://www.railslove.com/" title="Railslove Clojure Stories">Railslove</a>
                </li>
                <li>
                  <a href="http://blog.rguha.net" class="message" title="internal server error">Rajarshi Guha</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Ralf Bensmann</a>
                </li>
                <li>
                  <a href="http://kriyative.github.com" title="clojure posts from kriyative">Ram Krishnan</a>
                </li>
                <li>
                  <a href="https://blog.raek.se/" title="raek: Blog">Rasmus Svensson</a>
                </li>
                <li>
                  <a href="http://ravi.pckl.me" title="Ravi Kotecha - Recent Posts">Ravi Kotecha</a>
                </li>
                <li>
                  <a href="http://blog.opengrail.com/" title="Ray McDermott - Seeking the Open Grail">Ray McDermott - Seeking the Open Grail</a>
                </li>
                <li>
                  <a href="https://www.1729.org.uk/tags/clojure/" title="clojure on 1729.org.uk">Ray Miller</a>
                </li>
                <li>
                  <a href="http://rayhightower.com/" title="RayHightower.com">Raymond T. Hightower</a>
                </li>
                <li>
                  <a href="http://read-eval-puke.blogspot.com/" title="read-eval-puke">Read-Eval-Puke</a>
                </li>
                <li>
                  <a href="http://realworldclojure.com/" title="Real World Clojure">Real World Clojure</a>
                </li>
                <li>
                  <a href="ios-app://305343404/tumblr/x-callback-url/blog?blogName=reborg&amp;postID=142353808588" class="message" title="404: not found">Reblog</a>
                </li>
                <li>
                  <a href="https://tech.redplanetlabs.com" title="Tech blog">Red Planet Labs</a>
                </li>
                <li>
                  <a href="http://feeds.feedburner.com/reiddraper.com" title="Reid Draper's blog">Reid Draper</a>
                </li>
                <li>
                  <a href="https://reshmeeauckloo.wordpress.com" title="Clojure – reshmeeauckloo">Reshmee</a>
                </li>
                <li>
                  <a href="http://clojure.blogspot.com/" title="Clojure">Rich Hickey</a>
                </li>
                <li>
                  <a href="http://www.codelearningdoing.com" title="Code Learning Doing">Richard Harrington</a>
                </li>
                <li>
                  <a href="https://changearc.blog" title="Clojure – changearc">Richard West</a>
                </li>
                <li>
                  <a href="http://richardminerich.com" title="Clojure – Inviting Epiphany">Rick Minerich</a>
                </li>
                <li>
                  <a href="https://rinuboney.github.io/" title="Rinu Boney">Rinu Boney</a>
                </li>
                <li>
                  <a href="http://codeofrob.com" title="Rob Ashton's blog">Rob Ashton</a>
                </li>
                <li>
                  <a href="http://regretful.ly" title="regretful.ly - Clojure">Robert Pitts</a>
                </li>
                <li>
                  <a href="https://rrees.me" title="clojure – Echo One">Robert Rees</a>
                </li>
                <li>
                  <a href="http://www.stuttaford.me/" title="Robert Stuttaford">Robert Stuttaford</a>
                </li>
                <li>
                  <a href="https://blog.sulami.xyz" title="sulami's blog">Robin Schroer</a>
                </li>
                <li>
                  <a href="http://blog.rlmflores.me/" title="Rodrigo Flores's Corner">Rodrigo Flores</a>
                </li>
                <li>
                  <a href="https://medium.com/@roman01la?source=rss-bfc4d6ac98db------2" title="Stories by Roman Liutikov on Medium">Roman Liutikov</a>
                </li>
                <li>
                  <a href="http://defromeo.github.io/" title="Category: Clojure | defromeo">Romeo</a>
                </li>
                <li>
                  <a href="http://narkisr.com/" title="Narkisr.com">Ronen Narkis</a>
                </li>
                <li>
                  <a href="http://techblog.roomkey.com/" class="message" title="internal server error">Room Key Tech Blog</a>
                </li>
                <li>
                  <a href="https://judithmassa.wordpress.com" title="Rubberducking">Rubberducking</a>
                </li>
                <li>
                  <a href="https://blog.rubylearning.com?source=rss----1813792c5411---4" title="RubyLearning Blog - Medium">RubyLearning Blog</a>
                </li>
                <li>
                  <a href="https://ruedigergad.com" title="Clojure – ruedigergad">Ruediger Gad</a>
                </li>
                <li>
                  <a href="https://mullr.wordpress.com" title="clojure – Russell Mull">Russell Mull</a>
                </li>
                <li>
                  <a href="http://www.toomuchcode.org/" title="Too Much Code">Ryan Brush</a>
                </li>
                <li>
                  <a href="http://rycole.com/" title="Programming, Technology and Startups - rycole.com">Ryan Cole</a>
                </li>
                <li>
                  <a href="http://rkn.io/" class="message" title="internal server error">Ryan Neufeld</a>
                </li>
                <li>
                  <a href="http://stradblog.blogspot.com/search/label/Clojure" title="Functional thoughts and experiences">Ryan Stradling</a>
                </li>
                <li>
                  <a href="https://medium.com/we-are-swat?source=rss----25bf14f7a5f3---4" title="WeAreSWAT - Medium">SWAT Team</a>
                </li>
                <li>
                  <a href="http://saaientist.blogspot.com/search/label/clojure" title="Saaien Tist">Saaien Tist</a>
                </li>
                <li>
                  <a href="https://sachachua.com/blog" title="clojure – sacha chua :: living an awesome life">Sacha Chua</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Safari Books Online</a>
                </li>
                <li>
                  <a href="https://blog.magpiebrain.com" title="clojure – magpiebrain">Sam Newman</a>
                </li>
                <li>
                  <a href="https://samritchie.io/" title="Sam's Blog">Sam Ritchie</a>
                </li>
                <li>
                  <a href="http://blog.samibadawi.com/search/label/Clojure" title="Languages and Logic">Sami Badawi</a>
                </li>
                <li>
                  <a href="https://samrat.me/tags/clojure/" title="clojure on Samrat Man Singh">Samrat Man Singh</a>
                </li>
                <li>
                  <a href="https://acidwords.com/" title="#:acid 'words">Sanel Z.</a>
                </li>
                <li>
                  <a href="https://scott.mn/" title="Divagations of a graphomane">Scott Feeney</a>
                </li>
                <li>
                  <a href="https://s6.io" class="message" title="internal server error">Screen6HQ</a>
                </li>
                <li>
                  <a href="https://www.seabre.com/" title="Category: clojure | Sean Brewer">Sean Brewer</a>
                </li>
                <li>
                  <a href="http://fulldisclojure.blogspot.com/" title="Full Disclojure">Sean Devlin</a>
                </li>
                <li>
                  <a href="https://vimeo.com" title="">Sean Devlin (vimeo)</a>
                </li>
                <li>
                  <a href="http://blog.n01se.net" title="searching for signal » clojure">Searching for Signal</a>
                </li>
                <li>
                  <a href="http://www.laliluna.de/" title="Laliluna Clojure, Java, Architecture articles">Sebastian Hennebrueder</a>
                </li>
                <li>
                  <a href="https://semaphoreci.com" title="Semaphore">Semaphore</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Semaphore CI Community Tutorials</a>
                </li>
                <li>
                  <a href="http://txt.arboreus.com/tagged/clojure.html" title="*clojure*.txt">Sergey Astanin</a>
                </li>
                <li>
                  <a href="http://sbtourist.blogspot.com/search/label/clojure" title="Thoughts and Fragments">Sergio Bossa</a>
                </li>
                <li>
                  <a href="https://sevenhong.svbtle.com" title="Seven Hong">Seven Hong</a>
                </li>
                <li>
                  <a href="ios-app://305343404/tumblr/x-callback-url/blog?blogName=sgeo&amp;postID=37646341234" class="message" title="http status 503">Sgeo Comet</a>
                </li>
                <li>
                  <a href="https://blog.00null.net/" title="00null Blog">Shane Kilkelly</a>
                </li>
                <li>
                  <a href="http://bitumenframework.blogspot.com/" title="Bitumen Framework">Shantanu Kumar</a>
                </li>
                <li>
                  <a href="http://charsequence.blogspot.com/" title="Char Sequence">Shantanu Kumar</a>
                </li>
                <li>
                  <a href="https://shaolang.github.io/posts/" title="Posts on Bit by bit">Shaolang Ai</a>
                </li>
                <li>
                  <a title="Shashy's Blog">Shashy Dass</a>
                </li>
                <li>
                  <a href="http://shayne.me/" title="A Blog">Shayne.me</a>
                </li>
                <li>
                  <a href="https://medium.com/@shivekkhurana?source=rss-8bbc23a01e06------2" title="Stories by Shivek Khurana on Medium">Shivek Khurana</a>
                </li>
                <li>
                  <a href="http://www.shrayas.com/" class="message" title="404: not found">Shrayas Rajagopal</a>
                </li>
                <li>
                  <a href="http://blog.shriphani.com/tags/clojure.html" title="SHRIPHANI PALAKODETY: Posts tagged 'clojure'">Shriphani Palakodety</a>
                </li>
                <li>
                  <a href="http://www.sids.in/blog" title="@ infinity, plus 1">Siddhartha Reddy</a>
                </li>
                <li>
                  <a href="http://simonb.com/" title="simonb.com">Simon Blanchard</a>
                </li>
                <li>
                  <a href="https://simonholgate.wordpress.com" title="Clojure – Simon Holgate's Blog">Simon Holgate</a>
                </li>
                <li>
                  <a title="Siscia Blog">Simone Mosciatti</a>
                </li>
                <li>
                  <a href="https://www.sitepoint.com" class="message" title="404: not found">SitePoint (Clojure)</a>
                </li>
                <li>
                  <a href="https://www.sitepoint.com" class="message" title="404: not found">SitePoint (ClojureScript)</a>
                </li>
                <li>
                  <a href="https://blog.skyliner.io?source=rss----fae7733bccbd---4" title="Skyliner - Medium">Skyliner</a>
                </li>
                <li>
                  <a href="https://sneakycode.net/rss.rss" title="SneakyCode">SneakyCode</a>
                </li>
                <li>
                  <a href="http://dev.solita.fi" title="/dev/solita">Solita developer blog</a>
                </li>
                <li>
                  <a href="http://www.snowfrog.net/" title="Sonia Hamilton - Blog">Sonia Hamilton</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Sonian</a>
                </li>
                <li>
                  <a href="https://medium.com/sparrho?source=rss----d282592d2ada---4" title="Sparrho.com - Medium">Sparrho</a>
                </li>
                <li>
                  <a href="https://clojurecljub.wordpress.com" title="Clojure Lunch Cljub">St. Louis Clojure Discussion Group</a>
                </li>
                <li>
                  <a href="https://stefan.arentz.ca/post/" title="Posts on">Stefan Arentz</a>
                </li>
                <li>
                  <a href="http://www.stefan-pfeiffer.de" title="Dr. Stefan Pfeiffer">Stefan Pfeiffer</a>
                </li>
                <li>
                  <a class="message" title="http status 401">Stefan Richter</a>
                </li>
                <li>
                  <a href="https://www.innoq.com/blog/st/index.xml" title="Stefan Tilkov’s Blog">Stefan Tilkov</a>
                </li>
                <li>
                  <a href="https://svese.dev" title="svese Engineering Blog">Stephan Schmidt</a>
                </li>
                <li>
                  <a href="https://items.sjbach.com" class="message" title="404: not found">Stephen Bach</a>
                </li>
                <li>
                  <a href="https://stevelosh.com/" title="Steve Losh">Steve Losh</a>
                </li>
                <li>
                  <a href="http://miner.github.io/" title="Conjobble">Steve Miner</a>
                </li>
                <li>
                  <a href="http://deliberate-software.com/" title="deliberate software">Steve Shogren</a>
                </li>
                <li>
                  <a href="http://steve.vinoski.net/blog" title="clojure – Steve Vinoski’s Blog">Steve Vinoski</a>
                </li>
                <li>
                  <a href="http://stevendick.github.com/" title="Category: Clojure | &lt;insert witty blog title&gt;">Steven Dick</a>
                </li>
                <li>
                  <a href="https://www.proctor-it.com" title="Clojure – Proctor It">Steven Proctor</a>
                </li>
                <li>
                  <a href="http://blog.eikeland.se" title="Twice the Mega Power">Stian Eikeland</a>
                </li>
                <li>
                  <a href="https://stuarth.github.io" title="Stuart Hinson">Stuart Hinson</a>
                </li>
                <li>
                  <a href="https://medium.com/@stuart.m.perks?source=rss-f9776c90cf16------2" class="message" title="404: not found">Stuart Perks</a>
                </li>
                <li>
                  <a href="https://stuartsierra.com" title="Digital Digressions by Stuart Sierra">Stuart Sierra</a>
                </li>
                <li>
                  <a href="https://sunng.info/blog/" title="Here comes the Sun">Sun Ning</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Sunil Mishra</a>
                </li>
                <li>
                  <a href="http://blog.suprematic.net/search/label/clojure" title="SUPREMATIC - BLOG">Suprematic</a>
                </li>
                <li>
                  <a href="https://swaroopch.com" title="clojure – Swaroop, The Dreamer">Swaroop C H</a>
                </li>
                <li>
                  <a href="https://blog.swiftkey.com" class="message" title="404: not found">SwiftKey</a>
                </li>
                <li>
                  <a href="https://swizec.com/blog" class="message" title="404: not found">Swizec Teller</a>
                </li>
                <li>
                  <a href="http://www.brainshave.com" title="brainshave blog">Szymon Witamborski</a>
                </li>
                <li>
                  <a href="https://blog.overops.com" class="message" title="internal server error">Takipi Blog</a>
                </li>
                <li>
                  <a href="http://tapestryjava.blogspot.com/search/label/clojure" title="Tapestry Central">Tapestry Central</a>
                </li>
                <li>
                  <a href="https://tarnbarford.net/" title="The Journals of Tarn Barford">Tarn Barford</a>
                </li>
                <li>
                  <a href="https://tsdh.wordpress.com" title="Clojure – Tassilo's Blog">Tassilo Horn</a>
                </li>
                <li>
                  <a href="https://blog.taylorwood.io/" title="Taylor ≈ Programmer">Taylor Wood</a>
                </li>
                <li>
                  <a title="TechAscent - Blog">TechAscent</a>
                </li>
                <li>
                  <a class="message" title="internal server error">Ted Leung</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Telia TechBlog</a>
                </li>
                <li>
                  <a href="http://teropa.info/blog/tags/clojure.html" title="Tero Parviainen">Tero Parviainen</a>
                </li>
                <li>
                  <a href="https://blog.testdouble.com/" title="Test Double | Our Blog">Test Double</a>
                </li>
                <li>
                  <a href="https://thebhwgroup.com/" title="The BHW Group">The BHW Group</a>
                </li>
                <li>
                  <a href="http://beclojure.org" title="BeClojure">The Belgian Clojure Community</a>
                </li>
                <li>
                  <a href="http://engineering.bittorrent.com" title="clojure – The BitTorrent Engineering Blog">The BitTorrent Engineering Blog</a>
                </li>
                <li>
                  <a href="https://changelog.com/" title="Changelog">The Changelog</a>
                </li>
                <li>
                  <a href="https://us1.campaign-archive.com/feed?u=60763b0c4890c24bd055f32e6&amp;id=9232ef71ee" title="The Clojure Atom by Brave Clojure Archive Feed">The Clojure Atom</a>
                </li>
                <li>
                  <a href="https://scicloj.github.com" title="SciCloj">The Clojure scientific hub</a>
                </li>
                <li>
                  <a href="http://blog.clojurewerkz.org/" title="The ClojureWerkz Blog">The ClojureWerkz Blog</a>
                </li>
                <li>
                  <a href="https://blog.giantswarm.io/" class="message" title="404: not found">The Giant Swarm Blog</a>
                </li>
                <li>
                  <a href="https://juxt.pro" title="The JUXT Blog">The JUXT Blog</a>
                </li>
                <li>
                  <a href="https://javahippie.net/" title="Tim Zöller">The Java Hippie (Tim Zöller)</a>
                </li>
                <li>
                  <a href="android-app://com.medium.reader/https/medium.com/netflix-techblog" class="message" title="internal server error">The Netflix Tech Blog</a>
                </li>
                <li>
                  <a class="message" title="404: not found">The New Stack</a>
                </li>
                <li>
                  <a href="http://oblong-code.blogspot.com/search/label/clojure" title="The Oblong">The Oblong</a>
                </li>
                <li>
                  <a href="https://dev.to" title="DEV Community">The Practical Dev</a>
                </li>
                <li>
                  <a href="https://us7.campaign-archive.com/feed?u=fef380870c4a5633a21f55d8e&amp;id=b5272e542b" title="The REPL Archive Feed">The REPL</a>
                </li>
                <li>
                  <a href="https://www.therepl.net/" title="The REPL">The REPL podcast</a>
                </li>
                <li>
                  <a href="https://medium.com/swlh?source=rss----f5af2b715248---4" title="The Startup - Medium">The Startup</a>
                </li>
                <li>
                  <a href="http://weakreference.blogspot.com/search/label/clojure" title="The Weak Reference">The Weak Reference</a>
                </li>
                <li>
                  <a class="message" title="internal server error">The Yieldbot Blog</a>
                </li>
                <li>
                  <a href="https://functional.christmas" title="The functional Christmas RSS feed">The functional Christmas</a>
                </li>
                <li>
                  <a href="https://www.theserverside.com" title="">TheServerSide</a>
                </li>
                <li>
                  <a href="https://www.theoryinpractice.net/" title="Theory In Practice">Theory In Practise</a>
                </li>
                <li>
                  <a href="https://porkostomus.gitlab.io/" title="These are the Voyages of the Porkostomus">These are the Voyages of the Porkostomus</a>
                </li>
                <li>
                  <a href="http://samesake.com/log/" class="message" title="no data">Thom Omans</a>
                </li>
                <li>
                  <a href="https://tgoossens.wordpress.com" title="clojure – Thomas Goossens' Blog">Thomas Goossens</a>
                </li>
                <li>
                  <a href="http://tgk.github.io/" title="Clojure/tgk">Thomas Greve Kristensen</a>
                </li>
                <li>
                  <a href="https://code.thheller.com/" title="from the shadows …">Thomas Heller</a>
                </li>
                <li>
                  <a href="https://justyouraveragehacker.wordpress.com" title="clojure – just your average hacker">Thomas Karolski</a>
                </li>
                <li>
                  <a href="https://thoughtbot.com/blog" title="Giant Robots Smashing Into Other Giant Robots">Thoughtbot</a>
                </li>
                <li>
                  <a href="http://programming-puzzler.blogspot.com/" title="Thoughts on Programming">Thoughts on Programming</a>
                </li>
                <li>
                  <a href="https://medium.com/@tiensonqin?source=rss-e658b1e571e5------2" title="Stories by Tienson Qin on Medium">Tienson Qin</a>
                </li>
                <li>
                  <a href="https://timgilbert.wordpress.com" title="clojure – Tim Gilbert's Blog">Tim Gilbert</a>
                </li>
                <li>
                  <a href="http://www.brool.com/index.xml" title="Brool">Tim Lopez</a>
                </li>
                <li>
                  <a href="https://www.brainonfire.net/blog" title="Brain on Fire">Tim McCormack</a>
                </li>
                <li>
                  <a href="http://timothypratley.blogspot.com/" title="Programming">Timothy Pratley</a>
                </li>
                <li>
                  <a href="https://togototo.wordpress.com" title="Clojure – To:goto To;">To:goto To;</a>
                </li>
                <li>
                  <a href="https://tobyloxy.com/tags/clojure/" title="clojure | Tobias Locsei">Tobias Locsei</a>
                </li>
                <li>
                  <a href="http://www.toccata.io" title="Toccata">Toccata Language</a>
                </li>
                <li>
                  <a href="http://tgvashworth.com" title="tgvashworth">Tom Ashworth</a>
                </li>
                <li>
                  <a href="http://www.thattommyhall.com" title="Everything Is a Ghetto: clojure">Tom Hall</a>
                </li>
                <li>
                  <a href="http://tohono.blogspot.com/search/label/Clojure" title="Tohono Consulting">Tom Hicks</a>
                </li>
                <li>
                  <a href="https://macwright.com" title="macwright.com">Tom MacWright</a>
                </li>
                <li>
                  <a href="http://blog.tomeklipski.com/search/label/clojure" title="Tomek Lipski's blog">Tomek Lipski</a>
                </li>
                <li>
                  <a href="https://tomekw.com/" title="Tomek Wałkuski">Tomek Wałkuski</a>
                </li>
                <li>
                  <a href="http://disclojure.org" title="Disclojure, Public Disclosure of All Things Clojure">Toni Batchelli</a>
                </li>
                <li>
                  <a href="https://tonyarcieri.com" title="Tony Arcieri">Tony Arcieri</a>
                </li>
                <li>
                  <a href="http://ashenfad.blogspot.com/search/label/clojure" title="Too Many NumLumps">Too Many NumLumps</a>
                </li>
                <li>
                  <a href="https://torsten.io" title="Torsten's STDOUT">Torsten Becker</a>
                </li>
                <li>
                  <a href="https://touk.pl/blog" title="Team Blog">Touk</a>
                </li>
                <li>
                  <a href="https://towardsdatascience.com?source=rss----7f60cf5620c9---4" title="Towards Data Science - Medium">Towards Data Science</a>
                </li>
                <li>
                  <a href="http://travis-whitton.blogspot.com/search/label/clojure" title="so it was written...">Travis Whitton</a>
                </li>
                <li>
                  <a href="https://twoguysarguing.wordpress.com" title="clojure – Two Guys Arguing">Two Guys Arguing</a>
                </li>
                <li>
                  <a href="ios-app://305343404/tumblr/x-callback-url/blog?blogName=vishers&amp;postID=21087443641" class="message" title="http status 503">Two Negatives Blog</a>
                </li>
                <li>
                  <a href="https://technology.blog.gov.uk" title="Technology in government">UK Government Digital Service</a>
                </li>
                <li>
                  <a href="http://udayv.com" title="verma/blog/clojure">Uday Verma</a>
                </li>
                <li>
                  <a href="http://blog.cleancoder.com/" title="The Clean Code Blog">Uncle Bob Martin</a>
                </li>
                <li>
                  <a href="http://vvvvalvalval.github.io/" title="Val on Programming">Valentin Waeselynck</a>
                </li>
                <li>
                  <a href="https://blog.venanti.us/" title="clojure - Venantius">Venantius</a>
                </li>
                <li>
                  <a href="http://vijaykiran.com" title="VijayKiran.com">Vijay Kiran</a>
                </li>
                <li>
                  <a href="http://www.viksit.com" title="Search Results for “clojure” – Viksit Gaur">Viksit Gaur</a>
                </li>
                <li>
                  <a href="https://vincent.404.taipei/" title="Vincent Cantin’s blog">Vincent Cantin</a>
                </li>
                <li>
                  <a href="https://technotzen.wordpress.com" title="clojure – Technology mixed with a little Zen">Vishal Sakaria</a>
                </li>
                <li>
                  <a href="https://vitalyper.wordpress.com" title="On Software and Life">Vitaly Peressada</a>
                </li>
                <li>
                  <a href="http://pannoniancoder.blogspot.com/search/label/clojure" title="Pannonian Coder">Vjeran Marcinko</a>
                </li>
                <li>
                  <a href="https://vlaaad.github.io/" title="(:dev/notes vlaaad)">Vlad Proczenko</a>
                </li>
                <li>
                  <a href="https://nvbn.github.io" title="nvbn blog - clojure">Vladimir Iakovlev</a>
                </li>
                <li>
                  <a href="https://brutalism.rs/" title="Vladimir Mitrović">Vladimir Mitrović</a>
                </li>
                <li>
                  <a href="https://www.voxxed.com" title="Voxxed">Voxxed</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Waldemar Schwan</a>
                </li>
                <li>
                  <a href="https://medium.com/wefarm-product-and-tech?source=rss----ad41a712344a---4" title="Wefarm Product and Tech - Medium">Wefarm Product and Tech</a>
                </li>
                <li>
                  <a href="https://wesmorgan.svbtle.com" title="Growing Desperate">Wes Morgan</a>
                </li>
                <li>
                  <a href="https://whynotsoftware.github.io/" title="Why Not Software [Blog]">Why Not Software</a>
                </li>
                <li>
                  <a href="https://wildbit.com/blog" title="Wildbit (en-US)">Wildbit</a>
                </li>
                <li>
                  <a href="https://www.patheos.com/blogs/crywoof" title="clojure – Cry 'Woof'">Will Duquette</a>
                </li>
                <li>
                  <a href="http://wmfarr.blogspot.com/" title="Scheming">Will Farr</a>
                </li>
                <li>
                  <a href="https://willwhim.wordpress.com" title="Clojure – Will.Whim">Will Fitzgerald</a>
                </li>
                <li>
                  <a href="https://wtfleming.github.io/" title="Will Fleming's Software blog">Will Fleming</a>
                </li>
                <li>
                  <a href="http://recursivity.com" title="Recursivity blog - All posts">Wille Faler</a>
                </li>
                <li>
                  <a href="http://blog.wjlr.org.uk/" title="Category: clojure | Will Roe&amp;#146;s blog">William Roe</a>
                </li>
                <li>
                  <a href="http://www.afronski.pl" class="message" title="404: not found">Wojciech Gawroński</a>
                </li>
                <li>
                  <a href="http://localhost:4000/" title="">Xavier Shay</a>
                </li>
                <li>
                  <a href="https://theburningmonk.com" title="theburningmonk.com">Yan Cui</a>
                </li>
                <li>
                  <a href="https://xsc.github.io/" title="(:title data)">Yannick Scherer</a>
                </li>
                <li>
                  <a href="https://read.klipse.tech/" title="A journey into functional programming">Yehonathan Sharvit</a>
                </li>
                <li>
                  <a href="https://blog.klipse.tech//" title="An interactive journey into functional programming with Yehonathan Sharvit">Yehonathan Sharvit</a>
                </li>
                <li>
                  <a class="message" title="404: not found">Yet Analytics</a>
                </li>
                <li>
                  <a href="https://yokolet.blogspot.com/" title="yokolet's notelets">Yoko Harada</a>
                </li>
                <li>
                  <a href="https://metametadata.wordpress.com" title="metametadata">Yuri Govorushchenko</a>
                </li>
                <li>
                  <a href="https://www.mednikov.tech" title="Yuri Mednikov">Yuri Mednikov</a>
                </li>
                <li>
                  <a href="http://zachcp.org/blog/" title="Blogs on zachcp.org">Zach Charlop-Powers</a>
                </li>
                <li>
                  <a href="https://medium.com/@ztellman?source=rss-c82016292cfc------2" title="Stories by Zach Tellman on Medium">Zach Tellman</a>
                </li>
                <li>
                  <a href="https://jobs.zalando.com/" class="message" title="404: not found">Zalando Tech Blog</a>
                </li>
                <li>
                  <a href="http://zeekat.nl/news/tag/clojure/index.rss" title="Zeekat.nl news tagged 'clojure'">Zeekat.nl news for clojure</a>
                </li>
                <li>
                  <a href="https://zef.me" title="Zef’s Musings 🤔">Zef Hemel</a>
                </li>
                <li>
                  <a class="message" title="http status 400">ZenModeler Engineering Blog</a>
                </li>
                <li>
                  <a href="https://medium.com/@zeroonegroup?source=rss-bd9b245f3b89------2" title="Stories by Zero One Group on Medium">Zero One Group</a>
                </li>
                <li>
                  <a href="https://jrebel.com" class="message" title="404: not found">ZeroTurnaround</a>
                </li>
                <li>
                  <a href="http://szamitogepesnyelveszet.blogspot.com/search/label/Clojure" title="NLP Meetup - Számítógépes Nyelvészet">Zoltan Varju</a>
                </li>
                <li>
                  <a href="https://anuj-seth.github.io/" title="anuj seth">anuj seth</a>
                </li>
                <li>
                  <a href="https://www.bevuta.com/en/blog" title="bevuta blog: 'clojure'">bevuta IT</a>
                </li>
                <li>
                  <a href="https://medium.com/@biopolitik?source=rss-4160dc59d724------2" title="Stories by Philip on Medium">biopolitik</a>
                </li>
                <li>
                  <a href="http://blog.cryptoguru.com/" title="cryptoguru">cryptoguru</a>
                </li>
                <li>
                  <a href="http://daiyi.co/blog/" title="daiyi">daiyi</a>
                </li>
                <li>
                  <a href="https://www.dotkam.com" title="clojure – . kam">dot kam</a>
                </li>
                <li>
                  <a href="https://tech.ebayinc.com/rss" title="eBay Tech Blog">eBay Tech Blog</a>
                </li>
                <li>
                  <a href="https://feierabendprojekte.wordpress.com" title="feierabendprojekte">feierabendprojekte</a>
                </li>
                <li>
                  <a class="message" title="403: forbidden">icyrock</a>
                </li>
                <li>
                  <a href="http://jr0cket.co.uk/" title="jr0cket">jr0cket - community developer</a>
                </li>
                <li>
                  <a href="https://medium.com/magnetcoop?source=rss----5e037f62561e---4" title="magnet.coop - Medium">magnet.coop</a>
                </li>
                <li>
                  <a href="http://mishadoff.com" title="mishadoff thoughts | clojure">mishadoff thoughts</a>
                </li>
                <li>
                  <a href="http://nd.github.io" class="message" title="404: not found">nd</a>
                </li>
                <li>
                  <a href="https://medium.com/fhirbase-dojo?source=rss----c373dab37cdb---4" title="fhirbase dojo - Medium">niquola</a>
                </li>
                <li>
                  <a class="message" title="internal server error">nrgb</a>
                </li>
                <li>
                  <a href="http://offcode.blogspot.com/search/label/clojure" title="Not your mother's code">offcode</a>
                </li>
                <li>
                  <a href="https://antoniogarrote.wordpress.com" title="Working Memory">opus artificem probat</a>
                </li>
                <li>
                  <a title="">outcastgeek</a>
                </li>
                <li>
                  <a href="https://pinterface.livejournal.com/" title="The Opinions Expressed Herein are My Own">pinterface</a>
                </li>
                <li>
                  <a href="http://programmablelife.blogspot.com/search/label/clojure" title="programmable life">programmable life</a>
                </li>
                <li>
                  <a href="http://pseudofish.com/" title="pseudofish">pseudofish</a>
                </li>
                <li>
                  <a href="https://quanttype.net/tags/clojure.html" title="Clojure and ClojureScript on quanttype">quanttype</a>
                </li>
                <li>
                  <a href="https://www.rdisorder.eu" title="Clojure – rDisorder">rDisorder</a>
                </li>
                <li>
                  <a href="http://randomcomputation.blogspot.com/" title="random computation">random computation</a>
                </li>
                <li>
                  <a href="http://www.tumblebolt.com/clojure.xml" class="message" title="403: forbidden">sabraham</a>
                </li>
                <li>
                  <a href="http://side-effects-bang.blogspot.com/search/label/clojure" title="side-effects!">side-effects!</a>
                </li>
                <li>
                  <a href="https://medium.com/@thi.ng?source=rss-af94d3518afd------2" title="Stories by thi.ng on Medium">thi.ng</a>
                </li>
                <li>
                  <a href="https://labs.uswitch.com/" class="message" title="internal server error">uSwitch Tech Blog</a>
                </li>
                <li>
                  <a href="https://revolucionlibrary.wordpress.com" title="Clojure – Revolución Movie Library">Željko Ziriković</a>
                </li>
            </ul>
          </section>
          
          <section class="sidebar-list">
            <h3>Planetarium</h3>
            <ul>
              <li><a href="http://planet.lisp.org/">Planet Lisp</a></li>
              <li><a href="http://www.planetscala.com/">Planet Scala</a></li>
              <li><a href="http://scheme.dk/planet/">Planet Scheme</a></li>
              <li><a href="http://planetjdk.org/">Planet JDK</a></li>
              <li><a href="http://planet.haskell.org/">Planet Haskell</a></li>
              <li><a href="http://www.planeterlang.org/">Planet Erlang</a></li>
              <li><a href="http://planet.python.org/">Planet Python</a></li>
              <li><a href="http://planetruby.0x42.net/">Planet Ruby</a></li>
              <li><a href="http://planet.perl.org/">Planet Perl</a></li>
            </ul>
          </section>
          
          <section class="sidebar-list">
            <h3>Syndicate</h3>
            <ul>
              <li><a href="http://planet.clojure.in/atom.xml">RSS</a></li>
<!--              <li><a href="http://feeds.feedburner.com/clojure">RSS</a></li>-->
              <li><a href="opml.xml">OPML</a></li>
              <li><a href="foafroll.xml">FOAF</a></li>
            </ul>
          </section>

        </div>
      </div>
    </div>
<!-- GOOG Analytics -->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12235178-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = 'async';
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
  })();
</script>
  </body>
</html>
